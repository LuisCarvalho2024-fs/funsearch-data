1;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
  return df
";{0: 0.7470235464932768}
2;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7146806703474187}
4;"
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
  return df
";{0: 0.7689554531490017}
8;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
";{0: 0.7559077347534566}
10;"
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'cp']]
  return df
";{0: 0.7505515058518807}
12;"
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'slp']]
  return df
";{0: 0.7506291881634347}
14;"
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
  return df
";{0: 0.7692661943319837}
15;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  return df
";{0: 0.7755161943319837}
20;"
  # Keep columns age, sex, cp, thalachh, exng
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
  return df
";{0: 0.7550880626223091}
22;"
  df = df[['age', 'sex', 'thalachh', 'cp', 'chol']]
  return df
";{0: 0.7731123481781376}
23;"
  return df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7732177482309688}
27;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
  return df
";{0: 0.7534751593965027}
28;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    return df
";{0: 0.7574690150032615}
30;"
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'exng']]
  return df
";{0: 0.7409815598061289}
32;"
  # Selecting the FIVE most important columns based on domain knowledge
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # Encoding categorical columns (if any) using one-hot encoding
  
  # Handling missing values or outliers (if any)
  
  return df
";{0: 0.7815965054313058}
34;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  return df
";{0: 0.7840290807882597}
35;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # One-hot encode any categorical columns
  
  # Handle missing values or outliers, if any
  
  return df
";{0: 0.7880481183345316}
36;"
  # Keeping the most important columns based on domain knowledge
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
  return df
";{0: 0.7574690150032615}
38;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7486041406245141}
41;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  return df[['thalachh', 'oldpeak', 'exng', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'slp_0', 'slp_1', 'slp_2']]
";{0: 0.7750880626223091}
43;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  # Handle missing values or outliers, if any
  
  return df
";{0: 0.7776482264727956}
44;"
  # Keep only the columns 'age', 'sex', 'cp', 'chol', 'thalachh' and drop rows with missing values
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']].dropna()
  
  return df
";{0: 0.7716471467129361}
47;"
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7857705233363129}
48;"
  # Keep only the columns 'age', 'cp', 'thalachh', 'oldpeak', 'caa'
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
  
  return df
";{0: 0.7732177482309688}
53;"
  df = df[['age', 'sex', 'cp', 'restecg', 'thalachh']]
  return df
";{0: 0.7622141309983775}
54;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # Example steps for preprocessing:
  
  # One-hot encode categorical columns if present
  # Handle missing values or outliers, e.g., imputation for missing values or removal of outliers
  
  return df
";{0: 0.7880481183345316}
55;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].fillna(df.mean())
  return df
";{0: 0.7599267722997285}
58;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Keep only the columns deemed important
    df = df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']]
    
    # Potential preprocessing steps can be added here
    
    return df
";{0: 0.7880481183345316}
60;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
    
    # One-hot encode categorical columns
    # Handle missing values or outliers, such as imputation for missing values
    # Possibly, scale/normalize the numerical features
    
    return df
";{0: 0.7855903610380646}
62;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
  
  return df
";{0: 0.8018462851004831}
64;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].fillna(0)
  return df
";{0: 0.7534751593965027}
65;"
  # Selecting and preprocessing the dataset with the most important columns
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  
  # Applying one-hot-encoding to categorical columns
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7507242331066005}
68;"
  # Selecting relevant columns and dropping rows with missing values
  df = df[['age', 'sex', 'cp', 'thalachh', 'slp']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7641896057541957}
69;"
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Selecting the 5 most important columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  return df
";{0: 0.7840290807882597}
70;"
# Improved version with basic preprocessing steps
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
    
    # One-hot encode categorical columns if present
    # Handle missing values or outliers
    
    return df
";{0: 0.7880481183345316}
73;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7612536434263772}
74;"
  # Return the dataframe with the FIVE most important columns
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  return df
";{0: 0.7569889213264466}
75;"
# Selecting the five most important columns for the dataset
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
    
    return df
";{0: 0.8005379294656333}
80;"
    df = df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    # Impute missing values or handle outliers
    
    return df
";{0: 0.7711966135695698}
82;"
  # Dropping rows with missing values
  df = df.dropna()
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  
  return df
";{0: 0.7464359102418803}
83;"
    df = df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']].dropna()
    
    # Potential preprocessing steps can be added here
    
    return df
";{0: 0.7880481183345316}
85;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7739016219443431}
86;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'slp_0', 'slp_1', 'slp_2']]
";{0: 0.7492322649004353}
87;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  return df
";{0: 0.7504315442772662}
88;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: -1}
89;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
    return df
";{0: 0.7716471467129361}
93;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  # Normalizing 'thalachh' and 'caa' columns
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
  
  return df
";{0: 0.7816048587885583}
94;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # Handle missing values or outliers, if any

  return df
";{0: 0.7880481183345316}
95;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # Mapping numerical values to categorical values and applying one-hot-encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    one_hot_encoded = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return one_hot_encoded
";{0: 0.7531891272973449}
96;"
  df = df.dropna()
  
  # One-hot encoding categorical columns and selecting the five most important columns
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'slp']]
  
  return df
";{0: 0.7353969376740968}
97;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'slp']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.768081054806935}
103;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
  return df
";{0: 0.716125516137916}
107;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()

  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7507242331066005}
111;"
  df = df[['sex', 'thalachh', 'oldpeak', 'caa', 'exng']]
  return df
";{0: 0.7594276516603555}
113;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].fillna(df.mean())
  return df
";{0: 0.748764414519}
114;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
    
    # Mapping numerical values to categorical values and applying one-hot-encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7781947657605552}
115;"
  return df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']]
";{0: 0.7840290807882597}
117;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].fillna(df.mean())
    return df
";{0: 0.7652979403637298}
119;"
    # Drop rows containing missing values
    df.dropna(inplace=True)
    
    # Select the important columns needed for the model
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
    
    return df
";{0: 0.7880481183345316}
120;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
";{0: 0.7884403709471843}
123;"
  df = df.dropna()
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  
  return df
";{0: 0.7495567065830155}
126;"
  # Selecting the required columns relevant for the model
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'exng']]
  
  return df
";{0: 0.7432414468117787}
127;"
# Improved version that selects the most relevant features for predicting heart attack chances
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # Mapping numerical values to categorical values and applying one-hot-encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7572853894581233}
128;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # One-hot encode categorical columns if present
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  # Implement preprocessing steps, like handling missing values or outliers
  
  return df
";{0: 0.7711966135695698}
129;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  df.dropna(inplace=True)
  return df
";{0: 0.7711966135695698}
133;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'trtbps']].fillna(df.mean())
    return df
";{0: 0.7675898884143821}
136;"
  # Dropping rows with missing values and selecting the five most important columns
  return df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']].dropna()
";{0: 0.7908585586247379}
137;"
  # Extracting top 5 most important features based on feature importance analysis
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7765818625347489}
139;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  return df
";{0: 0.7784746735415681}
140;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
    
    # Mapping numerical values to categorical values and applying one-hot encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7765818625347489}
143;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
    
    # Potential preprocessing steps can be added here
    
    return df
";{0: 0.7880481183345316}
144;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']].dropna()
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7857705233363129}
145;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # Encoding categorical variables using one-hot-encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7572853894581233}
146;"
  # Filling missing values with mean
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numeric columns
  df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

  return df
";{0: 0.779848894177682}
149;"
    df = df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']].dropna()
    # No need for any further processing at this point
    return df
";{0: 0.7880481183345316}
150;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
    
    # Mapping numerical values to categorical values and applying one-hot-encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: -1}
152;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numeric columns
  df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

  return df[['age', 'thalachh', 'oldpeak', 'cp', 'exng']]
";{0: 0.7987660580313083}
153;"
    # Selecting relevant columns and dropping rows with missing values
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # Mapping numerical values to categorical values and one-hot-encoding them
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7555159385083444}
154;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
  
  return df
";{0: 0.7740597521729214}
156;"
  df = df.dropna()
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  
  # Selecting the five most important columns
  df = df[['age', 'thalachh', 'oldpeak', 'slp', 'thall']]  

  return df
";{0: 0.7299036555261373}
157;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  # Implement feature scaling and handling missing values or outliers
  
  return df
";{0: 0.7711966135695698}
158;"
  df = df[['age', 'thalachh', 'oldpeak', 'cp', 'slp']]
  
  # One-hot encode categorical columns if needed
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  # Add preprocessing steps here, e.g., handling missing values or outliers
  
  return df
";{0: 0.7492322649004353}
159;"
    return df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']].copy()
";{0: 0.7880481183345316}
160;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].fillna(df.mean())
";{0: 0.7511198086540551}
161;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df['cp'] = df['cp'].map({0: 'typical angina', 1: 'atypical angina', 2: 'non-anginal pain', 3: 'asymptomatic'})
  
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: -1}
163;"
    # Impute missing values with the mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numeric columns
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7675002258968103}
164;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numeric columns
  df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['cp', 'caa'])

  return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa_0', 'caa_1', 'caa_2', 'caa_3', 'caa_4']]
";{0: 0.7536979969183359}
165;"
    df = df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']].dropna()
    return df
";{0: 0.7880481183345316}
166;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
    
    # Mapping numerical values to categorical values and applying one-hot-encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: -1}
168;"
    return df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']].dropna()
";{0: 0.7880481183345316}
171;"
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7820409196067091}
173;"
  df = df[['age', 'sex', 'cp', 'restecg', 'thalachh']]
  df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'], drop_first=True)
  return df
";{0: 0.7295341610876276}
174;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  return df[['age', 'thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa_1', 'caa_2', 'caa_3']]
";{0: 0.7366897942240408}
175;"
  # Select the relevant columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # Encode categorical columns using one-hot encoding if needed
  
  # Handle missing values or outliers in the dataset
  
  return df
";{0: 0.7815965054313058}
176;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  # Handle missing values or outliers, if any
  return df
";{0: 0.7120818002909214}
178;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
";{0: 0.7965114698740312}
180;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'slp']) # One-hot-encode 'cp' and 'slp' columns
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) # Drop unnecessary columns
    return df
";{0: 0.8126688001264272}
181;"
  df = df[['age', 'thalachh', 'oldpeak', 'cp', 'exng']]
  df['cp'] = pd.Categorical(df['cp'])
  df['cp'] = df['cp'].cat.codes
  return df
";{0: 0.7519105215547628}
183;"
    df.fillna(df.mean(), inplace=True) # Fill missing values with column mean
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'slp']) # One-hot encoding for 'cp' and 'slp'
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) # Drop specified columns
    return df
";{0: 0.8084607346676311}
184;"
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numeric columns
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['cp', 'exng'])
    
    return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'exng_0', 'exng_1']]
";{0: 0.7944696969696969}
187;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7820409196067091}
191;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numeric columns
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # Encoding categorical columns (if any) - can be added here
    
    return df[['age', 'thalachh', 'oldpeak']]
";{0: 0.740159970748206}
193;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.8084607346676311}
195;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  # Handle missing values or outliers
  
  return df
";{0: 0.7776482264727956}
197;"
  return df[['age', 'sex', 'cp', 'chol', 'thalachh']].dropna()
";{0: 0.7692661943319837}
198;"
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'cp']].dropna()
  df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: -1}
199;"
  # Selecting specific columns and dropping rows with missing values
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
  
  return df
";{0: 0.7534751593965027}
203;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]
  
  return df
";{0: 0.7977551103488758}
205;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna().reset_index(drop=True)
    return df
";{0: 0.7559077347534566}
206;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # Implement one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  # Apply feature scaling, handle missing values, and outliers if needed
  
  return df
";{0: 0.7711966135695698}
207;"
  return df[['age', 'sex', 'cp', 'thalachh', 'caa']].fillna(df.mean())
";{0: 0.7801951036490948}
209;"
    return df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]
";{0: 0.7950666240835339}
211;"
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Keeping only the FIVE most important columns
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
  
  return df
";{0: 0.7577690124710356}
212;"
    df = df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']]
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    # Add code to handle missing values or outliers

    return df
";{0: 0.7776482264727956}
213;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.dropna(inplace=True)
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
    return df
";{0: 0.7880481183345316}
217;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].fillna(df.mean())
";{0: 0.7479989689203123}
218;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['oldpeak'] = np.cbrt(df['oldpeak']) # Cube root transformation on 'oldpeak'
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.7900211773242324}
219;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'slp']].fillna(df.mean())
  return df
";{0: 0.7599670634029493}
220;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
  df['cp'] = pd.Categorical(df['cp'])
  df['cp'] = df['cp'].cat.codes
  return df
";{0: 0.7950666240835339}
221;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].fillna(0)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
  df['exng'] = df['exng'].astype(str)
  df = pd.get_dummies(df, columns=['cp', 'exng'], drop_first=True)
  return df
";{0: 0.724831874267377}
223;"
  df.dropna(inplace=True)
  
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # Additional preprocessing steps or feature engineering can be added here
  
  return df
";{0: 0.7880481183345316}
225;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.7856654604458295}
227;"
  # Keep only the selected columns
  return df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
";{0: 0.7991344206937033}
228;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'thalachh']].dropna()
  return df
";{0: 0.7777089360334297}
230;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7982871203612676}
231;"
  return df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
";{0: 0.7737434907458691}
234;"
  return df[['age', 'thalachh', 'cp', 'caa', 'exng']]
";{0: 0.7644685188750978}
236;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].dropna()
    df['exng'] = df['exng'].astype(str)
    df = pd.get_dummies(df)
    return df
";{0: 0.7851961542460555}
238;"
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7915074593443184}
246;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna().reset_index(drop=True)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df['exng'] = pd.Categorical(df['exng'], categories=[0, 1], ordered=True)
  df = pd.get_dummies(df, columns=['cp', 'exng'], drop_first=True)
  return df
";{0: 0.7288329856872159}
253;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].dropna()
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    return df
";{0: 0.779239015541634}
256;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  
  # Applying one-hot-encoding to categorical columns
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7507242331066005}
257;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].fillna(method='bfill')
  return df
";{0: 0.7462785388127854}
259;"
  # Select specific columns from the dataset
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.7848919267909273}
260;"
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8023549169714371}
265;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    
    return df
";{0: 0.8041050177892283}
266;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].fillna(df.median())
  return df
";{0: 0.7801951036490948}
268;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numeric columns
  df[['age', 'thalachh', 'oldpeak']] = (df[['age', 'thalachh', 'oldpeak']] - df[['age', 'thalachh', 'oldpeak']].mean()) / df[['age', 'thalachh', 'oldpeak']].std()
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['cp', 'caa'])

  return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa_0', 'caa_1', 'caa_2', 'caa_3', 'caa_4']]
";{0: 0.7512121212121212}
269;"
    return df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']].fillna(df.mean())
";{0: 0.7991344206937033}
270;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]
    
    # One-hot encoding categorical columns ""cp""
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7915074593443184}
272;"
  # Drop rows with missing values
  df = df.dropna()

  # Selecting the five most important columns
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]

  return df
";{0: 0.7924677540270367}
273;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
  df['exng'] = df['exng'].astype(str)
  df = pd.get_dummies(df, columns=['cp', 'exng'], drop_first=True)
  return df
";{0: 0.7201324207154645}
276;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.7808482109439329}
278;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7532101088128151}
281;"
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # One-hot encoding 'cp' and 'caa' columns
    df = pd.get_dummies(df, columns=['cp', 'caa'])
    
    return df
";{0: 0.747720912863855}
282;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]
    
    # One-hot encoding categorical columns ""cp"" and ""caa""
    df = pd.get_dummies(df, columns=['cp', 'caa'])
    
    return df
";{0: 0.7449640206332786}
285;"
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # One-hot encoding categorical columns 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7956882503047704}
288;"
  df = df.dropna()
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  
  # Normalizing numeric columns
  df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  
  return df[['age', 'thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa_1', 'caa_2', 'caa_3', 'caa_4']]

";{0: 0.6680075480075479}
289;"
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numeric columns
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.785064935064935}
291;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].fillna(df.median())
  return df
";{0: 0.7504315442772662}
295;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
  
    # One-hot-encode the 'sex' column
    df = pd.get_dummies(df, columns=['sex'])
  
    return df
";{0: 0.6959768339061893}
298;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # One-hot encoding categorical columns 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7982871203612676}
303;"
  df.dropna(inplace=True)
  
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
  
  return df
";{0: 0.7737830393558982}
304;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  
    # Applying one-hot-encoding to categorical columns
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    df = pd.get_dummies(df, columns=['sex', 'cp'])
  
    return df
";{0: -1}
305;"
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # Drop rows with missing values
    df.dropna(inplace=True)

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.7982871203612676}
306;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.7948017167213768}
307;"
  # Select only the specified columns
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'exng']]
  
  return df
";{0: 0.7453531445055825}
311;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'slp']].dropna()
  
  # Encoding categorical columns with one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.768081054806935}
312;"
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # One-hot encoding categorical columns 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7947177942963995}
314;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()

  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: -1}
315;"
  # Selecting columns and dropping NA values
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  
  # Applying one-hot-encoding to categorical columns
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7507242331066005}
317;"
  df = df[['age', 'sex', 'thalachh', 'oldpeak', 'caa']].dropna()
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
  return df
";{0: 0.7155686968398833}
322;"
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7922376355662408}
323;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
  df['sex'] = df['sex'].replace({0: 'female', 1: 'male'})
  df['cp'] = df['cp'].replace({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  return df
";{0: -1}
325;"
  df = df.dropna()
  
  df['sex'] = df['sex'].map({0: 'female', 1: 'male'})
  df = pd.get_dummies(df, columns=['sex', 'cp', 'caa', 'slp'], drop_first=True)
  
  selected_columns = ['age', 'chol', 'thalachh', 'oldpeak', 'sex_male', 'cp_1', 'cp_2', 'cp_3', 'caa_1', 'caa_2', 'caa_3', 'caa_4', 'slp_1', 'slp_2']
  df = df[selected_columns]
  
  return df
";{0: 0.72985680154261}
326;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    df = pd.get_dummies(df, columns=['cp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'slp'], inplace=True)
    
    return df
";{0: -1}
330;"
  df = df[['age', 'sex', 'cp', 'restecg', 'thalachh']]
  df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
  return df
";{0: 0.7398838114372779}
332;"
  df = df[['sex', 'cp', 'thalachh', 'chol', 'oldpeak']].dropna()
  
  return df
";{0: 0.7861274624522678}
333;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    one_hot_encoded = pd.get_dummies(df, columns=['sex', 'cp', 'exng'])

    return one_hot_encoded
";{0: 0.7600750469740813}
334;"
  df = df[['age', 'sex', 'thalachh', 'cp', 'chol']].dropna()
  
  # Feature engineering: one-hot-encoding for categorical columns
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7893887956113016}
335;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    df = pd.get_dummies(df, columns=['sex', 'cp', 'exng'], drop_first=True)

    return df
";{0: 0.7294670710144395}
341;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['age'] = pd.cut(df['age'], bins=[0, 50, 70, 100], labels=['young', 'middle_aged', 'old'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'age']) 
    return df
";{0: 0.7655102875125122}
343;"
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # Fill missing values with the mean of each column
    df.fillna(df.mean(), inplace=True)

    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.799731966151765}
344;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.7834470810004299}
346;"
    # Keep only the selected columns
    df = df[['thalachh', 'oldpeak', 'sex', 'cp', 'caa']]
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Perform one-hot encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7982871203612676}
347;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  
  return df[['age', 'thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa_1', 'caa_2', 'caa_3']]
";{0: 0.8101900876900876}
349;"
  # Selecting important columns and dropping rows with missing values
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()

  # Applying one-hot-encoding to categorical columns
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])

  return df
";{0: 0.7573908997732672}
351;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna().replace({'sex': {'male': 1, 'female': 0}}).reset_index(drop=True)
";{0: 0.7559077347534566}
354;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  return df
";{0: 0.7362467320313886}
356;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
  df['sex'] = df['sex'].replace({0: 'female', 1: 'male'})  # Replace numerical values with categorical labels
  df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})  # Map numerical values to corresponding categories
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)  # One-hot encode sex and cp columns
  return df
";{0: -1}
357;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].dropna()
";{0: 0.7840290807882597}
358;"
  # Selecting the five most important columns based on domain knowledge
  df = df[['sex', 'cp', 'thalachh', 'chol', 'oldpeak']].dropna()
  
  return df
";{0: 0.7861274624522678}
360;"
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numeric columns
    df[['age', 'thalachh', 'oldpeak']] = (df[['age', 'thalachh', 'oldpeak']] - df[['age', 'thalachh', 'oldpeak']].mean()) / df[['age', 'thalachh', 'oldpeak']].std()
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['cp', 'exng'])
    
    return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'exng_0', 'exng_1']]
";{0: 0.8035092449922958}
361;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['fbs', 'trtbps', 'restecg', 'chol', 'caa'], inplace=True)
    
    return df
";{0: 0.781433793798443}
365;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].apply(lambda x: x.fillna(x.value_counts().index[0]))
  return df
";{0: 0.7470235464932768}
366;"
  df = df[['thalachh', 'oldpeak', 'slp', 'exng', 'age']]
  
  df.dropna(inplace=True)
  
  df['age'] = pd.cut(df['age'], bins=[0, 50, 70, 100], labels=['young', 'middle_aged', 'old'])
  
  df = pd.get_dummies(df, columns=['age', 'slp'], drop_first=True)
  
  return df
";{0: 0.758023406847976}
367;"
    df = df[['age', 'cp', 'trtbps', 'thalachh', 'exng']].dropna()
    return df
";{0: 0.7643499066293182}
372;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  
  # Applying one-hot-encoding to categorical columns
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  
  return df
";{0: 0.7813257477131826}
375;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].dropna()
    return df
";{0: 0.787291522420345}
376;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  # One-hot encode 'sex' and 'cp' columns, dropping the first categories to prevent multicollinearity
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  
  return df
";{0: 0.7813257477131826}
377;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    
    # One-hot encode categorical columns
    one_hot_encoded = pd.get_dummies(df, columns=['sex', 'cp', 'exng'])

    return one_hot_encoded
";{0: 0.7560313311270868}
379;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7322164897507364}
380;"
  # Keep only the intended columns and drop any rows with missing values
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()

  # Convert 'sex' column to binary encoding (0 for female, 1 for male)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)

  # Perform one-hot encoding on categorical variables 'cp' and 'exng'
  df = pd.get_dummies(df, columns=['cp', 'exng'], drop_first=True)
  
  return df
";{0: 0.717143914968338}
382;"
  # Fill missing values with the mean of each column
  df = df.fillna(df.mean())
  
  # Scale the numerical columns to have zero mean and unit variance
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8155463632063615}
383;"
  # Fill null values with mean of the column
  df.fillna(df.mean(), inplace=True)

  # Scale the numerical columns to have zero mean and unit variance
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8155463632063615}
385;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'restecg'], inplace=True) 
    return df
";{0: 0.7848127083215442}
386;"
    df.fillna(df.mean(), inplace=True) # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation
    df['oldpeak'] = np.cbrt(df['oldpeak']) # Apply cube root transformation
    df = pd.get_dummies(df, columns=['cp', 'slp']) # One-hot encode categorical columns
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) # Drop unnecessary columns
    return df
";{0: 0.7900211773242324}
387;"
  df.fillna(df.mean(), inplace=True)

  # Normalizing numerical columns using Min-Max scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.8549265205361433}
388;"
  # Selecting important columns and dropping rows with missing values
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
  
  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7620733155575248}
389;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].fillna(0)
  df['sex'] = pd.Categorical(df['sex']).codes
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7362467320313886}
390;"
    # Selecting relevant columns
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]

    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.799731966151765}
391;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.7761173731547328}
392;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].dropna()
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.7787804904130977}
394;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
    
    # Applying one-hot-encoding for sex and cp columns
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7742265117923013}
395;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.7948017167213768}
396;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df[['age', 'thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7430361618818839}
398;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
    # One-hot encode 'sex' and 'cp' columns without dropping first categories
    df = pd.get_dummies(df, columns=['sex', 'cp'])
  
    return df
";{0: 0.7464304477958661}
402;"
  df = df.fillna(df.mean())
  
  # Normalize numerical columns between 0 and 1
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8276675753275736}
407;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
  df = pd.get_dummies(df, columns=['cp', 'exng'], drop_first=True)
  
  return df
";{0: 0.724831874267377}
409;"
  df = df.dropna()
  
  # One-hot encoding categorical columns and selecting most important columns
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa_1', 'caa_2', 'caa_3', 'caa_4']]
";{0: 0.7019905533063427}
412;"
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numeric columns
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['cp', 'exng'])
    
    selected_columns = ['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'exng_0', 'exng_1']
    
    return df[selected_columns]
";{0: 0.7944696969696969}
413;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'restecg']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  
  ## Encode categorical columns and return processed DataFrame
  def encode_categorical_columns(df):
      df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'], drop_first=True)
      return df

  return encode_categorical_columns(df)
";{0: 0.7395952111486775}
414;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  df.fillna(df.mean(), inplace=True)
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  return df
";{0: 0.7711966135695698}
415;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].fillna(0)
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
    df['exng'] = df['exng'].astype(int)
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    return df
";{0: 0.7267990873821312}
416;"
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numeric columns
    df[['age', 'thalachh', 'oldpeak']] = (df[['age', 'thalachh', 'oldpeak']] - df[['age', 'thalachh', 'oldpeak']].mean()) / df[['age', 'thalachh', 'oldpeak']].std()
    
    # Encoding categorical columns
    df = pd.get_dummies(df, columns=['cp', 'exng', 'slp'])
    
    return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'exng_0', 'exng_1']]
";{0: 0.7967295839753467}
418;"
  df = df[['age', 'cp', 'chol', 'thalachh', 'caa']].dropna()
  return df
";{0: 0.7918218149408831}
419;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7502147244611549}
420;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak']) 
    df['age'] = pd.cut(df['age'], bins=[0, 50, 70, 100], labels=['young', 'middle_aged', 'old'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'age'], drop_first=True)
    return df
";{0: 0.7461757910601656}
424;"
  df.dropna(inplace=True)
  
  # Normalizing 'age', 'chol', 'thalachh' columns
  numerical_cols = ['age', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # One-hot-encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.7863217006026436}
426;"
  # Filling missing values and transforming categorical columns
  df.fillna(0, inplace=True)
  df['sex'] = pd.Categorical(df['sex']).codes
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Selecting the most important columns
  selected_columns = ['age', 'sex', 'cp_1', 'cp_2', 'cp_3']
  return df[selected_columns]
";{0: 0.710197809476498}
429;"
  # Fill missing values with 0 and return the dataset with selected columns
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].fillna(0)
  return df
";{0: 0.7559077347534566}
430;"
    # Selecting columns
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]
    
    # One-hot encoding categorical column 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8050667813782167}
431;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']].fillna(0)
    return df
";{0: 0.7884403709471843}
433;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8638039379974863}
434;"
  df.fillna(df.mean(), inplace=True)

  # Standardize the numerical columns
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8115720791619431}
437;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
    df = pd.get_dummies(df, columns=['cp'])
    return df
";{0: 0.776111432427222}
440;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True) # Drop additional unnecessary columns
    return df
";{0: 0.869619730551934}
443;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
  
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'sex_1', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8344376718280808}
445;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) # Drop additional unnecessary columns
    return df
";{0: 0.8210898940638043}
449;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) # Drop unnecessary columns
    return df
";{0: 0.8225347398543017}
450;"
  # Fill missing values with column mean for numerical columns
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing 'age', 'chol', 'thalachh' columns
  numerical_cols = ['age', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # One-hot-encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'])

  return df
";{0: 0.7919357356903628}
454;"
  # Fill missing values with mean
  df.fillna(df.mean(), inplace=True)
  
  # Normalize numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8638039379974863}
456;"
  df.fillna(df.mean(), inplace=True)
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8127215044492994}
460;"
# Fill missing values in 'sex' column with the mode
# Apply log transformation to 'thalachh' column
# One-hot-encode 'cp' and 'slp' columns
# Drop unnecessary columns
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8660483019805053}
461;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.sqrt(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'exng'], drop_first=True)
    
    return df
";{0: 0.7553255346803734}
462;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) 
    return df
";{0: 0.8184910240073071}
464;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Standard Scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8557579609859921}
465;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) # Drop additional unnecessary column 'caa'
    return df
";{0: 0.8251576906739737}
466;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8660483019805053}
470;"
  # Filling NA values with column mean
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8557579609859921}
471;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8688132789390307}
472;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].dropna()
    df['cp'] = df['cp'].astype('category')
    df['slp'] = df['slp'].astype('category')
    df = pd.get_dummies(df)
    return df
";{0: 0.7776482264727956}
473;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].dropna()
    df['exng'] = df['exng'].astype(str)
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    return df
";{0: 0.7711966135695698}
474;"
    df = df[['thalachh', 'oldpeak', 'cp', 'slp', 'exng']].dropna()
    
    # Further preprocessing can be added here
    
    return df
";{0: 0.7880481183345316}
476;"
  df = df.fillna(df.mean())
  
  # One-hot encode the 'cp' column
  df = pd.get_dummies(df, columns=['cp'], prefix='cp')
  
  # Scale numerical columns to [0, 1] range
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8304341560079264}
478;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8748509687034277}
480;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.sqrt(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.8007311191539521}
482;"
  df.fillna(df.mean(), inplace=True)
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Selecting only the five most important columns for the model
  selected_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'cp']
  df = df[selected_cols]
  
  return df
";{0: 0.7706529453817681}
484;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['oldpeak'] = np.sqrt(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.7941080833966492}
485;"
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['oldpeak'] = np.sqrt(df['oldpeak']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    return df
";{0: 0.804939184612748}
489;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True)
    return df
";{0: 0.8050621944204774}
490;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalize numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8638039379974863}
492;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # Encode 'sex' column with one-hot-encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    
    # One-hot encode categorical columns 'sex' and 'cp'
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7531891272973449}
497;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.8210898940638043}
499;"
    df['thalachh'] = np.sqrt(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.8199337943718552}
501;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8585407801027495}
505;"
  df.fillna(df.mean(), inplace=True)

  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Combine selected and normalized columns into the final dataframe
  selected_cols = ['age', 'sex', 'cp', 'thalachh', 'caa']
  df = pd.get_dummies(df[selected_cols], columns=['sex', 'cp'], drop_first=True)

  return df
";{0: 0.8383410138248848}
507;"
    df.fillna(df.mean(), inplace=True)
    
    numerical_cols = ['age', 'trtbps', 'chol']

    ## Scale the numerical columns to have zero mean and unit variance
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8004408026949135}
508;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  
  # Applying one-hot encoding to categorical columns
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  
  return df
";{0: 0.7813257477131826}
511;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'slp'])  # One-hot-encode 'cp' and 'slp' columns
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8015641829434932}
513;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  # Implement feature scaling, handling missing values or outliers, and any other necessary preprocessing steps
  
  return df
";{0: 0.7776482264727956}
514;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8084607346676311}
515;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'slp'])  # One-hot encode 'cp' and 'slp' columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8660483019805053}
519;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
  
  selected_feat = ['age', 'chol', 'thalachh', 'oldpeak', 'sex_1', 'cp_1', 'cp_2', 'cp_3']
  
  return df[selected_feat]
";{0: 0.8359839103056306}
525;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'cp']]
";{0: 0.7748516140965659}
526;"
    df['thalachh'] = np.sqrt(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    df.fillna(df.mean(), inplace=True)
    return df
";{0: 0.7556503817000909}
528;"
  df.fillna(df.mean(), inplace=True)

  # Normalizing 'age', 'chol', 'thalachh' columns
  numerical_cols = ['age', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # One-hot-encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'])

  return df
";{0: 0.7946476000971425}
530;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'restecg'], inplace=True)
    
    return df
";{0: 0.7762489259843453}
531;"
  # Filling missing values with median of each column
  df.fillna(df.median(), inplace=True)

  # Normalizing 'age', 'trtbps', 'chol' columns
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8060548377826325}
533;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()

  # Feature engineering
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df['cp'] = df['cp'].map({0: 'typical angina', 1: 'atypical angina', 2: 'non-anginal pain', 3: 'asymptomatic'})

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)

  return df
";{0: -1}
535;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])  # One-hot-encode 'cp', 'slp', and 'restecg' columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8748509687034277}
539;"
  # Fill missing values with mean
  df.fillna(df.mean(), inplace=True)
  
  # Normalization using Min-Max Scaling for numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8454349951124144}
541;"
  df = df.fillna(df.mean())
  
  # One-hot encode the 'cp' column
  df = pd.get_dummies(df, columns=['cp'], prefix='cp')
  
  # Scale numerical columns to have zero mean and unit variance
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.7975122438678584}
543;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'caa', 'age'], inplace=True)
    return df
";{0: 0.8147358365938034}
544;"
  df.dropna(inplace=True)
  
  df = df[['thalachh', 'oldpeak', 'cp', 'slp', 'exng']]
  
  return df
";{0: 0.7880481183345316}
550;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp', 'exng'], drop_first=True)

    return df
";{0: 0.7385807136929612}
552;"
  df.fillna(df.mean(), inplace=True)
  
  selected_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'cp']
  df = df[selected_cols]
  
  return df
";{0: 0.7505515058518807}
554;"
    # Fill missing values with the mean of each column
    df.fillna(df.mean(), inplace=True)
    
    # Normalize numerical columns by subtracting the mean and dividing by standard deviation
    numerical_cols = ['age', 'trtbps', 'chol']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.8155463632063615}
555;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    return df
";{0: 0.7938345674298143}
557;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['exng', 'chol'], inplace=True)
    
    return df
";{0: 0.7261678393526613}
558;"
    df = df[['thalachh', 'oldpeak', 'cp', 'slp', 'exng']].dropna()
    
    # Additional preprocessing steps can be included here
    
    return df
";{0: 0.7840290807882597}
560;"
  df.fillna(df.mean(), inplace=True)

  # Normalizing numerical columns using Z-score standardization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8638039379974863}
562;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'slp'])  # One-hot encode 'cp' and 'slp'
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8633697305519339}
565;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'fbs', 'thall'], inplace=True)
    return df
";{0: 0.8339892565893848}
566;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8679228967753557}
567;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df['sex'] = pd.Categorical(df['sex'], categories=['male', 'female'], ordered=False)
    df = pd.get_dummies(df, columns=['sex', 'cp', 'exng'], drop_first=True)

    return df
";{0: 0.7430263930483377}
573;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Returning the preprocessed DataFrame
  return df
";{0: 0.8585407801027495}
576;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['thalachh', 'oldpeak', 'cp', 'slp', 'exng']].dropna()
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    # Additional preprocessing steps can be added here
    
    return df
";{0: 0.7711966135695698}
586;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True)
    return df
";{0: 0.7934984578461417}
590;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['age', 'thalachh', 'oldpeak', 'trtbps', 'chol']]
";{0: 0.7484614071653376}
591;"
    df.fillna(df.mean(), inplace=True) 
    df['oldpeak'] = np.sqrt(df['oldpeak']) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.798463800275052}
594;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'age', 'fbs'], inplace=True)
    return df
";{0: 0.8498129466162252}
595;"
  df.fillna(df.mean(), inplace=True)
  
  # Standardization using Z-score Scaling for numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8585407801027495}
597;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Returning the preprocessed DataFrame with selected important columns
  selected_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'cp']
  return df[selected_cols]
";{0: 0.7685024077473596}
604;"
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['oldpeak'] = np.sqrt(df['oldpeak']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True)
    return df
";{0: 0.7813597741247124}
607;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Min-Max Scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].min()) / (df[numerical_cols].max()-df[numerical_cols].min())
  
  return df
";{0: 0.8509522364917249}
608;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['fbs'].fillna(df['fbs'].mode()[0], inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8084607346676311}
610;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
  
  return df
";{0: 0.7739763984073263}
615;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Fill missing values in sex column with mode
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation to thalachh column
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs']) # One-hot encode categorical columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) # Drop irrelevant columns
    return df
";{0: 0.8294312915784398}
620;"
    df = df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']].apply(lambda x: (x - x.mean()) / x.std())
    
    return df
";{0: 0.7974014336917563}
622;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  
  # Apply one-hot-encoding to 'sex' and 'cp' columns, and drop the first column after encoding
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  
  return df
";{0: 0.7813257477131826}
627;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol', 'fbs', 'restecg', 'thalachh', 'oldpeak', 'slp', 'caa', 'thall', 'exng']].dropna()
    df['age'] = pd.cut(df['age'], bins=[0, 50, 70, 100], labels=['young', 'middle_aged', 'old'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'age'])
    return df
";{0: 0.7774115931960759}
631;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8760117302052786}
632;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score normalization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.86265451271013}
633;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'restecg', 'fbs', 'caa'], inplace=True)
    return df
";{0: 0.7698213954797773}
634;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  
  return df
";{0: 0.7867560755820351}
635;"
## Improved version of select_columns_and_return_dataframe_v2 function
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8688132789390307}
637;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    df.dropna(inplace=True)  # Dropping any remaining NA values
    return df
";{0: 0.8041050177892283}
638;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  # One-hot encoding categorical columns and selecting important columns
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

  return df[['age', 'chol', 'thalachh', 'oldpeak', 'sex_1', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8317758448468344}
647;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
  
  # Selecting the most important columns
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7714390751838158}
648;"
    df.fillna(df.mean(), inplace=True)
    
    # Feature scaling using Min-Max scaling
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
    
    return df
";{0: 0.859815668202765}
650;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  # Implement one-hot encoding for categorical columns
  
  # Implement feature scaling, handling missing values, and outlier detection/removal
  
  return df
";{0: 0.7880481183345316}
651;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa', 'thall', 'restecg'], drop_first=True)
    return df
";{0: 0.7033485325629139}
652;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
    # Encoding categorical columns (if any) using one-hot encoding
    df = pd.get_dummies(df, columns=['cp', 'slp', 'exng'], drop_first=True)
    
    # Handling missing values or outliers (if any) - not implemented yet
    
    return df
";{0: 0.7834470810004299}
657;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)  # One-hot encode 'cp' and 'slp' with drop_first
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8596965903511629}
658;"
  df.fillna(df.mean(), inplace=True)
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  return df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]
";{0: 0.7381569575166258}
663;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'fbs', 'caa', 'thall'], inplace=True) 
    return df
";{0: 0.8100062242712237}
665;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].dropna()
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    return df
";{0: 0.8145635993163083}
666;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std() # Standardize 'age' column
    return df
";{0: 0.8398043184885291}
667;"
  # Fill missing values with mean for numerical columns
  df.fillna(df.mean(), inplace=True)
  
  # Normalize numerical columns using Z-score normalization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8638039379974863}
669;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Fill missing values in sex column with mode
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation to thalachh column
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs']) # One-hot encode categorical columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg'], inplace=True) # Drop irrelevant columns
    return df
";{0: 0.8379310344827585}
671;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'slp', 'exng'], drop_first=True)
    
    return df
";{0: 0.8103555338575124}
673;"
  # Fill NaN values in numerical columns with mean
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Normalizing numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].min()) / (df[numerical_cols].max()-df[numerical_cols].min())

  return df
";{0: 0.8481468595191941}
677;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].dropna()
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    return df
";{0: 0.767177576023298}
678;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8775660160734787}
679;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalize numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Selecting the five most important columns
  selected_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'cp']
  return df[selected_cols]
";{0: 0.7771045582849939}
680;"
    df.fillna(df.mean(), inplace=True)
    
    # Normalize numerical columns to [0, 1] range
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
    
    return df
";{0: 0.8521016617790812}
681;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) # Drop additional unnecessary columns
    return df
";{0: 0.8225347398543017}
682;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df['caa'] = pd.cut(df['caa'], bins=[0, 1, 2, 4], labels=['low', 'medium', 'high'])
    
    df = pd.get_dummies(df, columns=['cp', 'caa', 'restecg'], drop_first=True)
    
    return df
";{0: 0.7498522278004034}
683;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa']
  df = df[numerical_cols]
  
  return df
";{0: 0.7459049070226305}
684;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
  df.dropna(inplace=True)
  
  df['cp'] = pd.cut(df['cp'], bins=[0, 1, 2, 3, 4], labels=['cp_0', 'cp_1', 'cp_2', 'cp_3'])
  
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.7723924522217808}
686;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'age', 'fbs'], inplace=True)
    return df
";{0: 0.8528688524590164}
687;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['oldpeak'] = np.sqrt(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)  
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)  
    return df
";{0: 0.7725999657872961}
688;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Normalizing numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.8440556847675869}
689;"
  return df[['age', 'sex', 'cp', 'oldpeak', 'thalachh']].dropna()
";{0: 0.7544505818235381}
691;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  # One-hot encoding categorical columns
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

  # Returning dataframe with selected features
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'sex_1', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8317758448468344}
698;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    df['exng'] = df['exng'].map({0: 'No', 1: 'Yes'})
    
    one_hot_encoded = pd.get_dummies(df, columns=['sex', 'cp', 'exng'], drop_first=True)

    return one_hot_encoded
";{0: -1}
702;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7483442379140797}
704;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})

  categorical_cols = ['sex', 'cp']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

  numerical_cols = ['age', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.8391074133495863}
705;"
  def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
      df['thalachh'] = np.log1p(df['thalachh'])
      df['oldpeak'] = np.sqrt(df['oldpeak'])
      df['caa'] = pd.cut(df['caa'], bins=[0, 1, 2, 4], labels=['low', 'medium', 'high'])
    
      df = pd.get_dummies(df, columns=['cp', 'caa', 'restecg'], drop_first=True)
      
      return df
";{0: 0.747471275419451}
708;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'fbs'], inplace=True) 
    return df
";{0: 0.8170656244340453}
709;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].fillna(df.mean())
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    return df
";{0: 0.8183711085706712}
710;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalizing numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8666287967545486}
711;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])  # Fill missing values in sex column with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to thalachh column
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])  # Fill missing values in restecg column with mode
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8294312915784398}
715;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'restecg', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8740445170905244}
720;"
    df = df[['age', 'thalachh', 'oldpeak', 'cp', 'exng']]
    df['thalachh'] = np.log1p(df['thalachh'])
    # Perform necessary data preprocessing steps
    df = pd.get_dummies(df, columns=['cp', 'exng'], drop_first=True)
    
    return df
";{0: 0.7449721629945509}
727;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Encoding categorical columns with one-hot encoding
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
  
  # Returning the preprocessed DataFrame with all encoded columns
  return df
";{0: 0.785197906297449}
730;"
    # Fill missing values with the mode of 'sex' column
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh']) 
    # Perform one-hot-encoding on 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs']) 
    # Drop less important columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True)
    return df
";{0: 0.8026583482666313}
733;"
    # Fill missing values with the mean of each column
    df.fillna(df.mean(), inplace=True)

    # Normalize numerical features using Z-score standardization
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8638039379974863}
734;"
    df.drop(columns=['trtbps', 'chol'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    return df
";{0: 0.7935943607829445}
737;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']].dropna()
    df['exng'] = df['exng'].astype(str)
    df = pd.get_dummies(df, columns=['cp', 'slp', 'exng'])
    return df
";{0: 0.7829997566630356}
738;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
  
    # Drop rows with missing values
    df.dropna(inplace=True)
  
    # Perform one-hot encoding on categorical columns
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
    return df
";{0: 0.7766674199834809}
740;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)

    return df
";{0: 0.7390719293930612}
744;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'slp']].dropna()

  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: -1}
745;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8586213215339586}
746;"
  df.fillna(df.mean(), inplace=True)

  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  cols_to_keep = ['age', 'sex', 'cp', 'thalachh', 'caa']
  df = df[cols_to_keep]

  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])

  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

  return df
";{0: 0.8504070660522274}
748;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
  
  # returning the dataset with all preprocessed columns
  return df
";{0: 0.7760453639245677}
749;"
  df.fillna(df.mean(), inplace=True)

  # Standardize numerical columns 'trtbps' and 'thalachh' using Min-Max Scaler
  numerical_cols = ['trtbps', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  # One-hot encode 'cp' and 'exng' columns
  df = pd.get_dummies(df, columns=['cp', 'exng'], prefix=['cp', 'exng'])

  return df
";{0: 0.7688248908068033}
750;"
    # Retaining only the specified columns
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
    
    # Applying one-hot encoding to categorical columns
    df = pd.get_dummies(df, columns=['cp', 'slp', 'exng'], drop_first=True)
    
    # Handling missing values or outliers if needed
    
    return df
";{0: 0.7875148776105995}
753;"
  # Fill missing values with mean of the column
  df.fillna(df.mean(), inplace=True)

  # Normalize numerical columns using Z-score normalization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8666287967545486}
756;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg'], inplace=True)
    return df
";{0: 0.8379310344827585}
757;"
  df = df.fillna(df.mean())
  
  # Selecting the five most important columns based on domain knowledge
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'sex']]
  
  # Normalizing numerical columns between 0 and 1
  df[['age', 'chol', 'thalachh', 'oldpeak']] = (df[['age', 'chol', 'thalachh', 'oldpeak']] - df[['age', 'chol', 'thalachh', 'oldpeak']].min()) / (df[['age', 'chol', 'thalachh', 'oldpeak']].max() - df[['age', 'chol', 'thalachh', 'oldpeak']].min())
  
  return df
";{0: 0.7496920157641219}
758;"
  # Selecting important columns and dropping NA values
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
  
  # Performing one-hot-encoding on 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7394454614958371}
761;"
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']].dropna()
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.768924664277339}
765;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg'], inplace=True)
    return df
";{0: 0.8534184924677284}
770;"
  # Drop rows with missing values
  df = df.dropna()

  # Encode 'sex' column with label encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})

  # One-hot encode categorical columns
  one_hot_encoded = pd.get_dummies(df, columns=['sex', 'cp'])

  return one_hot_encoded
";{0: 0.8020725495274738}
771;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) # Fill missing values in 'sex' with the mode
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'slp']) # One-hot encode 'cp' and 'slp'
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) # Drop unnecessary columns
    return df
";{0: 0.8084607346676311}
773;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.7900211773242324}
777;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    return df
";{0: 0.8419140936947608}
779;"
  df = df[['age', 'cp', 'thalachh', 'caa', 'exng']].dropna()
  
  # Normalize numerical columns to have zero mean and unit variance
  df[['age', 'thalachh', 'caa']] = (df[['age', 'thalachh', 'caa']] - df[['age', 'thalachh', 'caa']].mean()) / df[['age', 'thalachh', 'caa']].std()
  
  return df
";{0: 0.8164526964897139}
782;"
    df.dropna(inplace=True)
    
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'fbs'], inplace=True)
    
    return df
";{0: 0.8115943190519459}
784;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8586213215339586}
786;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].dropna()
  
  return df
";{0: 0.787291522420345}
788;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[numerical_cols]
";{0: 0.7459051415359962}
789;"
  df.fillna(df.mean(), inplace=True)
  
  selected_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'cp']
  return df[selected_cols]
";{0: 0.7439941288027002}
792;"
    df = df[['thalachh', 'oldpeak', 'exng', 'cp', 'slp']]
    
    # Additional preprocessing steps can be added here
    
    return df
";{0: 0.7880481183345316}
794;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8337152465021317}
796;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    
    # One-hot encode categorical columns and drop specific columns
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    
    return df
";{0: 0.7856654604458295}
798;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df = df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
    return df
";{0: 0.7854394057672746}
801;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
  df['sex'] = df['sex'].astype(str)  # Convert to string for one-hot-encoding
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  
  return df
";{0: 0.7459432785184561}
802;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['fbs'].fillna(df['fbs'].mode()[0], inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.dropna(inplace=True) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8084607346676311}
806;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Returning the preprocessed DataFrame with all columns
  return df
";{0: 0.86265451271013}
807;"
    df.fillna(df.mean(), inplace=True)
    
    # Applying a log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding of categorical columns with drop_first
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    # Dropping less important columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'age'], inplace=True)
    
    return df
";{0: 0.8354356766096587}
809;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # One-hot-encode the 'sex', 'cp', and 'exng' columns
    df = pd.get_dummies(df, columns=['sex', 'cp', 'exng'])
    
    return df
";{0: 0.7487297438254995}
810;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'exng']]
    
    # Further data preprocessing steps can be added here
    
    return df
";{0: 0.7855903610380646}
813;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)  # One-hot-encode 'cp' and 'slp' columns with drop_first
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8608087461761977}
816;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)  # One-hot-encode 'cp' and 'slp' columns with drop_first
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.7583537100750662}
817;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])  
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'], drop_first=True)  
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)  
    return df
";{0: 0.8451234011889749}
818;"
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'cp']]  # Selecting specific columns
  return df
";{0: 0.746179921152427}
820;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['oldpeak'] = np.sqrt(df['oldpeak']) 
    df = df[['age', 'thalachh', 'oldpeak', 'cp']]
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7423823708743936}
822;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['fbs'].fillna(df['fbs'].mode()[0], inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True) 
    df.dropna(inplace=True) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.7736498406872003}
828;"
    df.fillna(df.mean(), inplace=True)
    
    # Applying a log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding of categorical columns with drop_first
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    # Removing less important columns based on analysis
    df.drop(columns=['exng', 'chol', 'trtbps', 'age'], inplace=True)
    
    return df
";{0: 0.8294214611913973}
829;"
  df.fillna(df.mean(), inplace=True)
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # One-hot encode categorical columns
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
  
  return df
";{0: 0.780307659006535}
832;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'sex', 'cp']]
";{0: 0.8063566395332387}
836;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg', 'slp'], inplace=True)
    return df
";{0: 0.839326634937423}
840;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7960993876234845}
841;"
  df = df[['chol', 'thalachh', 'oldpeak', 'sex', 'cp']].dropna()
  
  return df
";{0: 0.7834389761869259}
845;"
  df.fillna(df.mean(), inplace=True)

  # Standardize numerical columns 'trtbps', 'chol', and 'thalachh' using Z-score normalization
  numerical_cols = ['trtbps', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8124956628509986}
846;"
    # Impute missing values with the mean of each column
    df.fillna(df.mean(), inplace=True)

    # Normalize numerical features using Z-score standardization
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.86265451271013}
847;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg'], inplace=True)  
    return df
";{0: 0.8571904739012091}
849;"
  # Fill missing values in numerical columns with the mean
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.86265451271013}
850;"
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'sex']].dropna()
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.7428496629754454}
851;"
  # Selecting the five most important columns from the dataset
  selected_cols = ['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalizing numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[selected_cols]
";{0: 0.7464518883922018}
852;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['fbs'].fillna(df['fbs'].mode()[0], inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8084607346676311}
854;"
  # Filling missing values with the most frequent value in each column
  df.fillna(df.mode().iloc[0], inplace=True)

  # Normalizing numerical columns using Min-Max scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.8549265205361433}
855;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall', 'slp'], inplace=True)
    return df
";{0: 0.8131318681318682}
856;"
  # Select the five most important columns: 'age', 'cp', 'thalachh', 'slp', 'caa'
  selected_cols = ['age', 'cp', 'thalachh', 'slp', 'caa']

  # Drop rows with missing values in selected columns
  df = df[selected_cols].dropna()

  # Encode categorical column 'cp' using one-hot encoding
  df = pd.get_dummies(df, columns=['cp'])

  return df
";{0: 0.7822241419821245}
860;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7960993876234845}
861;"
  selected_cols = ['age', 'cp', 'thalachh', 'slp', 'caa']
  
  df = df[selected_cols].dropna()
  
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.7841791761952233}
864;"
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
  df = df[numerical_cols].dropna()
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.7363980500722196}
865;"
    df.fillna(df.median(), inplace=True)

    # Normalizing 'age', 'trtbps', 'chol' columns
    numerical_cols = ['age', 'trtbps', 'chol']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8087667021894124}
867;"
# Fill missing values with mean and normalize numerical columns using Standard Scaling
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.8610716975603279}
870;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8558890810968002}
871;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalizing numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Returning the preprocessed DataFrame
  return df
";{0: 0.8498645440580924}
872;"
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df_categorical = pd.get_dummies(df[categorical_cols], columns=categorical_cols, drop_first=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df_numerical = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  df_processed = pd.concat([df_categorical, df_numerical], axis=1)
  
  return df_processed[['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']]
";{0: 0.7329472754357431}
873;"
    # Fill missing values with mean for numerical columns
    df.fillna(df.mean(), inplace=True)
    
    # Normalize numerical features using Z-score standardization
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8557579609859921}
875;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Normalizing numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df[numerical_cols]
";{0: 0.7445061638658321}
876;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing 'age', 'chol', 'thalachh' columns
  numerical_cols = ['age', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  # Handling categorical columns using one-hot encoding
  df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'], drop_first=True)

  return df
";{0: 0.7929320276497696}
877;"
  # Fill missing values in numerical columns with the mean
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standardize numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8557579609859921}
878;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8398209600246952}
880;"
  # Fill missing values in numerical columns with mean
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Scale numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8557579609859921}
881;"
  return df[['cp', 'trtbps', 'chol', 'thalachh', 'oldpeak']].fillna(df.mean())
";{0: 0.7530505782245921}
884;"
  # Fill missing values in numerical columns with their mean
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8481468595191941}
886;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
    
    # Perform one-hot-encoding on the 'cp' column and drop the first column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7415607444149275}
887;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    
    # Fill NaN values with mean for numerical columns
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    
    # Standard scaling on numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.8638039379974863}
888;"
    # Filling missing values with the mean for numerical columns and one-hot-encoding for categorical columns
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numerical columns using Standard Scaling
    df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] = (df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] - df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].mean()) / df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].std()
    
    return df[['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng', 'age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]
";{0: 0.8598491357375995}
889;"
    numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
    df[numerical_cols] = df[numerical_cols].apply(lambda x: (x - x.mean()) / x.std()).dropna()
    
    return df
";{0: 0.816515705281}
890;"
  # Fill missing values in numerical columns with the mean
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standardize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8638039379974863}
891;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.8451234011889749}
892;"
# Fill missing values in numerical columns with mean and standardize the data
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.8666287967545486}
895;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
    
    # One-hot encode 'sex' and 'cp' columns
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7820409196067091}
898;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8666287967545486}
899;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.8320542423981119}
900;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standard Scaling to normalize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8598491357375995}
902;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.86265451271013}
904;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall', 'fbs'], inplace=True) # Further optimize feature selection
    return df
";{0: 0.8089272124397796}
905;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
  
  # Perform one-hot-encoding on 'cp' column and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7483442379140797}
907;"
  # Fill missing values in numerical columns with mean
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8521016617790812}
908;"
  # Fill NA values with the mean of the respective numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Normalize numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8638039379974863}
909;"
  return df[['age', 'thalachh', 'cp', 'caa', 'exng']].dropna()
";{0: 0.7606693329863596}
910;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  df = pd.get_dummies(df, columns=['cp'])

  return df
";{0: 0.7863217006026436}
912;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    
    # Standardize numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    # Apply one-hot encoding to categorical columns if present
    
    return df
";{0: 0.8638039379974863}
914;"
  # Fill missing values with median
  df.fillna(df.median(), inplace=True)

  # Normalize numerical columns
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8087667021894124}
917;"
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.8546658873952854}
918;"
  # Fill missing values in numerical columns with mean value and normalize them using Min-Max Scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  # One-hot encode categorical column 'cp'
  df = pd.get_dummies(df, columns=['cp'])
  
  return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_2']]
";{0: 0.8111876676896811}
920;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True) 
    return df
";{0: 0.7517649971703453}
922;"
# Fill missing values in numerical columns with mean and standardize them
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.8666287967545486}
924;"
    numerical_cols = ['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']
    
    # Fill NaN values with mean for numerical columns
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    
    # Standard scaling on numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df[numerical_cols]
";{0: 0.7464518883922018}
925;"
  df.fillna(df.mode().iloc[0], inplace=True)

  # Normalizing numerical columns using Z-score normalization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8557579609859921}
926;"
  return df[['age', 'chol', 'thalachh', 'cp', 'caa', 'exng']].dropna()
";{0: 0.7708118932567151}
928;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
";{0: 0.7926484364059803}
929;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'thall'], inplace=True)
    return df
";{0: 0.7482471996175087}
933;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7778397781160354}
934;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'thall', 'slp'], inplace=True)
    return df
";{0: 0.8225647170510326}
935;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'], drop_first=True)

  return df
";{0: 0.7882008448540706}
936;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  df = df[['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']]
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.7381569575166258}
937;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # Encoding categorical variables using one-hot-encoding
    df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
    
    return df
";{0: 0.7384676554679753}
938;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall', 'exng'], inplace=True)
    return df
";{0: 0.7583537100750662}
940;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'slp'])  # One-hot encode 'cp' and 'slp' columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8669274228596262}
942;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'oldpeak']].dropna()
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)

    return df
";{0: 0.7871768131840373}
943;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Encoding categorical columns using one-hot encoding
  df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'], drop_first=True)  

  # Normalizing numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].min()) / (df[numerical_cols].max()-df[numerical_cols].min())

  return df
";{0: 0.8331449409483518}
944;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True)
    return df
";{0: 0.7525864945222951}
947;"
  numerical_cols = ['age', 'thalachh', 'oldpeak', 'chol', 'trtbps']
  
  # Fill missing values in numerical columns with the mean
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df[numerical_cols]
";{0: 0.7403281896781785}
949;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df[numerical_cols]
";{0: 0.7464518883922018}
954;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
    
    # Perform one-hot encoding on the 'cp' column while handling multicollinearity
    cp_encoded = pd.get_dummies(df['cp'], prefix='cp', drop_first=True)
    df = pd.concat([df, cp_encoded], axis=1)
    df.drop('cp', axis=1, inplace=True)
    
    return df
";{0: 0.7437465367646543}
960;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df[['age', 'chol', 'thalachh', 'cp', 'caa', 'exng']].dropna()
";{0: 0.8136554027088136}
962;"
  # Selecting relevant columns and dropping missing values
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'sex']].dropna()
  
  # Converting 'sex' column to categorical
  df['sex'] = df['sex'].astype('category')
  
  # One-hot encoding the 'sex' column
  df = pd.get_dummies(df, columns=['sex'])
  
  # Normalizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.7386190971372646}
967;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])  # Fill missing values in 'restecg' column with the mode
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs', 'restecg'], drop_first=True)  # One-hot encode categorical columns with drop_first
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8436862477231329}
974;"
  # Fill missing values with the mean for numerical columns and drop rows with missing values
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Convert 'sex' column to categorical and apply one-hot encoding
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])

  # Standardize the features
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.8615624391194233}
975;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7596407402005708}
980;"
  # Fill missing values with mean for numerical columns
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Convert 'sex' column to categorical and apply one-hot encoding
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])

  # Standardize the features
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.8627118644067796}
982;"
    df.fillna(df.mean(), inplace=True)  # Replace NaN values with the mean

    # Standardizing numerical columns using z-score normalization
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8598491357375995}
984;"
    df.fillna(df.mean(), inplace=True)

    # Normalize numerical features using Min-Max scaling
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

    return df
";{0: 0.8493694213419227}
985;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # One-hot encode the 'sex' and 'cp' columns
    df = pd.get_dummies(df, columns=['sex', 'cp'], prefix=['sex', 'cp'])
    
    # Normalize numerical columns
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8129032258064516}
986;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Z-score Standardization
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8571372713308196}
987;"
    numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    df.dropna(inplace=True)
    
    return df
";{0: 0.816515705281}
988;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex'], drop_first=True)
  
  return df
";{0: 0.7513360100771532}
990;"
    # Fill missing values with the mean of each numerical column and standardize them
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    # Select important columns and drop rows with missing values
    selected_cols = ['age', 'chol', 'thalachh', 'cp', 'caa', 'exng']
    return df[selected_cols].dropna()
";{0: 0.819085730577666}
992;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs'], inplace=True)
    return df
";{0: 0.839219741945904}
995;"
    numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
    
    # Normalizing numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.8176651305683563}
996;"
    df.fillna(df.mean(), inplace=True)
    
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df[['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng'] + numerical_cols]
";{0: 0.8598491357375995}
998;"
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Normalizing numerical columns using Z-score standardization
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8598491357375995}
999;"
    # Selecting columns 'cp', 'thalachh', 'oldpeak', 'caa', 'exng'
    return df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
";{0: 0.7884403709471843}
1001;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Fill missing values in sex column with mode
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation to thalachh column
    df = pd.get_dummies(df, columns=['cp', 'slp']) # One-hot encode categorical columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg', 'fbs', 'thall'], inplace=True) # Drop irrelevant columns
    return df
";{0: 0.7960993876234845}
1003;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
    
    # Replace values in the 'cp' column with corresponding categories
    df['cp'] = df['cp'].replace({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    
    # Perform one-hot-encoding on the categorical column 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: -1}
1005;"
  # Fill missing values with mean for numerical columns
  df.fillna(df.mean(), inplace=True)

  # Normalizing selected numerical columns using Min-Max Scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.8521016617790812}
1006;"
    return df.dropna(subset=['sex', 'thalachh']).assign(sex=df['sex'].fillna(df['sex'].mode()[0])).pipe(lambda df: pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)).drop(columns=['chol','trtbps','oldpeak','age','caa','fbs'])
";{0: 0.8024673012437195}
1012;"
  df.fillna(df.mean(), inplace=True)
  
  # Standard scaling for numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8666287967545486}
1013;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7538728357581264}
1015;"
  numerical_cols = ['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[numerical_cols]
";{0: 0.7484614071653376}
1016;"
    return df.dropna(subset=['sex', 'thalachh']).assign(sex=df['sex'].fillna(df['sex'].mode()[0])).pipe(lambda df: pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True)).drop(columns=['chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs'])
";{0: 0.8078347068266425}
1017;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall', 'fbs', 'restecg'], inplace=True)
    return df
";{0: 0.7960993876234845}
1018;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df[['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']]
";{0: 0.7403281896781785}
1019;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.8251576906739737}
1020;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalizing numerical columns using Z-score normalization (Standard Scaling)
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8557579609859921}
1024;"
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'trtbps']
  
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Scaling numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df[['age', 'chol', 'thalachh', 'cp', 'caa']].dropna()
";{0: 0.8447032436162869}
1027;"
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']  # Select numerical columns
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())  # Fill NA values with mean

  df['sex'] = df['sex'].astype('category')  # Convert 'sex' column to categorical
  df = pd.get_dummies(df, columns=['sex'])  # Perform one-hot-encoding on 'sex' column
  df = (df - df.mean()) / df.std()  # Normalize data using mean and standard deviation

  return df
";{0: 0.8546658873952854}
1028;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh']) 
    # Perform one-hot-encoding on 'cp' and 'slp' columns, as well as 'restecg' and 'fbs'
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs']) 
    # Drop less important columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True)
    return df
";{0: 0.8011931468014298}
1031;"
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Convert 'sex' column to categorical and apply one-hot encoding
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])

  # Standardize the features
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.8574487065120427}
1033;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean()).apply(lambda x: (x - x.min()) / (x.max() - x.min()))

  return df[numerical_cols]
";{0: 0.7403281896781785}
1035;"
  df = df.dropna()
  
  # Encode 'sex' column with label encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  
  # One-hot encode 'cp' column
  one_hot_encoded = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return one_hot_encoded
";{0: 0.8020725495274738}
1037;"
    numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    df.dropna(subset=numerical_cols, inplace=True)
    
    return df[numerical_cols]
";{0: 0.7512325174825175}
1039;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall', 'fbs'], inplace=True)
    return df
";{0: 0.7544971996175087}
1041;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalizing numerical columns using Z-score normalization
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8598491357375995}
1043;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  categorical_cols = ['cp', 'caa', 'exng']

  # Fill missing values in numerical columns with mean
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Standardize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=categorical_cols)

  # Select the FIVE most important columns
  selected_columns = ['age', 'chol', 'thalachh', 'cp_0', 'caa_1']
  return df[selected_columns]
";{0: 0.8015167059870449}
1049;"
    df.fillna(df.mode().iloc[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.8175601779549236}
1050;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standardize numerical columns using Z-score Standardization
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8515232362431003}
1051;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'restecg']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  
  def encode_categorical_columns(df):
      df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'], drop_first=True)
      return df

  return encode_categorical_columns(df)
";{0: 0.7251110841645506}
1052;"
  # Fill missing values in numerical columns with mean
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Convert 'sex' column to categorical and apply one-hot encoding
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])

  # Standardize the features by subtracting mean and dividing by standard deviation
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.8587570621468925}
1053;"
    # Selecting columns and dropping NA values
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
    
    # One-hot-encoding the 'cp' column and dropping the first dummy variable
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7483442379140797}
1054;"
  # Adding one-hot encoding for categorical variable 'cp'
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)

  return df[['thalachh', 'oldpeak', 'caa', 'exng', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7772485397163726}
1059;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standardize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8666287967545486}
1061;"
    # Keep specific columns and drop null values
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
    
    # One-hot-encode the 'cp' column with dropping the first category
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.746006423770304}
1064;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']].dropna()
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  
  return df
";{0: 0.7567661943319839}
1066;"
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Convert 'sex' column to categorical and apply one-hot encoding
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])

  # Standardize the features by subtracting mean and dividing by standard deviation
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.8627118644067796}
1069;"
  # Keep selected columns and drop rows with missing values
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']].dropna()
  
  # Apply one-hot encoding to categorical columns and return the updated dataframe
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7742265117923013}
1070;"
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'], drop_first=True)

  return df
";{0: 0.8283570148489503}
1071;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
  
  # Normalizing 'age' and 'thalachh' columns
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
  
  # One-hot-encoding 'cp' column and 'sex' column
  df = pd.get_dummies(df, columns=['cp', 'sex'])
  
  return df
";{0: 0.8041986687147977}
1072;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standard Scaling to normalize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng', 'age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]
";{0: 0.8638039379974863}
1073;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    
    # Fill NaN values with mean for numerical columns
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    
    # Standard scaling on numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    # Returning the preprocessed DataFrame
    return df
";{0: 0.86265451271013}
1078;"
  # Fill missing values in numerical columns with mean
  df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] = df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].fillna(df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].mean())
  
  # Z-score Standardization for numerical columns
  df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] = (df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] - df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].mean()) / df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].std()
  
  return df
";{0: 0.8598491357375995}
1085;"
  numerical_cols = ['age', 'thalachh', 'oldpeak', 'chol', 'trtbps']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Standardize the numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df[numerical_cols]
";{0: 0.7484614071653376}
1086;"
  selected_cols = ['age', 'sex', 'cp', 'thalachh', 'oldpeak']
  
  # Fill missing values with mean for numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standardize numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[selected_cols]
";{0: 0.8266029143897995}
1087;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  
  # Encoding 'sex' using label encoding and one-hot encoding for 'cp'
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7640575664399338}
1088;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'fbs', 'thall', 'caa'], inplace=True)
    return df
";{0: 0.7503305329508422}
1089;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True)
    return df
";{0: 0.7997484578461417}
1090;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # OHE 'sex' and 'cp' columns. Map 'sex' to binary values.
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['sex'] = df['sex'].map({0: 0, 1: 1})
    
    return df
";{0: 0.7407665060426881}
1093;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'thall', 'caa'], inplace=True)
    return df
";{0: 0.8050621944204774}
1094;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7960993876234845}
1095;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age'], inplace=True) # Drop unnecessary columns
    return df
";{0: 0.7822849462365591}
1097;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standard Scaling to normalize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['cp', 'restecg', 'slp', 'caa', 'thall']]
";{0: 0.8727075702075702}
1100;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df = df[numerical_cols].fillna(df[numerical_cols].mean())
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.7363712432309114}
1101;"
  # Filling missing values with mean for numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Encoding categorical columns using one-hot encoding with drop_first=True
  df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'], drop_first=True)  

  # Normalizing numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols]-df[numerical_cols].min()) / (df[numerical_cols].max()-df[numerical_cols].min())

  return df
";{0: 0.8200301868499912}
1102;"
  # Fill NA values with mean for selected numerical columns
  numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Convert 'sex' column to categorical and apply one-hot encoding
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, columns=['sex'])

  # Standardize the features by subtracting mean and dividing by standard deviation
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.8627118644067796}
1103;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalizing 'age', 'chol', 'thalachh' columns
  numerical_cols = ['age', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # One-hot-encoding 'cp' and 'restecg' columns
  df = pd.get_dummies(df, columns=['cp', 'restecg'])

  return df
";{0: 0.8045682350177774}
1104;"
    # Fill missing values in 'sex' column with the mode
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    return df
";{0: 0.8768822553897181}
1105;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Fill missing sex values with mode
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation of thalachh column
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs']) # One-hot encoding of categorical columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) # Remove irrelevant columns
    return df
";{0: 0.8279864457879423}
1106;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Selecting the columns of interest and dropping rows with missing values
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    return df
";{0: 0.7574950363407583}
1108;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
  
  # Normalizing 'thalachh' and 'oldpeak' columns
  df[['thalachh', 'oldpeak']] = (df[['thalachh', 'oldpeak']] - df[['thalachh', 'oldpeak']].mean()) / df[['thalachh', 'oldpeak']].std()
  
  return df
";{0: 0.7934251501186986}
1111;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    selected_cols = ['cp', 'caa', 'exng', 'thalachh', 'chol']
    return df[selected_cols].dropna()
";{0: 0.8212269149412194}
1113;"
    numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']

    # Fill NaN values with mean for numerical columns
    df[numerical_cols] = df[numerical_cols].apply(lambda x: x.fillna(x.mean()) if x.dtype in [np.int64, np.float64] else x, axis=0)

    # Standard scaling on numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8176651305683563}
1115;"
  # Fill missing values with mean for numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Z-score Standardization
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]
";{0: 0.7508553702150385}
1116;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa', 'exng']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8689068100358422}
1117;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    
    # Fill NaN values with the mean for numerical columns
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    
    # Standard scaling on numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    # Returning the preprocessed DataFrame
    return df
";{0: 0.8557579609859921}
1118;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['restecg'].fillna(df['restecg'].mode()[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs', 'restecg'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.8201831287745958}
1119;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'fbs', 'caa', 'thall'], inplace=True)
    return df
";{0: 0.8100062242712237}
1120;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalize numerical columns 'trtbps', 'chol', 'thalachh' using Z-score normalization
  numerical_cols = ['trtbps', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8165868376026058}
1121;"
  df.fillna(df.mean(), inplace=True)
  
  # Standardizing numerical columns using Z-score scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8666287967545486}
1122;"
    selected_cols = ['cp', 'caa', 'exng', 'thalachh', 'chol']
    df = df[selected_cols].dropna()
    
    return df
";{0: 0.7706476474345327}
1124;"
  return df[['age', 'thalachh', 'cp', 'caa', 'exng']].fillna(method='ffill').dropna()
";{0: 0.7690609413779681}
1126;"
    cols_to_keep = ['age', 'cp',  'thalachh', 'slp', 'caa']
    df = df[cols_to_keep].dropna()

    df['cp'] = df['cp'].apply(lambda x: 1 if x in [2, 3] else 0)

    return df
";{0: 0.752291915499132}
1127;"
  # Filling missing values with the mean of each column
  df.fillna(df.mean(), inplace=True)
  
  # Normalize numerical columns using Z-score normalization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8598491357375995}
1131;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()
    
    # Performing one-hot-encoding on 'sex' column
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df = pd.get_dummies(df, columns=['sex'])

    return df
";{0: 0.7638182213524679}
1132;"
    df.fillna(df.median(), inplace=True)
    
    # Standardize numerical columns using Min-Max scaling to [0, 1] range
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
    
    return df
";{0: 0.8521016617790812}
1134;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'fbs', 'thall', 'caa'], inplace=True)
    return df
";{0: 0.8100062242712237}
1135;"
  feature_cols = ['age', 'sex', 'cp', 'thalachh', 'chol']

  # Dropping NA values
  df = df[feature_cols].dropna()

  # Mapping numerical values to categorical values and applying one-hot-encoding
  df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])

  return df
";{0: 0.7805757181415076}
1136;"
  df.fillna(df.median(), inplace=True)
  
  # Normalizing numerical columns using Min-Max scaling
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.8521016617790812}
1140;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())

    return df
";{0: 0.7954148402573893}
1142;"
    # Selecting and normalizing specific numerical columns
    numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.8176651305683563}
1143;"
    selected_cols = ['age', 'chol', 'thalachh', 'cp', 'caa', 'exng']  # Select relevant columns
    df = df[selected_cols].dropna()  # Drop rows with missing values in selected columns

    # Handle missing values by filling with mean and normalize numerical columns
    numerical_cols = ['age', 'chol', 'thalachh']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8152166829586184}
1144;"
    df = df[['age', 'chol', 'thalachh', 'cp', 'caa', 'exng']].dropna()  # Select and drop missing values

    numerical_cols = ['age', 'chol', 'thalachh']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8112228273518596}
1147;"
  # Drop rows with missing values and apply Min-Max scaling to numerical columns
  df = df.dropna()
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.8549265205361433}
1148;"
  df = df[['age', 'thalachh', 'oldpeak', 'caa', 'exng']].dropna()
  # One-hot encode 'exng' column
  df = pd.get_dummies(df, columns=['exng'], drop_first=True)

  return df
";{0: 0.7368535586277521}
1151;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg'], inplace=True)
    return df
";{0: 0.8423902060201044}
1152;"
  df.fillna(df.mean(), inplace=True)
  
  # Normalize numerical columns using Z-score normalization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # One-hot-encoding 'cp' and 'restecg' columns
  df = pd.get_dummies(df, columns=['cp', 'restecg'])
  
  return df
";{0: 0.850983606557377}
1154;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()

    # One-hot encode 'cp' column and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7437465367646543}
1156;"
  # Fill missing values in numerical columns with the mean
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8493694213419227}
1158;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg']) 
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'fbs', 'thall', 'chol'], inplace=True)
    return df
";{0: 0.8367391243842022}
1159;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']].dropna()
    
    # One-hot-encode the 'cp' column with dropping the first category
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.746006423770304}
1160;"
  df = df.fillna(df.mean())
  
  # Normalize numerical columns between 0 and 1
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  df = pd.get_dummies(df, columns=['cp', 'fbs', 'restecg', 'caa', 'thall', 'slp', 'exng'])
  
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7460970797456697}
1161;"
  # Filling missing values with the mean of each column
  df.fillna(df.mean(), inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8638039379974863}
1163;"
    # Standardizing numerical columns
    numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.8149328901311979}
1164;"
  df.fillna(df.median(), inplace=True)
  
  # Normalizing numerical columns using Min-Max scaling
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.815318907046702}
1167;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
    return df[['age', 'chol', 'thalachh', 'cp', 'caa', 'exng']].dropna()
";{0: 0.7623538076299897}
1170;"
  df.fillna(df.median(), inplace=True)
  
  # Normalize numerical columns
  numerical_cols = ['age', 'trtbps', 'chol']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8155463632063615}
1174;"
    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())

    return df
";{0: 0.7935673252951203}
1175;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) 
    return df
";{0: 0.8251576906739737}
1176;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Min-Max Scaling to normalize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df[['cp', 'restecg', 'slp', 'caa', 'thall']]
";{0: 0.8727075702075702}
1177;"
    df.fillna(df.mean(), inplace=True)
    
    # Select five most important columns
    selected_cols = ['age', 'sex', 'cp', 'thalachh', 'oldpeak']
    df = df[selected_cols]
    
    # Normalize numerical columns to [0, 1] range
    numerical_cols = ['age', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
    
    return df
";{0: 0.8307740613432048}
1178;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    
    # Fill NaN values with mean for numerical columns
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    
    # Standard scaling on numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    # Return the preprocessed DataFrame
    return df
";{0: 0.8666287967545486}
1180;"
  # Selecting the important numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  
  # Filling NaN values with mean for numerical columns
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalizing numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  # Returning the preprocessed DataFrame
  return df
";{0: 0.8515232362431003}
1181;"
    df = df[['age', 'thalachh', 'chol', 'sex', 'cp']].dropna()
    
    # Standardizing numerical columns
    numerical_cols = ['age', 'thalachh', 'chol']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    # Mapping numerical values to categorical values and applying one-hot-encoding
    df['sex'] = df['sex'].map({0: 'male', 1: 'female'})
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: -1}
1184;"
    selected_cols = ['age', 'cp', 'thalachh', 'slp', 'caa']
    df = df[selected_cols].dropna()
    
    df['cp'] = df['cp'].apply(lambda x: 1 if x in [2, 3] else 0)
    
    return df
";{0: 0.7444775076847242}
1185;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df_categorical = pd.get_dummies(df[categorical_cols], columns=categorical_cols, drop_first=True)
  
  df_processed = pd.concat([df_categorical, df[numerical_cols]], axis=1)
  
  return df_processed[['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']]
";{0: 0.737389369565833}
1186;"
  # Fill missing values with the mean of each column
  df.fillna(df.mean(), inplace=True)

  # Normalize numerical columns using Z-score standardization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8585407801027495}
1191;"
  # Fill NA values with mean for all columns
  df.fillna(df.mean(), inplace=True)
  
  # Define a list of numerical columns for normalization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  
  # Apply Min-Max Scaling to normalize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8509522364917249}
1194;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa', 'exng']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df[['thalachh', 'oldpeak', 'caa', 'exng', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8232585962424672}
1195;"
  df = df.fillna(df.mean())
  numerical_cols = ['age', 'chol', 'thalachh']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  df = pd.get_dummies(df, columns=['cp', 'restecg'])
  
  return df
";{0: 0.8085230372776644}
1201;"
    # Define the numerical columns
    numerical_cols = ['age', 'chol', 'thalachh', 'oldpeak', 'sex']

    # Fill NaN values with mean for numerical columns
    df[numerical_cols] = df[numerical_cols].apply(lambda x: x.fillna(x.mean()) if x.dtype in [np.int64, np.float64] else x, axis=0)

    # Standard scaling on numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8204899893254186}
1203;"
    df = df[['restecg', 'thalachh', 'chol', 'oldpeak', 'exng']].dropna()
    df = pd.get_dummies(df, columns=['restecg'], drop_first=True)
    return df
";{0: 0.7511442186845413}
1207;"
    df.dropna(subset=['sex', 'thalachh'], inplace=True)
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.8451234011889749}
1208;"
    # Fill missing values with the mean of each column
    df = df.fillna(df.mean())

    # Normalize numerical columns using Standard Scaling
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.86265451271013}
1209;"
  numerical_cols = ['age', 'chol', 'thalachh', 'cp', 'caa', 'exng']
  
  # Fill missing values in numerical columns with the mean
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Z-score Standardization
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[numerical_cols]
";{0: 0.8044141615479532}
1210;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8741044776119402}
1211;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    return df
";{0: 0.818695669431985}
1212;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  # One-hot encode categorical column 'cp'
  df = pd.get_dummies(df, columns=['cp'])
  
  return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_2']]
";{0: 0.8021481196670821}
1216;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Fill missing values in 'sex' column with the most common value
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop columns
    return df
";{0: 0.8775660160734787}
1217;"
  # Fill missing values with mean and normalize numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean()).apply(lambda x: (x - x.min()) / (x.max() - x.min()))

  return df[numerical_cols]
";{0: 0.7467798025814043}
1219;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8775660160734787}
1220;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    # Normalize numerical columns
    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.7993382961124897}
1221;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  df = pd.get_dummies(df, columns=['cp'])
  
  return df[['age', 'thalachh', 'oldpeak', 'cp_0', 'cp_2']]
";{0: 0.8067458208165075}
1223;"
    # One-hot encode categorical columns and normalize numerical columns
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa', 'exng']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8649935366355251}
1225;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg' with drop_first
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'slp', 'caa', 'fbs', 'thall'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8032112332112332}
1226;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].apply(lambda x: (x - x.min()) / (x.max() - x.min()))

    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    return df[['thalachh', 'oldpeak', 'caa', 'exng', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8390224247079086}
1227;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['fbs'].fillna(df['fbs'].mode()[0], inplace=True)
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.798463800275052}
1228;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp']) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'restecg', 'thall', 'slp'], inplace=True)
    return df
";{0: 0.816025641025641}
1236;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    return df
";{0: 0.818695669431985}
1239;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8776287464812056}
1241;"
  # Fill missing numerical values with mean and normalize using Min-Max scaling
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
  df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
  df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())

  return df[['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']]
";{0: 0.8113348946135831}
1242;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8133249493761582}
1245;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa', 'exng']
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']

    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df[['thalachh', 'oldpeak', 'caa', 'exng', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8256624423963134}
1246;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['chol'].fillna(df['chol'].median(), inplace=True)  # Fill missing 'chol' values with median
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg']) 
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.7833799199214322}
1247;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Z-score Standardization
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[numerical_cols]
";{0: 0.7508553702150385}
1249;"
    # Define numerical and categorical columns
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    categorical_cols = ['cp', 'caa', 'exng']

    # Fill missing values in numerical columns with mean
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

    # Standardize numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=categorical_cols)

    # Select specific columns
    selected_columns = ['age', 'chol', 'thalachh', 'cp_0', 'caa_1']
    return df[selected_columns]
";{0: 0.8015167059870449}
1251;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing 'sex' values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['chol'].fillna(df['chol'].median(), inplace=True)  # Fill missing 'chol' values with median
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])  # One-hot encode specified columns
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age'], inplace=True)  # Drop specified columns
    return df
";{0: 0.7833799199214322}
1253;"
  # Filling missing values with mean for numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standard Scaling for numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8638039379974863}
1254;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall'], inplace=True)
    return df
";{0: 0.8350261572061534}
1256;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    min_max_cols = ['trtbps', 'chol', 'oldpeak']
    for col in min_max_cols:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.7916257977586694}
1258;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])  
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True) 
    return df
";{0: 0.8748509687034277}
1263;"
  return df[['cp', 'restecg', 'slp', 'caa', 'thall']].copy()
";{0: 0.8727075702075702}
1265;"
  return df[['thalachh', 'oldpeak', 'caa', 'exng']]
";{0: 0.7625124939395714}
1269;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8126688001264272}
1271;"
    selected_cols = ['age', 'thalachh', 'caa', 'cp', 'chol']
    df = df[selected_cols].dropna()
    
    df['cp'] = df['cp'].apply(lambda x: 1 if x in [2, 3] else 0)
    
    return df
";{0: 0.7896867012444263}
1272;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    df['trtbps'] = (df['trtbps'] - df['trtbps'].mean()) / df['trtbps'].std()
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    df['caa'] = (df['caa'] - df['caa'].mean()) / df['caa'].std()

    return df[['thalachh', 'oldpeak', 'caa', 'exng', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8401058585782277}
1274;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8768822553897181}
1275;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['chol'].fillna(df['chol'].median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg']) 
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'thall'], inplace=True)
    return df
";{0: 0.7494009216589862}
1277;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.dropna(subset=['thalachh'], inplace=True)
    df.drop(columns=['chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'exng', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7960993876234845}
1279;"
    selected_cols = ['age', 'thalachh', 'cp', 'caa', 'exng']  # Select relevant columns
    df = df[selected_cols].dropna()  # Drop rows with missing values in selected columns

    # Handle missing values by filling with mean and normalize numerical columns
    numerical_cols = ['age', 'thalachh']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8141450041820215}
1283;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])  
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'thall'], inplace=True)
    return df
";{0: 0.8100062242712237}
1284;"
    # One-Hot Encoding categorical columns
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    # Fill missing values in numerical columns with mean
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa', 'exng']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
    # Standardize numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8638664874551971}
1285;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())

    return df[['thalachh', 'age', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7326899482565367}
1286;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])  # Fill missing values with the mode
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    # One-hot encode 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    # Drop irrelevant columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8633697305519339}
1288;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    # Fill missing values in 'chol' column with median
    df['chol'].fillna(df['chol'].median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    # Remove less important columns
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.7912135176651305}
1292;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8519546548672918}
1294;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    selected_cols = ['cp', 'caa', 'exng', 'thalachh', 'chol']
    df = df[selected_cols].dropna()
    
    return df
";{0: 0.7806476474345327}
1295;"
    selected_cols = ['age', 'thalachh', 'cp', 'caa', 'exng']  # Select relevant columns
    df = df[selected_cols].dropna()  # Drop rows with missing values in selected columns

    # Handle missing values by filling with mean and normalize numerical columns
    numerical_cols = ['age', 'thalachh']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode 'cp' column

    return df
";{0: 0.8110971465810175}
1296;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.dropna(axis=0, inplace=True)  # Drop rows with missing values
    return df[['sex', 'thalachh', 'cp_1', 'cp_2', 'cp_3']]  # Return only the selected columns
";{0: 0.8131318681318682}
1297;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)  # Reset index after dropping rows with NaN values
    return df
";{0: 0.8768822553897181}
1301;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['chol'].fillna(df['chol'].median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg']) 
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'thall', 'caa', 'fbs'], inplace=True)
    return df
";{0: 0.7542644452321872}
1302;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Standard Scaling to normalize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']]
";{0: 0.8195054963112398}
1306;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding for 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8714121699196327}
1307;"
    categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'thall']
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=categorical_cols)
    
    return df
";{0: 0.7853844166388267}
1311;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    return df
";{0: 0.818695669431985}
1312;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  
  # Fill missing numerical values with mean
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8549265205361433}
1313;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8106623789716523}
1314;"
from sklearn.preprocessing import StandardScaler

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    scaler = StandardScaler()
    df[['thalachh']] = scaler.fit_transform(df[['thalachh']])
    
    return df
";{0: 0.8785259913128766}
1320;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])  # Fill missing values in 'sex' with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df['chol'] = df['chol'].fillna(df['chol'].median())  # Fill missing 'chol' values with median
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])  # One-hot encode selected columns
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age'], inplace=True)  # Drop specified columns
    return df
";{0: 0.7870505548420672}
1322;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8775660160734787}
1323;"
    selected_cols = ['age', 'cp', 'thalachh', 'slp', 'caa']

    # Fill missing values with mean and normalize numerical columns
    numerical_cols = ['age', 'thalachh']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    # One-hot encode categorical column 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.7715320089822884}
1324;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.dropna(axis=0, inplace=True)
    return df[['sex', 'thalachh', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8131318681318682}
1325;"
    selected_cols = ['cp', 'caa', 'exng', 'thalachh', 'chol']
    return df[selected_cols].dropna()
";{0: 0.7790347442087263}
1329;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg'], inplace=True)
    return df
";{0: 0.8337502435223065}
1332;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df['chol'] = df['chol'].fillna(df['chol'].median())  # Fill missing 'chol' values with median
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs'])  # One-hot encode selected columns
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'thall', 'caa'], inplace=True)  # Drop specified columns
    return df
";{0: 0.7542644452321872}
1335;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
    
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
    
    selected_cols = ['thalachh', 'oldpeak', 'caa', 'exng', 'cp_1', 'cp_2', 'cp_3']
    return df[selected_cols]
";{0: 0.837611134385328}
1336;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding for 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with any missing values
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    return df
";{0: 0.818695669431985}
1337;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall'], inplace=True)
    return df
";{0: 0.8339508883889492}
1338;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df.reset_index(drop=True, inplace=True)  # Reset index after dropping rows with NaN values
    return df
";{0: 0.8775660160734787}
1340;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(subset=['caa', 'slp'], inplace=True)
    return df[['age', 'thalachh', 'slp', 'caa', 'thall']]
";{0: 0.7675473137973138}
1341;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8803544776119402}
1344;"
    selected_cols = ['age', 'sex', 'thalachh', 'oldpeak', 'cp']
    df = df[selected_cols].dropna()

    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})

    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: -1}
1349;"
  selected_cols = ['age', 'sex', 'cp', 'trtbps', 'chol']

  # Drop rows with missing values in selected columns
  df = df[selected_cols].dropna()

  return df
";{0: 0.7079010093304694}
1351;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8768822553897181}
1353;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    return df[['age', 'thalachh', 'slp', 'caa', 'thall']]
";{0: 0.7675473137973138}
1354;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['chol'].fillna(df['chol'].median(), inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs']) 
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True)
    return df
";{0: 0.7517469627147046}
1357;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg', 'fbs'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'thall', 'caa'], inplace=True)
    return df
";{0: 0.7527730616864743}
1359;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  df = pd.get_dummies(df, columns=['sex', 'cp', 'fbs', 'restecg', 'slp', 'thall'], drop_first=True)
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['thalachh', 'oldpeak', 'caa', 'exng']]
";{0: 0.7630952481188658}
1360;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

  # Normalize numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.8098745628194781}
1362;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    selected_cols = ['age', 'cp', 'thalachh', 'slp', 'caa']

    df = df[selected_cols].dropna()

    min_max_scaler = lambda x: (x - x.min()) / (x.max() - x.min())
    df[['age', 'thalachh']] = df[['age', 'thalachh']].apply(min_max_scaler)

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7922200611280912}
1363;"
    selected_cols = ['thalachh', 'oldpeak', 'caa', 'exng', 'cp_1', 'cp_2', 'cp_3']
    
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
    
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa', 'exng']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df[selected_cols]
";{0: 0.8242511520737328}
1365;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    return df
";{0: 0.8679160457029308}
1368;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df['chol'].fillna(df['chol'].median(), inplace=True)  # Fill missing values in 'chol' column with the median
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'thall', 'caa', 'fbs'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.7637267516919051}
1369;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.dropna(axis=0, inplace=True)
    return df[['sex', 'thalachh', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8131318681318682}
1370;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['chol'].fillna(df['chol'].median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.7885349462365591}
1374;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns (including 'age')
    return df
";{0: 0.8768822553897181}
1375;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall', 'fbs'], inplace=True)
    return df
";{0: 0.7735228217267175}
1376;"
    df.dropna(subset=['sex', 'thalachh', 'slp', 'caa', 'thall'], inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    return df[['sex', 'thalachh', 'slp', 'caa', 'thall']]
";{0: 0.7998410118711137}
1379;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(subset=['sex', 'thalachh', 'slp', 'caa', 'thall'], inplace=True)
    return df[['sex', 'thalachh', 'slp', 'caa', 'thall']]
";{0: 0.8040715777092945}
1380;"
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['sex', 'cp', 'fbs', 'restecg', 'slp', 'thall'])

    return df
";{0: 0.7813407007918322}
1382;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa'
    return df
";{0: 0.8802664730533583}
1386;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7928499983662816}
1388;"
  selected_cols = ['age', 'sex', 'cp', 'thalachh', 'caa']

  # Drop rows with missing values in the selected columns
  df = df[selected_cols].dropna()

  # Perform one-hot encoding for the categorical column 'cp'
  df = pd.get_dummies(df, columns=['cp'])

  return df
";{0: 0.7762569726867906}
1389;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs', 'caa', 'exng']
    
    # Drop rows with any missing values
    df = df[numerical_cols + categorical_cols].dropna()

    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    # Standardize numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.7844324606987613}
1393;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall', 'slp'], inplace=True)
    return df
";{0: 0.8563139206777146}
1394;"
  categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
  
  min_max_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  for col in min_max_cols:
      df[col] = (df[col] - df[col].mean()) / df[col].std()
  
  return df
";{0: 0.8633164614338596}
1397;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows of the dataframe
    return df
";{0: 0.5520659793708144}
1398;"
  # Fill missing values with mean for numerical columns
  df.fillna(df.mean(), inplace=True)

  # Normalizing numerical columns using Z-score normalization
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df[['thalachh', 'oldpeak', 'caa', 'exng', 'cp']]
";{0: 0.8500993007814795}
1400;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Min-Max Scaling to normalize numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df[['age', 'sex', 'cp', 'caa', 'exng']]
";{0: 0.7940092165898618}
1402;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['chol'].fillna(df['chol'].median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True) 
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'thall'], inplace=True)
    return df
";{0: 0.7331320830618775}
1404;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8651115338306224}
1405;"
    num_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    cat_cols = ['cp', 'restecg', 'slp']
    
    df[num_cols] = df[num_cols].fillna(df[num_cols].mean())
    
    df = pd.get_dummies(df, columns=cat_cols, drop_first=True)
    
    for col in num_cols:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8154838709677419}
1408;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['fbs'] = df['fbs'].fillna(df['fbs'].mode()[0]) 
    df = pd.get_dummies(df, columns=['cp', 'slp']) 
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True) 
    return df
";{0: 0.8084607346676311}
1410;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall'], inplace=True)
    return df
";{0: 0.8492531876138433}
1411;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall', 'fbs'], inplace=True)
    return df
";{0: 0.7503305329508422}
1414;"
    selected_cols = ['age', 'thalachh', 'cp', 'caa', 'exng']  
    df = df[selected_cols].dropna()  

    numerical_cols = ['age', 'thalachh']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    return df
";{0: 0.8110971465810175}
1417;"
  # Fill missing values with mean for numerical columns
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # One-hot encode categorical columns and drop first for binary variables
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df_categorical = pd.get_dummies(df[categorical_cols], columns=categorical_cols, drop_first=True)
  
  # Concatenate encoded categorical columns and numerical columns
  df_processed = pd.concat([df_categorical, df[numerical_cols]], axis=1)
  
  # Select the final five most important columns
  return df_processed[['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']]
";{0: 0.7208571115013169}
1420;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'slp'])  
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall', 'fbs'], inplace=True)  
    return df
";{0: 0.8089272124397796}
1421;"
  # One-hot encode 'cp', 'restecg', 'slp', 'thall', 'sex', 'fbs' columns
  categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

  # Fill missing values in numerical columns with the mean and standardize them
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8606935106141875}
1422;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7456483289506799}
1423;"
    selected_cols = ['cp', 'caa', 'exng', 'thalachh', 'chol']
    df = df[selected_cols].dropna()
    
    for col in ['thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.801870398242688}
1424;"
    # Filling NA values with mean of respective column
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numerical columns using Min-Max Scaling
    df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] = (df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] - df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].min()) / (df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].max() - df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].min())
    
    # One-hot encoding categorical column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]
";{0: 0.7489975445168882}
1425;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())

    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

    return df
";{0: 0.8633728413163897}
1428;"
    selected_cols = ['age', 'thalachh', 'cp', 'slp', 'caa']

    df = df[selected_cols].dropna()

    min_max_scaler = lambda x: (x - x.min()) / (x.max() - x.min())
    df[['age', 'thalachh']] = df[['age', 'thalachh']].apply(min_max_scaler)

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.8005468891270503}
1429;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall', 'slp', 'caa'], inplace=True)
    return df
";{0: 0.818695669431985}
1430;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df.reset_index(drop=True, inplace=True)  # Reset index
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows of the dataframe
    return df
";{0: 0.6338428209395951}
1432;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['restecg'] = df['restecg'].fillna(df['restecg'].mode()[0])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])  
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.817377751802065}
1434;"
    df.dropna(subset=['sex', 'thalachh'], inplace=True)
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.8596965903511629}
1439;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['chol'].fillna(df['chol'].median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age'], inplace=True)
    return df
";{0: 0.7860424903259382}
1442;"
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing numerical columns using Min-Max Scaling
    df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] = (df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']] - df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].min()) / (df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].max() - df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']].min())
    
    # One-hot encoding categorical column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]
";{0: 0.7447316715010152}
1448;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df.reset_index(drop=True, inplace=True)  # Reset index
    return df
";{0: 0.8741044776119402}
1449;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Scale numerical columns using Min-Max Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.8493694213419227}
1450;"
  # Categorical columns to one-hot encode
  categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
  df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

  # Fill missing values in numerical columns with the mean and standardize them
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.8556974138148121}
1452;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['fbs'] = df['fbs'].fillna(df['fbs'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.drop(columns=['exng', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8041050177892283}
1453;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing 'sex' values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['chol'].fillna(df['chol'].median(), inplace=True)  # Fill missing 'chol' values with median
    df = pd.get_dummies(df, columns=['cp', 'slp', 'restecg'])  # One-hot encode specified columns
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'caa', 'fbs', 'thall'], inplace=True)  # Drop specified columns
    return df
";{0: 0.7468407578084997}
1454;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Replace missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    # Drop irrelevant columns and return the resulting DataFrame
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall'], inplace=True)
    return df
";{0: 0.8492531876138433}
1455;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True)
    return df
";{0: 0.8320542423981119}
1456;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    return df
";{0: 0.818695669431985}
1463;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'], drop_first=True)  
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'thall'], inplace=True)  
    return df
";{0: 0.7477877244430725}
1466;"
    # Drop rows with missing values in the dataset
    df = df.dropna()

    # Select only the five most important columns
    selected_cols = ['age', 'cp', 'thalachh', 'slp', 'caa']

    return df[selected_cols]
";{0: 0.7958465711158436}
1469;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['age', 'slp', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  
    return df
";{0: 0.7985504520486459}
1470;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding for 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    return df
";{0: 0.818695669431985}
1471;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    return df[['age', 'thalachh', 'slp', 'caa', 'thall']]  # Return selected columns
";{0: 0.7675473137973138}
1473;"
    selected_cols = ['age', 'thalachh', 'cp', 'caa', 'exng']  # Select relevant columns
    df = df[selected_cols].dropna()  # Drop rows with missing values in selected columns

    categorical_cols = ['cp']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)  # One-hot encode 'cp' column

    numerical_cols = ['age', 'thalachh']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8110971465810175}
1475;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Fill missing values in 'sex' column with mode
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs']) # Perform one-hot encoding on categorical columns
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa'], inplace=True) # Drop unnecessary columns
    return df
";{0: 0.8320542423981119}
1480;"
    return df[['cp', 'restecg', 'slp', 'caa', 'thall']].copy()  # Select specific columns
";{0: 0.8727075702075702}
1485;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # One-hot encode categorical columns and drop first for binary variables
  categorical_cols = ['sex', 'cp', 'fbs', 'restecg', 'slp', 'caa', 'thall', 'exng']
  df_categorical = pd.get_dummies(df[categorical_cols], columns=categorical_cols, drop_first=True)
  
  # Concatenate encoded categorical columns and numerical columns
  df_processed = pd.concat([df_categorical, df[numerical_cols]], axis=1)
  
  return df_processed[['chol', 'thalachh', 'oldpeak', 'age', 'trtbps']]
";{0: 0.7244861437593814}
1486;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)
    
    # Fill missing values in numerical columns with the mean and standardize them
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.8581551711112791}
1490;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)
    return df
";{0: 0.5869282801848776}
1491;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall', 'slp', 'caa'], inplace=True)
    return df
";{0: 0.818695669431985}
1493;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows
    return df
";{0: 0.4633510634232829}
1495;"
    num_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    cat_cols = ['cp', 'restecg', 'slp']
    
    # Fill missing values with mean for numerical columns
    df[num_cols] = df[num_cols].fillna(df[num_cols].mean())
    
    # Perform one-hot encoding and scale numerical columns
    df = pd.get_dummies(df, columns=cat_cols, drop_first=True)
    
    for col in num_cols:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8196368764322228}
1496;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['chol'] = df['chol'].fillna(df['chol'].median())
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'slp', 'trtbps', 'age', 'thall'], inplace=True)
    return df
";{0: 0.7755069359170856}
1497;"
    df.dropna(subset=['sex', 'thalachh', 'slp', 'caa', 'thall'], inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8768822553897181}
1500;"
    categorical_cols = ['cp', 'restecg', 'slp', 'thall', 'sex', 'fbs']
    df = pd.get_dummies(df, columns=categorical_cols, drop_first=True)

    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

    return df
";{0: 0.8620466201640185}
1501;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Rearrange columns
    return df
";{0: 0.5646586788241768}
1502;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Rearrange columns
    return df
";{0: 0.8225647170510326}
1504;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'slp', 'fbs'])
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg', 'thall'], inplace=True)
    return df
";{0: 0.7906122361285193}
1506;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['chol'].fillna(df['chol'].median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'trtbps', 'oldpeak', 'age', 'thall', 'caa', 'fbs'], inplace=True)
    return df
";{0: 0.7647193075231706}
1509;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding for 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df.reset_index(drop=True, inplace=True)  # Reset index after dropping rows
    return df
";{0: 0.8741044776119402}
1511;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Transformation on 'caa' column
    return df
";{0: 0.8830549345918198}
1520;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['chol'].fillna(df['chol'].median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(['exng', 'trtbps', 'oldpeak', 'age', 'thall', 'caa', 'fbs'], axis=1, inplace=True)
    return df
";{0: 0.7541428929277185}
1521;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    return df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8095881537209788}
1523;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Standard Scaling
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.8585407801027495}
1535;"
  numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
  df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
  
  # Normalize numerical columns using Z-score Standardization
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]
";{0: 0.7529035012954275}
1537;"
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True) 
    df.drop(columns=['exng', 'chol', 'trtbps', 'oldpeak', 'age', 'caa', 'restecg', 'thall', 'fbs'], inplace=True) 
    return df
";{0: 0.7538728357581264}
1539;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.818695669431985}
1540;"
    numerical_cols = ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']
    df[numerical_cols] = df[numerical_cols].fillna(df[numerical_cols].mean())
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.8515232362431003}
1541;"
  return df.drop(columns=['fbs', 'thalachh', 'oldpeak', 'exng']).copy()  # Drop specific columns
";{0: 0.7672908489569031}
1542;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transform on 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding on 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa' column
    return df
";{0: 0.8802664730533583}
1544;"
    df.dropna(inplace=True)  
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['slp'] = df['slp'] / df['slp'].max()  
    df['caa'] = np.sqrt(df['caa'])  
    return df  
";{0: 0.8830549345918198}
1549;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Adding a new transformation step
    return df
";{0: 0.8908865485875597}
1553;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'caa', 'slp', 'thall'], inplace=True)
    return df
";{0: 0.8225647170510326}
1564;"
    df.dropna(inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8802664730533583}
1570;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Modify 'thall' column
    return df
";{0: 0.869468411465823}
1575;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns
    df = df[['age', 'slp', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    
    return df
";{0: 0.7985504520486459}
1577;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding on 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df.reset_index(drop=True, inplace=True)  # Reset the index of the DataFrame
    return df
";{0: 0.873298025999037}
1582;"
    df.dropna(inplace=True) 
    df_encoded = pd.get_dummies(df, columns=['cp', 'restecg'])
    df_selected = df_encoded[['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df_selected['thalachh'] = np.log1p(df_selected['thalachh'])
    df_selected['slp'] = df_selected['slp'] / df_selected['slp'].max()
    df_selected['caa'] = np.sqrt(df_selected['caa'])
    return df_selected
";{0: 0.8465068452905576}
1588;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa' column
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    return df
";{0: 0.8768049345918199}
1590;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Fill missing values with the most common value in 'sex' column
    df['thalachh'] = np.log1p(df['thalachh']) # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot-encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall', 'slp'], inplace=True) # Drop unnecessary columns
    return df
";{0: 0.8563139206777146}
1605;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.dropna(subset=['slp', 'caa'], inplace=True)
    return df[['slp', 'caa']]
";{0: 0.766860420057351}
1607;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df.reset_index(drop=True, inplace=True)  # Reset index
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows of the dataframe
    return df
";{0: 0.5410911987256073}
1610;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8530642223397379}
1617;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    return df
";{0: 0.5491089532840642}
1623;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8732335060203912}
1628;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df['thall'] = np.sqrt(df['thall'])  # Additional transformation step for another column
    return df
";{0: 0.8428024681715222}
1629;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['chol', 'trtbps', 'age', 'fbs', 'oldpeak', 'exng'], inplace=True)
    return df
";{0: 0.8775660160734787}
1632;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Modify 'thall' column
    return df
";{0: 0.8722333884243485}
1633;"
    df.dropna(inplace=True)  
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = df['slp'] / df['slp'].max()  
    return df
";{0: 0.8795827123695975}
1636;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows of the dataframe
    return df
";{0: 0.614989718986358}
1645;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8795827123695975}
1656;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    return df
";{0: 0.8802664730533583}
1657;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.sample(frac=1).reset_index(drop=True)
    return df
";{0: 0.5428728363022499}
1660;"
# Fill missing values, apply log transformation, one-hot-encode categorical columns, and select important columns
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall', 'slp'], inplace=True)
    return df
";{0: 0.8563139206777146}
1662;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)  # Convert 'caa' to binary
    return df
";{0: 0.8740353531879771}
1663;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8095881537209788}
1664;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]  # Keep only selected columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    return df
";{0: 0.8439685057876491}
1665;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(subset=['age', 'thalachh', 'slp', 'caa', 'thall'], inplace=True)
    return df[['age', 'thalachh', 'slp', 'caa', 'thall']]
";{0: 0.7675473137973138}
1666;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['chol', 'trtbps', 'fbs', 'oldpeak', 'exng'], inplace=True)
    return df
";{0: 0.808083013892287}
1674;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Remove unnecessary columns
    return df
";{0: 0.8775660160734787}
1678;"
    df.dropna(inplace=True) 
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['age', 'thalachh', 'slp', 'caa', 'thall']]  
    return df
";{0: 0.7675473137973138}
1688;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding for 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df.reset_index(drop=True, inplace=True)  # Reset index after dropping rows
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    return df
";{0: 0.818695669431985}
1690;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Additional preprocessing steps
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.770417700578991}
1691;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    return df
";{0: 0.8795827123695975}
1693;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = (df['caa'] - df['caa'].mean()) / df['caa'].std()  # Standardize 'caa' column
    return df
";{0: 0.8659884201819684}
1694;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    return df
";{0: 0.818695669431985}
1696;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Modify 'thall' column
    return df
";{0: 0.8657817755211227}
1703;"
    df.dropna(subset=['sex', 'thalachh', 'slp', 'caa', 'thall'], inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa'
    return df
";{0: 0.8830549345918198}
1706;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa' column
    return df
";{0: 0.8732335060203912}
1708;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    return df
";{0: 0.8066973886328725}
1715;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.astype(int)  # Convert all columns to integers
    return df
";{0: 0.8624341383663419}
1720;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8657817755211227}
1721;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Adding a new transformation step
    df['slp'] = np.square(df['slp'])  # Another new transformation step
    return df
";{0: 0.8955822627193596}
1725;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)
    return df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
";{0: 0.6135275643075128}
1730;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['chol', 'trtbps', 'age', 'fbs', 'oldpeak', 'exng'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Add a new transformation step
    return df
";{0: 0.8902027879037989}
1734;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa'
    return df
";{0: 0.8118727106227105}
1737;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with its mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    return df
";{0: 0.8830549345918198}
1738;"
    df.dropna(subset=['sex', 'thalachh'], inplace=True)  # Drop rows with missing values in 'sex' and 'thalachh' columns
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithmic transformation on 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa' column
    return df
";{0: 0.8795827123695975}
1746;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df.reset_index(drop=True, inplace=True)  # Reset index after modifications
    return df
";{0: 0.8758176178150293}
1752;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True) # Replace missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df['cp'] = pd.cut(df['cp'], bins=3, labels=False)  # Discretize 'cp' column
    df = pd.get_dummies(df, columns=['restecg'])  # Perform one-hot encoding on 'restecg' column
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8112404836542767}
1754;"
    df.dropna(inplace=True)
    df.fillna(df.mode().iloc[0], inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8802664730533583}
1755;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0) # Binarizing 'thall' column
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8619742662667598}
1756;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8893322627193596}
1760;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows
    df['thall'] = pd.cut(df['thall'], bins=3, labels=False)  # New transformation step
    return df
";{0: 0.5686328725038402}
1764;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    selected_columns = ['sex', 'thalachh', 'slp', 'caa']
    df = df[selected_columns]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.7503504663297588}
1767;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Modify 'thall' column
    df.reset_index(drop=True, inplace=True)  # Reset index
    return df
";{0: 0.8657817755211227}
1768;"
    # Replace missing values in 'sex' column with the mode
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns, drop irrelevant columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Select and return the final columns for dataset
    return df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8052518237368436}
1769;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns, drop irrelevant columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Select and return the final columns for dataset
    return df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.8052518237368436}
1770;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Adding a new transformation step
    df['thal'] = df['thall'].apply(lambda x: 1 if x == 0 else 0)  # Adding one more feature extraction step
    return df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa', 'thal']]
";{0: 0.6763139206777147}
1771;"
    df.dropna(subset=['sex', 'thalachh', 'slp', 'caa', 'thall'], inplace=True)  # Drop rows with missing values in specific columns
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Replace missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding on 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa' column
    return df
";{0: 0.8732335060203912}
1777;"
    df.dropna(subset=['sex', 'thalachh'], inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df.rename(columns={'cp_0': 'cp_typical_angina', 'cp_1': 'cp_atypical_angina', 'cp_2': 'cp_non_anginal_pain', 'cp_3': 'cp_asymptomatic',
                       'restecg_0': 'rest_ecg_normal', 'restecg_1': 'rest_ecg_ST_T_wave_abnormality', 'restecg_2': 'rest_ecg_left_ventricular_hypertrophy'}, inplace=True)
    return df
";{0: 0.8830549345918198}
1782;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df.reset_index(drop=True, inplace=True)
    df.fillna(0, inplace=True)  # Fill remaining NA values with 0
    return df
";{0: 0.8647065067039182}
1793;"
    df.dropna(inplace=True)  
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    
    df['slp'] = df['slp'] / df['slp'].max()  
    df['caa'] = np.sqrt(df['caa'])  
    
    return df  
";{0: 0.8830549345918198}
1795;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8768822553897181}
1796;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.astype(int)
    df['caa'] = np.sqrt(df['caa'])  # Adding sqrt transformation for 'caa'
    return df
";{0: 0.8706764797133649}
1805;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall'], inplace=True)
    return df[['cp', 'slp', 'caa', 'restecg']]
";{0: 0.8207507050943065}
1808;"
    df.dropna(inplace=True)  
    df.fillna(df.mode().iloc[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]  
    df['slp'] = df['slp'] / df['slp'].max()  
    df['caa'] = np.sqrt(df['caa'])  

    # Additional preprocessing steps
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8311021505376344}
1817;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['chol', 'trtbps', 'age', 'fbs', 'oldpeak', 'exng'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thall'] = (df['thall'] > 1).astype(int)  # Create a binary column based on 'thall'
    return df
";{0: 0.8456309548351244}
1819;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Replace missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp', 'thall', 'age', 'caa'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8225647170510326}
1822;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['chol', 'trtbps', 'age', 'fbs', 'oldpeak', 'exng'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # New transformation step
    df['slp'] = np.square(df['slp'])  # New transformation step
    df['thall'] = np.where(df['thall'] == 2, 1, 0)  # Convert thall to binary
    df.reset_index(drop=True, inplace=True)  # Reset index
    return df
";{0: 0.8649005608327643}
1823;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = np.where(df['thall'] == 2, 1, 0)  # Binarize 'thall' column using np.where
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8685316433159402}
1824;"
    df.dropna(inplace=True) 
    df_encoded = pd.get_dummies(df, columns=['cp', 'restecg'])
    df_selected = df_encoded[['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df_selected['thalachh'] = np.log1p(df_selected['thalachh'])
    df_selected['slp'] = df_selected['slp'] / df_selected['slp'].max()
    df_selected['caa'] = np.sqrt(df_selected['caa'])
    # Additional preprocessing steps
    df_selected['thalachh'] = (df_selected['thalachh'] - df_selected['thalachh'].mean()) / df_selected['thalachh'].std()
    df_selected['caa'] = (df_selected['caa'] - df_selected['caa'].min()) / (df_selected['caa'].max() - df_selected['caa'].min())
    return df_selected
";{0: 0.8323924731182796}
1828;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.fillna(df.mode().iloc[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8795827123695975}
1830;"
    df = df.dropna(subset=['cp', 'restecg', 'thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['sex', 'slp', 'caa', 'thall', 'thalachh']]
    return df
";{0: 0.7609616174771883}
1832;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Convert 'thall' values
    df = df.astype(int)  # Convert all columns to integers
    return df
";{0: 0.8624341383663419}
1835;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    return df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Return selected columns
";{0: 0.7890362511052167}
1837;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    selected_columns = ['sex', 'thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8339508883889492}
1839;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = np.where(df['thall'] == 2, 1, 0)
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8631192051166167}
1841;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall'], inplace=True)
    return df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
";{0: 0.7890362511052167}
1847;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Transform 'thall' column
    return df
";{0: 0.8664886501627891}
1855;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    return df
";{0: 0.8833739666526551}
1860;"
    # Drop rows with missing values
    df.dropna(inplace=True)  
    
    # Fill missing values with mode
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])  
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    
    # Drop less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    
    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()  
    
    # Apply square root transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])  
    
    return df  
";{0: 0.8768049345918199}
1861;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8866399550270518}
1864;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]  # Keep only selected columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    return df
";{0: 0.850420118690875}
1865;"
    df = df.dropna()  # Drop rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Replace missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'thall'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.8377760250009709}
1866;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    return df
";{0: 0.8802664730533583}
1868;"
# Make sure to import StandardScaler
from sklearn.preprocessing import StandardScaler

def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    scaler = StandardScaler()
    df[['thalachh']] = scaler.fit_transform(df[['thalachh']])
    
    return df
";{0: 0.8785259913128766}
1870;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df['slp'] = df['slp'].apply(lambda x: 1 if x > 1 else 0)  # Modify 'slp' column
    return df
";{0: 0.8791096708199501}
1886;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.astype(int)
    
    # Additional preprocessing steps can be added here
    
    return df
";{0: 0.8624341383663419}
1888;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the most common value
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding categorical columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    return df
";{0: 0.892793801180898}
1889;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    selected_columns = ['sex', 'thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    
    return df
";{0: 0.8393090075797639}
1890;"
    df.dropna(inplace=True)  
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    
    selected_columns = ['sex', 'thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    
    return df
";{0: 0.8339508883889492}
1891;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].map(lambda x: 1 if x == 2 else 0)
    df = df.astype(int)
    return df
";{0: 0.8624341383663419}
1895;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    return df
";{0: 0.8806700039486925}
1900;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Modify 'thall' column
    df.reset_index(drop=True, inplace=True)  # Reset index
    return df
";{0: 0.869468411465823}
1901;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thall'] = (df['thall'] > 1).astype(int)
    return df
";{0: 0.8418234455807617}
1904;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8885258111064565}
1906;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalizing and transforming selected columns
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8833739666526551}
1908;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)
    df['thall'] = np.power(df['thall'], 2)  # Additional transformation step for another column using power function
    return df
";{0: 0.46221962730501626}
1909;"
    df.fillna(df.mean(), inplace=True)  # Fill NA values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop any remaining NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    return df
";{0: 0.8921100404971373}
1911;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8768049345918199}
1912;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.892793801180898}
1914;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = np.where(df['thall'] == 2, 1, 0)
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8730398400372517}
1915;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    selected_columns = ['sex', 'thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8377760250009709}
1916;"
    df.fillna(df.mode().iloc[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8231858423735252}
1917;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    return df
";{0: 0.8567699987674103}
1920;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    return df
";{0: 0.8722333884243485}
1923;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalizing and transforming selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    min_caa = df['caa'].min()
    max_caa = df['caa'].max()
    df['caa'] = (df['caa'] - min_caa) / (max_caa - min_caa)
    
    return df
";{0: 0.8799124281911167}
1925;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['chol', 'trtbps', 'fbs', 'oldpeak', 'exng'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    return df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
";{0: 0.8225647170510326}
1928;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    min_caa = df['caa'].min()
    max_caa = df['caa'].max()
    df['caa'] = (df['caa'] - min_caa) / (max_caa - min_caa)
    
    return df
";{0: 0.8826902059688944}
1930;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.869468411465823}
1932;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Keeping only the FIVE most important columns
    top_columns = ['slp', 'caa', 'thalachh', 'cp_0', 'cp_2']
    df = df[top_columns]
    
    return df
";{0: 0.8450387252832374}
1934;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]  # Keep only selected columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column

    # Additional preprocessing steps
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scale 'caa' column
    
    return df
";{0: 0.8284791997179622}
1935;"
    df.dropna(inplace=True)
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]

    # Additional preprocessing steps
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.8284791997179622}
1937;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8322719817088323}
1939;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalizing and transforming selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8861624281911167}
1940;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['cp_2', 'thalachh', 'caa', 'slp', 'restecg_1']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.7961914795210443}
1941;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.8921100404971373}
1942;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])

    # Normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.8311021505376344}
1945;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] /= df['slp'].max() 
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    return df
";{0: 0.8759984829789167}
1948;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)
    df['thall'] = np.power(df['thall'], 2)
    return df
";{0: 0.4697419336127992}
1949;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    selected_columns = ['sex', 'thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    return df
";{0: 0.8459229088355459}
1961;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalizing and transforming selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardizing selected column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling selected column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8806700039486925}
1964;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = np.clip(df['thall'], 0, 2)  # Clip the values to be within certain range
    return df
";{0: 0.844048740656994}
1966;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.892793801180898}
1971;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] -= df['thalachh'].mean()
    df['thalachh'] /= df['thalachh'].std()
    df['caa'] -= df['caa'].min()
    df['caa'] /= (df['caa'].max() - df['caa'].min())
    return df
";{0: 0.8806700039486925}
1972;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.astype(int)
    return df
";{0: 0.8624341383663419}
1973;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    # Selected the most important columns and dropped additional columns
    return df
";{0: 0.8225647170510326}
1975;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    
    # Normalizing and scaling features
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    top_columns = ['slp', 'caa', 'thalachh', 'cp_0', 'cp_2']
    df = df[top_columns]
    
    return df
";{0: 0.8450387252832374}
1977;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize and scale features
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8772201204988089}
1980;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding on 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df.reset_index(drop=True, inplace=True)  # Reset the index of the DataFrame
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    return df
";{0: 0.818695669431985}
1987;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.8231858423735252}
1989;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize and scale selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.876340999619688}
1990;"

    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalizing and transforming selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardizing selected column - thalachh
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling selected column - caa
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df

";{0: 0.8861624281911167}
1994;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    return df
";{0: 0.8705330490405118}
1995;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Keeping the transformation step
    df['slp'] = np.square(df['slp'])  # Keeping the transformation step
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Adding a new standardization step for 'thalachh'
    return df
";{0: 0.895820532514081}
1996;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Further transformations can be added here for enhancement
    return df
";{0: 0.8893322627193596}
1997;"
    df.dropna(inplace=True)
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8284791997179622}
1998;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8322719817088323}
2000;"
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Perform one-hot encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Select important columns
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    
    # Apply transformations
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    
    # Normalize selected columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8350365767671427}
2003;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Normalize caa column
    min_caa = df['caa'].min()
    max_caa = df['caa'].max()
    df['caa'] = (df['caa'] - min_caa) / (max_caa - min_caa)
    
    return df
";{0: 0.8826902059688944}
2004;"
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    # Perform one-hot encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Logarithmic transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    return df
";{0: 0.8795827123695975}
2005;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.895820532514081}
2006;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode of each column
    
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scale 'caa' column
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]  # Keep only selected columns
    
    return df
";{0: 0.8323924731182796}
2007;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] -= df['thalachh'].mean()
    df['thalachh'] /= df['thalachh'].std()
    min_caa = df['caa'].min()
    max_caa = df['caa'].max()
    df['caa'] -= min_caa
    df['caa'] /= (max_caa - min_caa)
    
    top_columns = ['slp', 'caa', 'thalachh', 'cp_0', 'cp_2']
    df = df[top_columns]
    
    return df
";{0: 0.8450387252832374}
2010;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.892793801180898}
2014;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.874862053369516}
2017;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    # Normalizing and scaling selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.8799124281911167}
2019;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.dropna(inplace=True)  
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['slp'] = df['slp'] / df['slp'].max()  
    df['caa'] = np.sqrt(df['caa'])  
    return df
";{0: 0.8802664730533583}
2020;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['slp', 'cp_0', 'cp_1', 'cp_3', 'caa']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8231858423735252}
2023;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Adding a new transformation step
    df['thall'] = np.where(df['thall'] == 2, 1, 0)  # Convert thall to binary
    df.reset_index(drop=True, inplace=True)  # Reset index
    return df
";{0: 0.8825268817204301}
2026;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8900898384769353}
2027;"
    df.fillna(df.mean(), inplace=True)  # Fill NA values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop any remaining NA values
    df = df[['cp_2', 'thalachh', 'caa', 'slp', 'restecg_1']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    return df
";{0: 0.7892949277969064}
2029;"
    # Fill missing values with mode
    df.fillna(df.mode().iloc[0], inplace=True)
    
    # Log transform 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])  
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    
    # Drop rows with missing values
    df.dropna(inplace=True)  
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    
    # Square root transform 'caa'
    df['caa'] = np.sqrt(df['caa'])  
    
    # Square transform 'slp'
    df['slp'] = np.square(df['slp'])  
    
    return df
";{0: 0.892793801180898}
2031;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    # Normalizing and scaling selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    top_columns = ['slp', 'caa', 'thalachh', 'cp_0', 'cp_2']
    df = df[top_columns]

    return df
";{0: 0.8450387252832374}
2032;"
    df.dropna(inplace=True)
    
    # Perform one-hot encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Logarithmic transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    return df
";{0: 0.8732335060203912}
2033;"
    df.dropna(inplace=True)
    
    # Perform one-hot encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Logarithmic transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    return df
";{0: 0.8775625103493956}
2039;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)
    df['thall'] = np.power(df['thall'], 2)
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.47194813409234665}
2040;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['thalachh', 'slp', 'caa', 'cp_0', 'cp_3', 'restecg_0']]

    # Normalize and scale features
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.844190946253347}
2042;"
    df.dropna(inplace=True)

    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()

    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Apply logarithmic transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    return df
";{0: 0.8768049345918199}
2043;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with its mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column

    # Normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  

    return df
";{0: 0.8861624281911167}
2047;"
    df.dropna(inplace=True)  
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])

    # Normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  

    return df
";{0: 0.8826902059688944}
2048;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.astype(int)
    df['caa'] = np.sqrt(df['caa'])
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8706764797133649}
2050;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = np.where(df['thall'] == 2, 1, 0)
    return df
";{0: 0.8685316433159402}
2053;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize and scale the features
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8799124281911167}
2055;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding on categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['slp'] = df['slp'] / df['slp'].max()  # Normalize 'slp' column
    df['caa'] = np.sqrt(df['caa'])  # Transformation on 'caa' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh' column
    return df
";{0: 0.8741126268995121}
2059;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df['slp'] = np.sqrt(df['slp'])
    return df
";{0: 0.8705539934216807}
2060;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['slp'] /= df['slp'].max() 
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    return df
";{0: 0.8945115995115994}
2061;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['thalachh', 'cp_0', 'cp_1', 'cp_3', 'caa']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['thalachh'] = np.square(df['thalachh'])  # Square transform 'thalachh'
    return df
";{0: 0.7991430433365917}
2062;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.889570532514081}
2063;"
# Improved version of `select_columns_and_return_dataframe_v2` with optimized normalization technique
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling caa column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8799124281911167}
2066;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    # Normalize 'slp'
    df['slp'] /= df['slp'].max()
    
    # Transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Log transform 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8861624281911167}
2067;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows of the dataframe
    return df
";{0: 0.5822577609393879}
2069;"
    df.dropna(inplace=True)

    # One-hot encoding for 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Removing irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    # Normalize 'slp'
    df['slp'] = df['slp'] / df['slp'].max()

    # Transform 'caa' using square root
    df['caa'] = np.sqrt(df['caa'])

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    return df
";{0: 0.8795827123695975}
2071;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling caa column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.8826902059688944}
2072;"
    df.fillna(df.mode().iloc[0], inplace=True)

    # Log transform 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])  

    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  

    # Drop rows with missing values
    df.dropna(inplace=True)  

    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  

    # Square root transform 'caa'
    df['caa'] = np.sqrt(df['caa'])  

    # Square transform 'slp'
    df['slp'] = np.square(df['slp'])  

    return df
";{0: 0.8955822627193596}
2073;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df['slp'] = df['slp'].apply(lambda x: 1 if x > 1 else 0)
    return df
";{0: 0.8726580579167242}
2077;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])

    # Standardization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.8259408602150538}
2078;"
    df.fillna(df.mean(), inplace=True)  # Fill NA values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop any remaining NA values
    df = df[['thalachh', 'oldpeak', 'slp', 'cp_2', 'sex']]  # Select specific columns
    df['oldpeak'] = np.sqrt(df['oldpeak'])  # Square root transformation on 'oldpeak'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    return df
";{0: 0.754408216841843}
2079;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df = df[['age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]  # Select specific columns
    df['age'] = np.sqrt(df['age'])  # Square root transform 'age'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as binary
    return df
";{0: 0.7758490566037736}
2086;"
    df.dropna(inplace=True)
    
    # Perform one-hot encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Logarithmic transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling for 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8799124281911167}
2087;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = np.where(df['thall'] == 2, 1, 0)
    df['slp'] = np.sqrt(df['slp'])
    return df
";{0: 0.8678914230171749}
2097;"
    df.dropna(inplace=True)
    df_encoded = pd.get_dummies(df, columns=['cp', 'restecg'])
    df_selected = df_encoded[['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df_selected['thalachh'] = np.log1p(df_selected['thalachh'])
    df_selected['slp'] = df_selected['slp'] / df_selected['slp'].max()
    df_selected['caa'] = np.sqrt(df_selected['caa'])
    df_selected['thalachh'] = (df_selected['thalachh'] - df_selected['thalachh'].mean()) / df_selected['thalachh'].std()
    df_selected['caa'] = (df_selected['caa'] - df_selected['caa'].min()) / (df_selected['caa'].max() - df_selected['caa'].min())
    
    return df_selected
";{0: 0.8311021505376344}
2098;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    return df
";{0: 0.8664886501627891}
2099;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['thalachh', 'slp', 'caa', 'cp_0', 'cp_3', 'restecg_0']]

    # Normalize and scale features
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.844190946253347}
2100;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    return df
";{0: 0.8225647170510326}
2101;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Scaling and transforming selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardizing selected column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling selected column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8833739666526551}
2104;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Feature scaling for caa column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8826902059688944}
2107;"
    df.dropna(inplace=True)
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    
    return df
";{0: 0.8284791997179622}
2108;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    return df
";{0: 0.818695669431985}
2109;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    return df
";{0: 0.8322719817088323}
2119;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    return df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa', 'slp', 'thall']]
";{0: 0.861246714678918}
2120;"
    df.dropna(inplace=True)
    
    # Perform one-hot encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Logarithmic transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize 'caa' column
    df['caa'] = (df['caa'] - df['caa'].mean()) / df['caa'].std()
    
    # Min-max scale 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8883207070707071}
2121;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize caa column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8928172857608342}
2126;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    mean_thalachh = df['thalachh'].mean()
    std_thalachh = df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - mean_thalachh) / std_thalachh
    
    min_caa = df['caa'].min()
    max_caa = df['caa'].max()
    df['caa'] = (df['caa'] - min_caa) / (max_caa - min_caa)
    
    top_columns = ['slp', 'caa', 'thalachh', 'cp_0', 'cp_2']
    df = df[top_columns]
    
    return df
";{0: 0.8450387252832374}
2131;"
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize selected columns
    df['slp'] /= df['slp'].max()
    
    # Square root transformation
    df['caa'] = np.sqrt(df['caa'])
    
    # Log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardization of a column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of a column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8861624281911167}
2135;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = np.where(df['thall'] == 2, 1, 0)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows of the dataframe
    return df
";{0: 0.5746203393380813}
2136;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8955822627193596}
2138;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['cp_0'] = (df['cp_0'] - df['cp_0'].mean()) / df['cp_0'].std()
    df['cp_1'] = (df['cp_1'] - df['cp_1'].mean()) / df['cp_1'].std()
    df['cp_2'] = (df['cp_2'] - df['cp_2'].mean()) / df['cp_2'].std()
    df['cp_3'] = (df['cp_3'] - df['cp_3'].mean()) / df['cp_3'].std()
    return df
";{0: 0.8930320709756193}
2142;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.8923483102918587}
2144;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize and transform selected columns
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize thalachh
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale caa
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8861624281911167}
2145;"
    df.dropna(inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()

    # Apply square root transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])

    return df
";{0: 0.8830549345918198}
2146;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.fillna(df.mode().iloc[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    selected_columns = ['thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    df['slp'] = df['slp'] / df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8465068452905576}
2160;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    return df
";{0: 0.7529068780681684}
2161;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['chol', 'trtbps', 'age', 'fbs', 'oldpeak', 'exng'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Add a new transformation step
    df['thal'] = np.where(df['thall'] == 2, 1, 0)  # Binarizing 'thall' column in a different way
    df.drop(columns=['thall'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8825268817204301}
2162;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['slp'] /= df['slp'].max()
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    
    return df
";{0: 0.770417700578991}
2168;"
    df.dropna(inplace=True)
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Selected important columns
    selected_columns = ['sex', 'thalachh', 'slp', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    
    # Normalize 'slp' column
    df['slp'] = df['slp'] / df['slp'].max()
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Apply logarithmic transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    return df
";{0: 0.8350261572061534}
2171;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thall'] = (df['thall'] > 1).astype(int)
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8445556860179202}
2172;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    return df
";{0: 0.818695669431985}
2173;"
    df.fillna(df['thalachh'].mean(), inplace=True)  # Fill missing values with mean of 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['cp_2', 'thalachh', 'caa', 'slp', 'restecg_1']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    return df
";{0: 0.7883904619970193}
2177;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8723767239136091}
2186;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Additional transformation step
    df['slp'] = np.square(df['slp'])  # Additional transformation step
    # Any further transformations can be implemented for enhancement
    return df
";{0: 0.8921100404971373}
2187;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows
    return df
";{0: 0.5678063902688285}
2189;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)
    df['thall'] = np.power(df['thall'], 2)
    df['slp'] = df['slp'].apply(lambda x: 1 if x > 1 else 0)
    return df
";{0: 0.5636436859724634}
2194;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # No changes made at the moment, waiting for further instruction to improve the function
    return df
";{0: 0.8893322627193596}
2195;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop remaining rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8921100404971373}
2196;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8168241055323341}
2198;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Return the processed dataframe with the five most important columns
    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8701355503741807}
2199;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8921100404971373}
2202;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode of 'sex'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization for 'thalachh'
    return df
";{0: 0.8930320709756193}
2205;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.power(df['caa'], 1/3)  # Updated transformation with cube root
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8921100404971373}
2207;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.sample(frac=1).reset_index(drop=True)
    # Add your additional preprocessing steps here
    return df
";{0: 0.6145276025820127}
2208;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df['age_bins'] = pd.cut(df['age'], bins=[0, 30, 50, 80], labels=['young', 'middle_aged', 'elderly'])  # Bin age into categories
    df = pd.get_dummies(df, columns=['cp', 'restecg', 'age_bins'])  # One-hot encode 'cp', 'restecg', and 'age_bins'
    df.dropna(inplace=True)  # Drop remaining rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.7341175125416268}
2209;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df['slp'] = np.sqrt(df['slp'])
    df['caa'] = np.square(df['caa'])
    return df
";{0: 0.8564965962767435}
2210;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8231858423735252}
2213;"
# Continue the code implementation
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thall'] = (df['thall'] > 1).astype(int)
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8456309548351244}
2217;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8885258111064565}
2219;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex'
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot-encoding on 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['thall'] = np.where(df['thall'] == 2, 1, 0)  # Convert values in 'thall'
    return df
";{0: 0.8685316433159402}
2220;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df['thall'] = np.sqrt(df['thall'])
    df['caa'] = np.cbrt(df['caa'])  # Additional step for another column transformation
    return df
";{0: 0.8638767389587511}
2221;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['thalachh', 'cp_0', 'cp_1', 'restecg_0', 'restecg_1']]  # Select specific columns
    df['thalachh'] = np.square(df['thalachh'])  # Square transform 'thalachh'
    return df
";{0: 0.8029511719707685}
2222;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the most common value
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding categorical columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    # Add more preprocessing steps or feature engineering here
    return df
";{0: 0.8900898384769353}
2224;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Further instructions to improve the function will be implemented here
    return df
";{0: 0.8955822627193596}
2225;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square 'slp'
    # Any further transformations or feature engineering can be added here
    return df
";{0: 0.8830822627193596}
2227;"
    # Fill missing values with mode
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
  
    # Log transform the 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
  
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
  
    # Drop irrelevant and missing value columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
  
    # Convert 'thall' column to binary based on condition
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
  
    # Square root transform the 'slp' column
    df['slp'] = np.sqrt(df['slp'])
  
    return df
";{0: 0.866746484167318}
2229;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Additional preprocessing steps can be added to further enhance the feature selection
    # Perform feature scaling, handle outliers, or conduct dimensionality reduction
    
    return df
";{0: 0.8893322627193596}
2230;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.7775316036250973}
2232;"
# Import libraries as needed
import pandas as pd
import numpy as np

def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Additional instructions to further enhance the function will be added here
    return df
";{0: 0.8955822627193596}
2242;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Adding a new transformation step
    df['slp'] = np.square(df['slp'])  # Another new transformation step
    df['thall'] = np.sqrt(df['thall'])  # Additional transformation
    return df
";{0: 0.867831541218638}
2243;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)  # Fill missing values in 'thalachh' with mean
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    return df
";{0: 0.8208736423909399}
2244;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Modify 'thall' column values
    df.reset_index(drop=True, inplace=True)
    return df
";{0: 0.8657817755211227}
2246;"
    df.fillna(df['caa'].mode()[0], inplace=True)  # Fill missing values with mode of 'caa' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] **= 2  # Square transform 'slp'
    return df
";{0: 0.8231858423735252}
2249;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Additional steps for preprocessing can be added here
    return df
";{0: 0.8857608341479309}
2250;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8885258111064565}
2254;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform 'caa'
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.8860119047619047}
2255;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8231858423735252}
2258;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform
    df['slp'] = np.log1p(df['slp'])  # Log transform
    return df
";{0: 0.8902059881086121}
2262;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['cp_2'] = 0 # Adding a missing column
    return df
";{0: 0.8830986352357322}
2263;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = np.where(df['thall'] == 2, 1, 0)  # Modify 'thall' column
    return df
";{0: 0.8657817755211227}
2264;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for categorical columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8893322627193596}
2265;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = np.sqrt(df['thall'])
    return df
";{0: 0.8712930796801764}
2267;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)  # Fill missing values in 'thalachh' with mean
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    df.drop(['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], axis=1, inplace=True)  # Drop specified columns
    return df
";{0: 0.8168241055323341}
2270;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithmic transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8921100404971373}
2271;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows
    df['thall'] = pd.qcut(df['thall'], q=3, labels=False, duplicates='drop')  # Improved transformation
    return df
";{0: 0.5679527797809335}
2273;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df = df.sample(frac=1).reset_index(drop=True)
    df['thall'] = np.power(df['thall'], 2)
    df['slp'] = df['slp'].apply(lambda x: 1 if x > 1 else 0)
    df.set_index('thalachh', inplace=True)
    return df
";{0: 0.606741828959571}
2276;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    # Enhanced with standardization of 'thalachh'
    return df
";{0: 0.8930320709756193}
2277;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unwanted columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transform 'slp' column
    return df
";{0: 0.8893322627193596}
2280;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.8930320709756193}
2285;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'])  # One-hot encode 'sex', 'cp', and 'restecg'
    df.dropna(inplace=True)  # Drop remaining rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8604558338165343}
2286;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.7666607678565409}
2302;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8885258111064565}
2303;"
    df = df.dropna().reset_index(drop=True)  # Drop rows with missing values and reset index
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8921100404971373}
2307;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Further preprocessing steps can be added here
    
    return df
";{0: 0.8921100404971373}
2310;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop any remaining NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    return df
";{0: 0.8893322627193596}
2311;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8231858423735252}
2314;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['chol', 'trtbps', 'age', 'fbs', 'oldpeak', 'exng'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Add a new transformation step
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows
    return df
";{0: 0.604017081492956}
2315;"
    df = df.dropna().reset_index(drop=True)  
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8921100404971373}
2317;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.872754033307312}
2319;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = np.sqrt(df['thall'])
    df['thalachh'] = np.log1p(df['thalachh'])  # Additional transformation step
    return df
";{0: 0.8614823348694317}
2323;"
    df.fillna(df.mode().iloc[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.8631481415088421}
2328;"
# Continuation of previously defined functions
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Convert 'thall' values
    df = df.sample(frac=1).reset_index(drop=True)  # Shuffle rows
    return df
";{0: 0.5456007912758485}
2338;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8195626550868488}
2339;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square 'slp'
    return df
";{0: 0.8207723325062035}
2345;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    columns_to_keep = ['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']  # Select specific columns to keep
    df.drop(columns=set(df.columns) - set(columns_to_keep), inplace=True)  # Drop columns not in columns_to_keep
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.8231858423735252}
2346;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = np.sqrt(df['thall'])  # Adding a new transformation step
    return df
";{0: 0.8651392335263303}
2347;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.895820532514081}
2348;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'chol', 'oldpeak', 'exng', 'slp']]
    df['chol'] = np.sqrt(df['chol'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.7623266836445953}
2349;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df = df.astype(int)
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8670058447927301}
2355;"
  df = df.dropna().reset_index(drop=True)  
  df.fillna(df.mode().iloc[0], inplace=True)  
  df['thalachh'] = np.log1p(df['thalachh'])  
  df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'])  
  df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
  df['caa'] = np.sqrt(df['caa'])  
  df['slp'] = np.square(df['slp'])  
  return df
";{0: 0.8659259192866198}
2357;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thall'] = np.sqrt(df['thall'])  # Adding one more transformation step in v2
    return df
";{0: 0.8670250896057349}
2360;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = df[['cp_0', 'cp_2', 'thalachh', 'slp', 'caa']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Further data preprocessing and feature engineering can be added here
    return df
";{0: 0.8466825283337037}
2362;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Adding a new transformation step
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa']]  # Select specific columns
    return df
";{0: 0.849647254011048}
2363;"
    # Fill missing values in 'sex' column with the mode
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot-encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Modify 'thall' column
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    
    return df
";{0: 0.869468411465823}
2364;"
    df = df.dropna().reset_index(drop=True)  
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    return df
";{0: 0.8168241055323341}
2368;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill NA values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop any remaining NA values
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    return df
";{0: 0.8231858423735252}
2371;"
    df = df.dropna().reset_index(drop=True)  # Drop rows with NaN values
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8893322627193596}
2372;"
    df = df.dropna().reset_index(drop=True)  # Drop rows with missing values and reset index
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8643986133145308}
2373;"
    df.dropna(inplace=True)  
    df.fillna(df.mode().iloc[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['sex', 'cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.8693981415088421}
2374;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['sex'] = df['sex'].fillna(df['sex'].mode()[0]) 
    return df
";{0: 0.8921100404971373}
2377;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa']]
    return df
";{0: 0.8563139206777146}
2378;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df.reset_index(drop=True, inplace=True)
    df.fillna(0, inplace=True)
    return df
";{0: 0.869468411465823}
2379;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = np.where(df['thall'] == 2, 1, 0)
    df = df.astype(int)
    return df
";{0: 0.8661047732869767}
2382;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Additional preprocessing steps to enhance feature selection can be included
    
    return df
";{0: 0.8893322627193596}
2384;"
    df.fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode of 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization of 'thalachh' values
    return df
";{0: 0.8930320709756193}
2388;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8322719817088323}
2390;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Remove unnecessary columns
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa']]  # Select specific columns
    return df
";{0: 0.8563139206777146}
2394;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # Any further data preprocessing steps
    return df
";{0: 0.8923483102918587}
2398;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Ongoing refinement
    return df
";{0: 0.8921100404971373}
2401;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_2', 'thalachh', 'caa', 'slp', 'restecg_1']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.7919567547781525}
2402;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Implement further feature engineering or transformations as required
    return df
";{0: 0.8921100404971373}
2405;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['cp_2'] = 0  # Adding a missing column
    return df
";{0: 0.8796264130135099}
2409;"
    # Drop rows with NaN values and reset index
    df = df.dropna().reset_index(drop=True)
    
    # Fill missing values in 'sex' column with mode
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    
    # Log transformation for 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop specified columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transformation for 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Square transformation for 'slp'
    df['slp'] = np.square(df['slp'])
    
    return df
";{0: 0.8893322627193596}
2411;"
    df.fillna(df.median(), inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8900898384769353}
2412;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df = pd.concat([df, pd.get_dummies(df['restecg'], prefix='restecg')], axis=1)
    df.dropna(inplace=True)
    columns_to_keep = ['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']
    df = df[columns_to_keep]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8231858423735252}
2416;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.9000885225885226}
2421;"
    df = df.dropna().reset_index(drop=True)  # Drop rows with missing values and reset index
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg' with drop_first
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.8643986133145308}
2426;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)  # Convert 'thall' values
    df = df.astype(int)  # Convert all columns to integers
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df.reset_index(drop=True, inplace=True)  # Reset index of the dataframe
    return df
";{0: 0.8706764797133649}
2430;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding on 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Remove unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    df['slp'] = np.square(df['slp'])  # Square the 'slp' column

    return df  # Return the processed dataset
";{0: 0.8955822627193596}
2433;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df = df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa']]
    return df
";{0: 0.849647254011048}
2435;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' column with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['thall'] = np.where(df['thall'] == 2, 1, 0)  # Convert values in 'thall' column
    df['slp'] = np.sqrt(df['slp'])  # Square root transform 'slp' column
    return df
";{0: 0.866746484167318}
2436;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.8923483102918587}
2438;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thall'] = df['thall'].apply(lambda x: 1 if x == 2 else 0)
    df['slp'] = np.sqrt(df['slp'])
    df.rename(columns={'slp': 'sqrt_slp'}, inplace=True)  # Renaming the column
    return df
";{0: 0.8742406293663812}
2441;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation
    df['slp'] = np.square(df['slp'])  # Square the column values
    return df
";{0: 0.892793801180898}
2443;"
    df = df.dropna().reset_index(drop=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.7740019299696719}
2444;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.reset_index(drop=True, inplace=True)
    df['thall'] = np.square(df['thall'])
    return df
";{0: 0.8705882920769226}
2447;"
    df = df.dropna().reset_index(drop=True)  
    df.fillna(df.mode().iloc[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = df['slp'] ** 2  
    return df
";{0: 0.8955822627193596}
2449;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.8278400695349847}
2450;"
    df = df.dropna(subset=['sex', 'thalachh'])  # Drop rows with missing values in 'sex' and 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg' with drop_first
    df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 80], labels=['young', 'middle_aged', 'elderly'])  # Bin age into categories
    df = pd.get_dummies(df, columns=['age'])  # One-hot encode 'age' categories
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    return df
";{0: 0.7271053943097086}
2457;"
# Completing the function with the improved version
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8728395130781434}
2466;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Further data preprocessing and feature engineering can be added here
    return df
";{0: 0.8885258111064565}
2467;"
    df = df.dropna().reset_index(drop=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8074127112186812}
2471;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8821981524850375}
2473;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh_scaled'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Add a standardized version of 'thalachh'
    return df
";{0: 0.8831221198156683}
2475;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thal'] = df['thall'].apply(lambda x: 1 if x == 0 else 0)  # Binary feature extraction
    return df[['sex', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa', 'thal']]
";{0: 0.6733916529979953}
2478;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with the most common value
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_1', 'thalachh', 'caa', 'slp', 'restecg_0']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    return df
";{0: 0.7627991201627331}
2482;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8921100404971373}
2485;"
    df.fillna(df.mode().iloc[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.cbrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    return df
";{0: 0.8860119047619047}
2486;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    
    return df  
";{0: 0.892793801180898}
2491;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8290612923565066}
2494;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa', 'slp', 'thalachh']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8366825312885598}
2495;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.892793801180898}
2496;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8938385225885226}
2501;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa', 'slp', 'thalachh']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8455455667195487}
2506;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa']) 
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() 
    return df
";{0: 0.8860119047619047}
2508;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']] # Selecting specific columns
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8231858423735252}
2518;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill NaN values with the most common value
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8830822627193596}
2523;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8762155717688505}
2524;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = np.sqrt(df['thall'])  # Additional transformation
    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8699420304708511}
2525;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = df['slp'] ** 2  # Square 'slp'
    return df
";{0: 0.8322719817088323}
2526;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = ((df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() - 0.5) * 2
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.890267094017094}
2533;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation of 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization of 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scaling of 'thalachh'
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardization of one-hot encoded columns
    return df
";{0: 0.8966163003663004}
2535;"
    df.fillna(df.mode().iloc[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df = df[['cp_1', 'thalachh', 'caa', 'slp', 'restecg_0']]  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = df['slp'] ** 2
    return df
";{0: 0.7627991201627331}
2537;"
    df.fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8893322627193596}
2539;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8631295182552702}
2544;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8762155717688505}
2546;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Transform 'slp' column
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()  # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh' column
    return df
";{0: 0.8955822627193596}
2547;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df = df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa', 'slp', 'thalachh']]
    df.dropna(inplace=True)  # Drop rows with missing values
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation
    df['slp'] = np.square(df['slp'])  # Apply square transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scaling
    df = (df - df.mean()) / df.std()  # Standardize the data
    return df
";{0: 0.8392208707914683}
2550;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
2554;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa', 'slp', 'thalachh']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8431341441917857}
2555;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.8930320709756193}
2569;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['cp'] = pd.Categorical(df['cp'].astype(str), categories=['0', '1', '2', '3'], ordered=True)  # Convert 'cp' to ordinal categorical
    df['restecg'] = pd.Categorical(df['restecg'].astype(str), categories=['0', '1', '2'], ordered=True)  # Convert  'restecg' to ordinal categorical
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with any NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Convert 'sex' to binary
    return df
";{0: 0.8787259302628154}
2574;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.7711353162966066}
2576;"
    df.fillna(df['sex'].mode()[0], inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True) 
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True) 
    df['caa'] = np.sqrt(df['caa']) 
    df['slp'] = np.square(df['slp']) 
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() 
    return df
";{0: 0.895820532514081}
2579;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Transform 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    return df
";{0: 0.889570532514081}
2581;"
    df = df.fillna(df.mode().iloc[0])  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop any remaining NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    return df
";{0: 0.892793801180898}
2583;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Adding a new transformation step
    df['slp'] = np.square(df['slp'])  # Another new transformation step
    df['thall'] = np.log1p(df['thall'])  # Including a log transformation for 'thall'
    return df
";{0: 0.8713493007814795}
2584;"
# Improved version of `select_columns_and_return_dataframe_v1`.

def preprocess_data(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8911462148962149}
2585;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'cp_0', 'cp_1', 'cp_3', 'caa']]
    df['caa'] = np.sqrt(df['caa'])
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8000003548364203}
2591;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    # Implement further feature engineering or transformations as required
    return df
";{0: 0.7707519426081482}
2593;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return (df - df.mean()) / df.std()
";{0: 0.863961410453346}
2599;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thall'] = np.log1p(df['thall'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])

    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8736437755792593}
2604;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Transformation step
    df['slp'] = np.square(df['slp'])  # Transformation step
    df['thall'] = np.sqrt(df['thall'])  # Transformation step
    return df
";{0: 0.8706093189964157}
2607;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = (df - df.mean()) / df.std()  # Standardize the data
    return df
";{0: 0.8755318110850897}
2608;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    return (df - df.mean()) / df.std()
";{0: 0.872754033307312}
2609;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # You can continue further feature engineering or transformations here
    return df
";{0: 0.7739601750536688}
2610;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Add any additional data preprocessing steps here to further enhance model performance.
    
    return df
";{0: 0.8866399550270518}
2613;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8938385225885226}
2614;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transform 'slp' column
    # Implement further feature engineering or transformations as required
    return df
";{0: 0.7680400782013684}
2617;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8966163003663004}
2619;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thall'] = np.sqrt(df['thall'])  # Additional transformation
    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8699420304708511}
2622;"
# Continuing from the previous function v1
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp']**2
    # Additional processing instructions or feature engineering can be added here
    return df
";{0: 0.8893322627193596}
2631;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thall'] = np.cbrt(df['thall'])  # Using cube root for transformation in v2
    return df
";{0: 0.8486118455843469}
2632;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thall'] = np.cbrt(df['thall'])  
    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8607060819930995}
2634;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.9000885225885226}
2637;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp']**2
    return df
";{0: 0.8893322627193596}
2640;"
    df.dropna(inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'restecg_0']] 
    df['caa'] = np.sqrt(df['caa']) 
    df['slp'] = np.square(df['slp']) 
    df['thalachh'] = np.log1p(df['thalachh']) 
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min()) 
    return df
";{0: 0.8375351177796301}
2641;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.7719745044308767}
2644;"
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    
    # Transform selected columns
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize the dataframe
    return (df - df.mean()) / df.std()
";{0: 0.8587194749694749}
2647;"
    df.dropna(inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()  
    return df
";{0: 0.8930320709756193}
2648;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = df['slp'] ** 2  # Squaring values
    # Additional processing can be added here
    return df
";{0: 0.8921100404971373}
2649;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())  # Min-Max scale 'oldpeak'
    return df
";{0: 0.7696112489660878}
2652;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing 'sex' values with mode
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    
    # Transformation steps for feature engineering
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])

    return df
";{0: 0.7666607678565409}
2655;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Filling missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Dropping rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Dropping unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Squaring the values
    df['thall'] = np.sqrt(df['thall'])  # Square root transformation for a new feature
    return df
";{0: 0.867831541218638}
2665;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8207723325062035}
2666;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df.drop(columns=['sex', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)  # Drop specific columns
    return df
";{0: 0.8116935483870968}
2668;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8728395130781434}
2669;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df = df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2', 'caa', 'slp', 'thalachh']]
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation
    df['slp'] = np.square(df['slp'])  # Apply square transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scaling
    df = (df - df.mean()) / df.std()  # Standardize the data
    return df
";{0: 0.8431341441917857}
2671;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8207723325062035}
2673;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.7658721584018698}
2676;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = np.sqrt(df['thall'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = np.log1p(df['thalachh'])  # Additional transformation step for thalachh in v2
    return df
";{0: 0.8713037634408602}
2677;"
# Improved version of `select_columns_and_return_dataframe_v2`  - to be completed
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.dropna(inplace=True)  # Remove rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Transform 'slp' column
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()  # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh' column
    df = (df - df.mean()) / df.std()  # Standardize the dataframe
    return df
";{0: 0.879004033307312}
2678;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_2']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8276014267891096}
2679;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = np.sqrt(df['thall'])
    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8672380677668885}
2681;"
    df.dropna(inplace=True)

    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    
    # Transform selected columns
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize the dataframe
    return (df - df.mean()) / df.std()
";{0: 0.8612988400488399}
2684;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = (df - df.mean()) / df.std()  # Standardize the data
    return df
";{0: 0.8700617256150043}
2686;"
    df.dropna(inplace=True)

    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    
    # Transform selected columns
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize the dataframe
    return (df - df.mean()) / df.std()
";{0: 0.8587194749694749}
2687;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Transform 'slp' column
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()  # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh' column
    df = (df - df.mean()) / df.std()  # Standardize the dataframe
    return df
";{0: 0.8762155717688505}
2688;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Further preprocessing steps can be added here for improved model performance.
    
    return df
";{0: 0.8866399550270518}
2694;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Further data preprocessing and feature engineering can be added here
    return df
";{0: 0.8921100404971373}
2702;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.884017094017094}
2706;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Convert 'sex' to binary
    df['cp'] = pd.Categorical(df['cp'].astype(str), categories=['0', '1', '2', '3'], ordered=True)  # Convert 'cp' to ordinal categorical
    df['restecg'] = pd.Categorical(df['restecg'].astype(str), categories=['0', '1', '2'], ordered=True)  # Convert  'restecg' to ordinal categorical
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with any NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]  # Keep only selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.8322719817088323}
2713;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thall'] = np.cbrt(df['thall'])  # Updated transformation
    return df[['thall', 'slp', 'caa', 'cp_0', 'thalachh']]
";{0: 0.8607060819930995}
2715;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Transform 'slp' column
    df['thalachh'] = np.clip((np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std(), -3, 3)  # Clip and standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh' column
    return df
";{0: 0.8921100404971373}
2716;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = pd.concat([df, df['thalachh']], axis=1)  # Duplicate 'thalachh' column
    return df
";{0: 0.8857802591673559}
2717;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())  
    return df
";{0: 0.7696112489660878}
2718;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8873794261294261}
2720;"
    df.fillna(df['caa'].mode()[0], inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['slp'] = np.square(df['slp'])  
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]  
    df['caa'] = np.sqrt(df['caa'])  
    return df
";{0: 0.8231858423735252}
2724;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return (df - df.mean()) / df.std()
";{0: 0.8762155717688505}
2726;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df[['thalachh', 'caa', 'slp', 'cp_0', 'restecg_0']]
";{0: 0.8375351177796301}
2728;"
    df.fillna(df.mean(), inplace=True)

    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with any NA value
    df.dropna(inplace=True)

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)

    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])

    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2

    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()

    return df
";{0: 0.8263987219520006}
2730;"
# Import libraries as needed
import numpy as np
import pandas as pd

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Preprocessing steps
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Standardize the dataframe
    return (df - df.mean()) / df.std()
";{0: 0.863961410453346}
2732;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.9000885225885226}
2734;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.8260142679900746}
2737;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform
    df['slp'] = np.log1p(df['slp'])  # Log transform
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization for 'thalachh'
    return df
";{0: 0.8867852711804325}
2738;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df = (df - df.mean()) / df.std()  # Standardize all columns
    return df
";{0: 0.8755318110850897}
2741;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8866956654456655}
2743;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode categorical columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Transform 'slp' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh' column

    return df
";{0: 0.8893322627193596}
2756;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.763348445523084}
2758;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  # Min-Max scaling 'age'
    return df
";{0: 0.7740843288033402}
2762;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform 'caa' column
    df['slp'] = np.log1p(df['slp'])  # Log transform 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization for 'thalachh' column
    return df
";{0: 0.8833130489582102}
2764;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode of 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['caa'] = np.cbrt(df['caa'])  # Cube root transformation on 'caa'
    df['slp'] = np.log1p(df['slp'])  # Log transformation on 'slp'
    return df
";{0: 0.8867337658863897}
2765;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
2769;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8905074914920845}
2774;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8938385225885226}
2778;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8681003584229391}
2781;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Keeping the transformation step
    df['slp'] = np.square(df['slp'])  # Keeping the transformation step
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Keeping the standardization step
    df.rename(columns={'thalachh': 'max_heart_rate'}, inplace=True)  # Renaming the column for clarity
    return df
";{0: 0.895820532514081}
2782;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop any remaining rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop certain columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    
    return df
";{0: 0.8930320709756193}
2787;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8930320709756193}
2789;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True) 
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min()) 
    df[['thalachh']] = (df[['thalachh']] - df[['thalachh']].mean()) / df[['thalachh']].std()
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8119083818085671}
2796;"
    df = df[['cp', 'thalachh', 'caa', 'slp']]
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8528041486488727}
2800;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transform 'slp' column
    # Implement additional preprocessing steps or feature engineering
    return df
";{0: 0.7666607678565409}
2801;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
2802;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8202479283012071}
2809;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot-encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scaling
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardization for encoded columns
    return df
";{0: 0.9000885225885226}
2810;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    # Further preprocessing to be added based on model performance evaluation
    return df
";{0: 0.8955822627193596}
2812;"
    # Fill missing values with the mean of each column
    df.fillna(df.mean(), inplace=True)
    
    # Perform one-hot encoding on categorical columns 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Apply square root transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in the 'slp' column
    df['slp'] = np.square(df['slp'])
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize and normalize the 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize the one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8966163003663004}
2813;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
2818;"
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Perform one-hot encoding on categorical columns 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Apply square root transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in the 'slp' column
    df['slp'] = np.square(df['slp'])
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize and normalize the 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize the one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8966163003663004}
2819;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with any NA value
    df.dropna(inplace=True)

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)

    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])

    # Square the values in 'slp' column
    df['slp'] = np.square(df['slp'])

    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()

    return df
";{0: 0.8839178876678876}
2820;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8831114360549843}
2837;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True) 
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.8893322627193596}
2838;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]
";{0: 0.7890362511052167}
2841;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    # Continue with any additional preprocessing steps or feature engineering
    return df
";{0: 0.8893322627193596}
2842;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    # Any further data preprocessing steps
    return df
";{0: 0.8923483102918587}
2849;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with the mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transform 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh' column
    return df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]  # Return selected columns
";{0: 0.7890362511052167}
2855;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Take square root of 'caa' column
    df['slp'] = np.square(df['slp'])  # Square the 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh'
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns
    return df
";{0: 0.8966163003663004}
2857;"
    df.fillna(df.mean(), inplace=True)
    
    # Applying log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding categorical columns 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Dropping unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Applying sqrt and square transformations
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardizing and normalizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8973000610500611}
2858;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df.rename(columns={'thalachh': 'max_heart_rate'}, inplace=True)  # Rename 'thalachh' for clarity
    return df
";{0: 0.8930320709756193}
2863;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot-encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scaling
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardization for encoded columns
    return df
";{0: 0.8973000610500611}
2864;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])
    df['slp'] = np.log1p(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.8805352711804325}
2869;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # Min-Max scale with 0-1 range for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
2870;"
    df.fillna(df.mean(), inplace=True)
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Standardization for 'thalachh' into the range 0-1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Standardization for one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8874786324786325}
2875;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'cp_0', 'cp_2', 'cp_3']]
    df['caa'] = np.cbrt(df['caa'])
    df['thalachh'] = np.square(df['thalachh'])
    return df
";{0: 0.8131945602173444}
2877;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    return df
";{0: 0.7685670874240299}
2878;"
    df.fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode of 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['caa'] = np.cbrt(df['caa'])  # Cube root transformation on 'caa'
    df['slp'] = np.log1p(df['slp'])  # Log transformation on 'slp'
    return df
";{0: 0.8839559881086121}
2879;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8874786324786325}
2880;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
2884;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation of 'slp'
    df['thalachh'] = ((df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() - 0.5) * 2  # Adjust and scale 'thalachh'
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardization of one-hot encoded columns
    return df
";{0: 0.8930555555555555}
2886;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['thalachh', 'slp', 'cp_0', 'cp_2', 'sex']]  # Select specific columns
    df['thalachh'] = np.sqrt(df['thalachh'])  # Square root transform 'thalachh'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.8063656068944276}
2888;"
    df.fillna(df.mean(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8911462148962149}
2892;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['cp_2'] = 0
    return df
";{0: 0.8830986352357322}
2894;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.9000885225885226}
2896;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop remaining NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df.rename(columns={'thalachh': 'max_heart_rate'}, inplace=True)  # Rename column for clarity
    return df
";{0: 0.8930320709756193}
2901;"
    # Dropping unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Filling missing values with column mean
    df.fillna(df.mean(), inplace=True)
    
    # Applying log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding categorical columns 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Applying sqrt and square transformations
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardizing and normalizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8973000610500611}
2903;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8973000610500611}
2905;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform
    df['slp'] = np.log1p(df['slp'])  # Log transform
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization for 'thalachh'
    df['slp'] = (df['slp'] - df['slp'].min()) / (df['slp'].max() - df['slp'].min())  # Min-Max scaling for 'slp'
    return df
";{0: 0.8833130489582102}
2906;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation of 'slp'
    df['thalachh'] = ((df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() - 0.5) * 2  # Adjust and scale 'thalachh'
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardization of one-hot encoded columns
    return df
";{0: 0.8803464590964591}
2910;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'slp', 'cp_2', 'sex', 'restecg_2']]
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['slp'] = df['slp'] ** 2
    return df
";{0: 0.7531137502901633}
2915;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform
    df['slp'] = np.log1p(df['slp'])  # Log transform
    df['slp'] = (df['slp'] - df['slp'].mean()) / df['slp'].std()  # Standardize 'slp'
    return df
";{0: 0.871864848530634}
2916;"
    df.dropna(inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df = df[['age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]  
    df['age'] = np.sqrt(df['age'])  
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  
    return df
";{0: 0.7758490566037736}
2918;"
    df.fillna(df.mean(), inplace=True) ## Fill missing values with mean
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8973000610500611}
2920;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8973000610500611}
2922;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = ((df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() - 0.5) * 2
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.819775641025641}
2925;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['age'] = np.sqrt(df['age'])
    return df
";{0: 0.7705129002319117}
2926;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.9000885225885226}
2928;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Perform one-hot encoding on categorical columns 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Apply square root transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in the 'slp' column
    df['slp'] = np.square(df['slp'])
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize and normalize the 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize the one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8938385225885226}
2932;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Filling missing values with column mean
    df.fillna(df.mean(), inplace=True)
    
    # Applying log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding categorical columns 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Applying sqrt and square transformations
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardizing and normalizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.9000885225885226}
2933;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min())
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.890267094017094}
2935;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.9000885225885226}
2937;"
    """"""
    Improved version of `select_columns_and_return_dataframe_v2`.
    """"""
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
2943;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' column
    df['thalachh'] = ((df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() - 0.5) * 2
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8868055555555555}
2945;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df.iloc[:, -4:] = (df.iloc[:, -4:] - df.iloc[:, -4:].mean()) / df.iloc[:, -4:].std()
    return df
";{0: 0.8910500610500611}
2946;"
    df.fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True) 
    df['caa'] = np.expm1(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.8407410197329552}
2948;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8691826047358834}
2950;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    selected_columns = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
    
    return df
";{0: 0.8966163003663004}
2956;"
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    # Fill missing values with column mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalize 'thalachh' column
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min())
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)

    # Apply transformations to columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8973000610500611}
2957;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Perform one-hot-encoding
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transformation for 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Square transformation for 'slp'
    df['slp'] = np.square(df['slp'])
    
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardization for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardization for one-hot-encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.9000885225885226}
2963;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp', 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with any NA value
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transform 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp' column
    df['slp'] = df['slp'] ** 2
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = ((df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean())
                                               / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std())
    
    return df
";{0: 0.8966163003663004}
2969;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with the most common value
    df['thalachh'] = np.log1p(df['thalachh'])  # Logarithm transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding categorical columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    return df
";{0: 0.8893322627193596}
2970;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop selected columns
    df['caa'] = np.sqrt(df['caa'])  # Square root 'caa' feature
    return df
";{0: 0.8872702832499829}
2971;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].std()
    
    return df
";{0: 0.8893303258672111}
2972;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df = df[['cp_0', 'caa', 'restecg_2', 'thalachh', 'cp_2']]  
    df['caa'] = np.sqrt(df['caa'])  
    return df
";{0: 0.8256688923447137}
2975;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.9000885225885226}
2976;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]
";{0: 0.7519831633479035}
2977;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8893303258672111}
2983;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8502052785923755}
2984;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'restecg_2'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8858226495726494}
2988;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df.drop(columns=['sex', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)  # Drop specific columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.8120367047753352}
2992;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform
    df['slp'] = np.log1p(df['slp'])  # Log transform
    return df
";{0: 0.8902059881086121}
2994;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df = df[['sex', 'thalachh', 'cp_2', 'cp_3', 'restecg_0', 'restecg_2', 'caa']]  
    df['caa'] = np.sqrt(df['caa'])  
    return df
";{0: 0.8122509245460066}
2995;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8838087447884444}
2996;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])
    df['slp'] = np.log1p(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['slp'] = (df['slp'] - df['slp'].min()) / (df['slp'].max() - df['slp'].min())
    return df
";{0: 0.8839968096419708}
2997;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['trtbps', 'oldpeak', 'chol', 'fbs'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8158950726692662}
2998;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]
    return df
";{0: 0.7890362511052167}
3001;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    # Additional feature engineering or transformations can be added here
    return df
";{0: 0.7775316036250973}
3007;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.890267094017094}
3009;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with the mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'restecg_2'], inplace=True)  # Remove unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    df['slp'] = np.square(df['slp'])  # Square the values in 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Normalize 'thalachh' column
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns
    return df
";{0: 0.880352564102564}
3010;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8838944030879514}
3013;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unwanted columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transform 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.8930320709756193}
3015;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
3016;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    return df
";{0: 0.8921100404971373}
3017;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]
";{0: 0.7519831633479035}
3019;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.9000885225885226}
3023;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'restecg_2'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Standardizing and normalizing features
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8794734432234431}
3030;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    minmax_scaler = lambda x: (x - x.mean()) / x.std()
    df['thalachh'] = minmax_scaler(minmax_scaler(df['thalachh']))
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = minmax_scaler(df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']])
    
    return df
";{0: 0.8929038811825697}
3032;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    top_cols = ['thalachh', 'cp_1', 'cp_2', 'cp_3', 'restecg_1']
    df = df[top_cols]
    return df
";{0: 0.8048460212089756}
3034;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg' columns with drop_first
    df.dropna(subset=['caa'], inplace=True)  # Drop rows with missing values in 'caa' column
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Take square root of 'caa' column
    df['slp'] = np.square(df['slp'])  # Square the 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh'
    return df
";{0: 0.8716845878136201}
3045;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8576179564016687}
3054;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    # Further feature engineering can be added here
    return df
";{0: 0.8845663205460201}
3055;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['cp'] = pd.Categorical(df['cp'].astype(str), categories=['0', '1', '2', '3'], ordered=True)
    df['restecg'] = pd.Categorical(df['restecg'].astype(str), categories=['0', '1', '2'], ordered=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8787259302628154}
3056;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform
    df['slp'] = np.log1p(df['slp'])  # Log transform
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization for 'thalachh'
    # Add more feature engineering steps if needed
    return df
";{0: 0.8839968096419708}
3057;"
# Function to preprocess the dataset and return a dataframe with the FIVE most important columns
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.mean(), inplace=True)  # Fill missing values with the mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Remove unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    df['slp'] = np.square(df['slp'])  # Square the values in 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Normalize 'thalachh' values
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns
    return df
";{0: 0.8973000610500611}
3060;"
    df.fillna(df.median(), inplace=True)  # Fill NA values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    # Further feature engineering can be added here
    return df
";{0: 0.8838087447884444}
3062;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8755318110850897}
3063;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'restecg_2'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa'
    df['slp'] = np.square(df['slp'])  # Square the 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Normalize 'thalachh'
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns
    return df
";{0: 0.8830448717948718}
3066;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.cbrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.8893322627193596}
3067;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.min(np.log1p(df['thalachh']))) / (np.max(np.log1p(df['thalachh'])) - np.min(np.log1p(df['thalachh'])))
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
3069;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(subset=['caa'], inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8681003584229391}
3071;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8966163003663004}
3075;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8830803258672111}
3076;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode categorical columns
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh' column
    df['oldpeak'] = df['oldpeak'] ** 2  # Square the 'oldpeak' column
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  # Min-Max scaling for 'age'
    df.drop(columns=['sex', 'fbs', 'chol', 'trtbps', 'caa', 'slp', 'thall'], inplace=True)  # Drop irrelevant columns
    return df
";{0: 0.7459956085013071}
3080;"
    df.fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values in 'sex' with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square 'slp'
    # Add further transformations or feature engineering here
    return df
";{0: 0.892793801180898}
3081;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' and 'slp'
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8930320709756193}
3082;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8762155717688505}
3087;"
    df.dropna(inplace=True)
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
3095;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with the mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding on 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transform 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scale 'thalachh' column
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns
    return df
";{0: 0.8966163003663004}
3100;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8973000610500611}
3101;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with the mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa' column
    df['slp'] = np.square(df['slp'])  # Square the values in 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Normalize 'thalachh' values
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns
    return df
";{0: 0.8550796168987602}
3105;"
# Continue building upon the preprocessing steps for the dataset

    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Remove unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Take square root of 'caa'
    df['slp'] = df['slp'] ** 2  # Square 'slp'

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].std()

    return df
";{0: 0.8822738742543079}
3106;"
    df = df.fillna(df.mode().iloc[0])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp']) 
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() 
    df.rename(columns={'thalachh': 'max_heart_rate'}, inplace=True)  
    return df
";{0: 0.8923483102918587}
3107;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df = df[['sex', 'thalachh', 'cp_2', 'cp_3', 'restecg_0', 'restecg_2', 'caa']]
    df['caa'] = np.sqrt(df['caa'])
    # Further feature engineering can be added here
    return df
";{0: 0.8143673266624086}
3108;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Take square root of 'caa' column
    df['slp'] = np.square(df['slp'])  # Square the 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh'
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
3114;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8893303258672111}
3115;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['age', 'sex', 'fbs', 'trtbps', 'chol', 'oldpeak', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] **= 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8677422395455181}
3122;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = df['slp'] ** 2  # Square 'slp'
    return df
";{0: 0.8322719817088323}
3134;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8760784690220174}
3135;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].std()
    
    return df
";{0: 0.8830803258672111}
3137;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
3138;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform
    df['slp'] = np.log1p(df['slp'])  # Log transform
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization for 'thalachh'
    # Additional feature engineering steps can be added here
    return df
";{0: 0.8839968096419708}
3141;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.9000885225885226}
3150;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_1', 'thalachh', 'caa', 'slp', 'restecg_0']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    return df
";{0: 0.7326629582120924}
3153;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform 'caa'
    df['slp'] = np.log1p(df['slp'])  # Log transform 'slp'
    df['chol'] = np.sqrt(df['chol'])  # Square root transform 'chol'
    return df
";{0: 0.779214358877374}
3155;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['age'] = np.sqrt(df['age'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional feature engineering steps can be added here
    return df
";{0: 0.7672269841915532}
3162;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['thalachh', 'cp_0', 'cp_1', 'cp_3', 'caa', 'sex']]  # Select specific columns including 'sex'
    df['caa'] = np.sqrt(df['caa'])  # Square root 'caa' feature
    return df
";{0: 0.8421853567763039}
3175;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.889570532514081}
3183;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['cp_1', 'thalachh', 'caa', 'slp', 'restecg_0']]  # Select specific columns including 'restecg_0'
    df['caa'] = np.sqrt(df['caa'])  # Square root 'caa' feature
    df['slp'] = df['slp'] ** 2  # Square 'slp' feature
    return df
";{0: 0.7326629582120924}
3186;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Remove unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Take square root of 'caa'
    df['slp'] = df['slp'] ** 2  # Square 'slp'

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    return df
";{0: 0.8653353814644138}
3188;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
3190;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df = df[['age', 'sex', 'cp_2', 'cp_3', 'restecg_0', 'restecg_2', 'caa']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    return df
";{0: 0.7444351833904073}
3194;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # Min-max scale for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]
";{0: 0.7890362511052167}
3199;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8829533239984059}
3203;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill NA values with mode
    
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    
    df.dropna(inplace=True)  # Drop rows with missing values
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    
    # Additional feature engineering or processing can be added here
    
    return df
";{0: 0.8893322627193596}
3204;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df[['caa', 'slp']] = df[['caa', 'slp']].apply(np.sqrt)  # Square root transform 'caa' and 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.766462898319104}
3205;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    return df
";{0: 0.880237316217016}
3207;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8238193568726355}
3210;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8905074914920845}
3211;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # Further data preprocessing if needed
    return df
";{0: 0.8868782248217733}
3213;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    # Additional feature engineering or data processing can be included here
    return df
";{0: 0.8845663205460201}
3214;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encoding with dropping first column
    df.dropna(inplace=True)  # Drop remaining rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()  # Standardization for specific columns
    return df
";{0: 0.8872832722832722}
3221;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    scaler = lambda x: (x - x.mean()) / x.std()
    df['thalachh'] = scaler(df['thalachh'])
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = scaler(df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']])
    
    return df
";{0: 0.8908547008547008}
3222;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.892793801180898}
3223;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df.rename(columns={'thalachh': 'max_heart_rate'}, inplace=True)  
    return df
";{0: 0.889570532514081}
3226;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' and 'slp'
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8973000610500611}
3231;"
    df.fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode of 'sex'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' with added 1 for values less than/equal to zero
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.892793801180898}
3232;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thall'] = np.log1p(df['thall'])
    return df
";{0: 0.8563740355244803}
3235;"
    df.fillna(df.mean(), inplace=True)
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Min-Max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Standardization for one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8838944030879514}
3237;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
3243;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.895820532514081}
3248;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.776826788726734}
3251;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.7671805140367196}
3266;"
    df.fillna(df.mean(), inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    return df
";{0: 0.8643986133145308}
3271;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    return df
";{0: 0.8811294261294261}
3273;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    return df
";{0: 0.892793801180898}
3274;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' and 'slp' columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scale 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()

    return df
";{0: 0.8875885225885225}
3275;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' and 'slp' columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scale 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    one_hot_cols = [col for col in df.columns if 'cp_' in col or 'restecg_' in col]
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()

    return df
";{0: 0.8893303258672111}
3276;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    columns_to_standardize = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
    
    return df
";{0: 0.8893303258672111}
3279;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thal_packed'] = df['thall'].apply(lambda x: 1 if x > 1 else 0)  # Create modified feature
    return df
";{0: 0.8836985236985238}
3280;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill missing values with mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df = df[['sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]  # Select only the specified columns
    return df
";{0: 0.7812834224598931}
3284;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8830803258672111}
3285;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns and adjust column values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8938385225885226}
3286;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] **= 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8829533239984059}
3291;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
    return df
";{0: 0.8528041486488727}
3294;"
    df.fillna(df.mean(), inplace=True)
    df.drop(['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], axis=1, inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    return df
";{0: 0.8716845878136201}
3297;"
    # Fill NaN values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Apply sqrt transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Apply square transformation to 'slp' column
    df['slp'] = np.square(df['slp'])
    
    # Min-max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8930320709756193}
3298;"
    df.fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode of 'sex' column
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    df = (df - df.mean()) / df.std()  # Standardization
    return df
";{0: 0.8755318110850897}
3300;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Apply sqrt transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Apply square transformation to 'slp' column
    df['slp'] = np.square(df['slp'])
    
    # Min-max scale 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize 'cp' columns
    cp_cols = [col for col in df.columns if col.startswith('cp_')]
    df[cp_cols] = (df[cp_cols] - df[cp_cols].mean()) / df[cp_cols].std()
    
    return df
";{0: 0.9000885225885226}
3301;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using Min-Max Scaling
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8790188977688977}
3302;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8867500350287235}
3303;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    one_hot_cols = [col for col in df.columns if 'cp_' in col or 'restecg_' in col]
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()

    return df
";{0: 0.8865418643287496}
3307;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    cp_cols = [col for col in df.columns if col.startswith('cp_')]
    df[cp_cols] = (df[cp_cols] - df[cp_cols].mean()) / df[cp_cols].std()
    
    return df
";{0: 0.8938385225885226}
3310;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8874786324786325}
3317;"
    df.fillna(df.mean(), inplace=True)
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    # Drop NA values
    df.dropna(inplace=True)
    # Drop columns 'exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    # Square root transform of 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    # Square transform of 'slp' column
    df['slp'] = np.square(df['slp'])
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # Min-Max scaling of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Standardize 'cp' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()

    return df
";{0: 0.9000885225885226}
3318;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())  
    df['age'] = np.log1p(df['age'])  # Log transform 'age'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as binary
    return df
";{0: 0.764546850998464}
3320;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' and 'slp' columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize/Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8893322627193596}
3322;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode of 'sex'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.8930320709756193}
3327;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.885858103644989}
3338;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' and 'slp'
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.872754033307312}
3341;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scaling
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardization
    return df
";{0: 0.8973000610500611}
3342;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8972039072039072}
3343;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8822738742543079}
3355;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    normalized_cols = ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[normalized_cols] = (df[normalized_cols] - df[normalized_cols].mean()) / df[normalized_cols].std()
    return df
";{0: 0.8972039072039072}
3357;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8755318110850897}
3360;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode with drop_first
    df.dropna(subset=['caa'], inplace=True)  # Drop missing values in 'caa'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = df['slp'] ** 2  # Square 'slp'
    scaler = lambda x: (x - x.mean()) / x.std()  # Standardization function
    df['thalachh'] = scaler(df['thalachh'])  # Standardize 'thalachh'
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = scaler(df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']])  # Standardize selected columns
    return df
";{0: 0.8863465041333892}
3361;"
    df.fillna(df.median(), inplace=True) # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True) # One-hot encode 'cp' and 'restecg' columns with drop_first
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True) # Drop specified columns
    df['caa'] = np.sqrt(df['caa']) # Square root transformation of 'caa' column
    df['slp'] = np.square(df['slp']) # Square transformation of 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min()) # Min-max scale 'thalachh' column
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std() # Standardize one-hot encoded columns
    return df
";{0: 0.8868057463836763}
3369;"
    df.fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = (df - df.mean()) / df.std()  # Standardization
    return df
";{0: 0.8755318110850897}
3375;"
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Logarithmic transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping NA values
    df.dropna(inplace=True)
    
    # Dropping unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transformation
    df['caa'] = np.sqrt(df['caa'])
    
    # Square transformation
    df['slp'] = np.square(df['slp'])
    
    # Min-Max scaling
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Standardizing one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8965201465201466}
3377;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    df['restecg'] = df['restecg'].map({0: 'Normal', 1: 'ST-T wave normality', 2: 'Left ventricular hypertrophy'})
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: -1}
3379;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' with drop_first=True
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    cols_to_standardize = ['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']
    df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
    
    return df
";{0: 0.8811294261294261}
3386;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    selected_columns = ['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8431341441917857}
3391;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())  
    # Add any other preprocessing steps here
    return df
";{0: 0.7724361077231499}
3392;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.9000885225885226}
3403;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.8921100404971373}
3407;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.885858103644989}
3408;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    # Add any additional preprocessing steps here
    return df
";{0: 0.8845663205460201}
3410;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())  
    df = df[['age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
    return df
";{0: 0.7302781015281015}
3411;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
3419;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8865418643287496}
3421;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.cbrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.8921100404971373}
3427;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    for col in ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8635519319390287}
3428;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Add more feature engineering or transformations here
    return df
";{0: 0.8857608341479309}
3434;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8719475816944089}
3436;"
    df.fillna(df.mode().iloc[0], inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_1', 'thalachh', 'caa', 'slp', 'restecg_0']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = np.log1p(df['thalachh'])  
    return df
";{0: 0.7506722544910913}
3437;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any additional feature engineering steps here for better performance
    return df
";{0: 0.8860214375788147}
3443;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encoding for 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation on 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation on 'slp'
    return df
";{0: 0.8830822627193596}
3444;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
3446;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8973000610500611}
3447;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    for col in ['cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8938385225885226}
3449;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transform 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.7644686496299399}
3452;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize and normalize features
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8865418643287496}
3454;"
    df.fillna(df.median(), inplace=True)  # Fill NA values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    # Additional feature engineering steps go here
    return df
";{0: 0.8106563954421441}
3455;"
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8877425145335593}
3456;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalize features
    for col in df.columns:
        if col not in ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
            df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8642655367231639}
3460;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    
    # Standardization and normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8838379016247868}
3461;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalizing and standardizing the features
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.885858103644989}
3462;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode certain columns
    df.dropna(subset=['caa'], inplace=True)  # Drop missing values in 'caa' column
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = df['slp'] ** 2  # Square transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh'
    return df
";{0: 0.8653353814644138}
3470;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    for col in ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8563236047107015}
3471;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    for col in df.filter(regex='cp_|restecg_').columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8838379016247868}
3474;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])

    # Min-Max scaling for non-binary columns
    for col in df.columns:
        if col not in ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
            df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8614877589453862}
3476;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding categorical columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    # More feature engineering can be added here
    return df
";{0: 0.8893322627193596}
3480;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' and 'slp'
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].std()
    
    return df
";{0: 0.8865418643287496}
3483;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unwanted columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.8930320709756193}
3484;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8938385225885226}
3485;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.885858103644989}
3486;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])

    # Standardize 'thalachh' feature and normalize dummy columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()

    return df
";{0: 0.890267094017094}
3488;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].std()
    return df
";{0: 0.885858103644989}
3489;"
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], axis=1, inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8933631234328567}
3491;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['age', 'sex', 'thalachh', 'restecg_1', 'restecg_2']]  # Select specific columns
    df['age'] = np.sqrt(df['age'])  # Square root 'age' feature
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)  # Convert 'sex' to binary
    return df
";{0: 0.6999413278511318}
3494;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['age'] = np.sqrt(df['age'])
    df['trtbps'] = (df['trtbps'] - df['trtbps'].mean()) / df['trtbps'].std()
    return df
";{0: 0.8020370863700764}
3496;"
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation for 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation for 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation for 'slp'
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scaling for 'thalachh'
    
    for col in df.filter(regex='cp_|restecg_').columns:  # Standardization for one-hot encoded columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8865418643287496}
3499;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'restecg_0', 'restecg_1']]
    return df
";{0: 0.8360115165403373}
3504;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with the mode
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation on 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unwanted columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df.rename(columns={'thalachh': 'max_heart_rate'}, inplace=True)  # Rename column for better understanding
    return df
";{0: 0.889570532514081}
3508;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scale 'caa'
    # Implement any extra preprocessing if needed
    return df
";{0: 0.8775587447884444}
3512;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.mean(), inplace=True)
    
    # Log transform 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Apply transformations to selected columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Min-Max scaling for non-binary columns
    for col in df.columns:
        if col not in ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
            df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8649492974069245}
3518;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2']] = (df[['cp_0', 'cp_1', 'cp_2']] - df[['cp_0', 'cp_1', 'cp_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2']].std()
    return df
";{0: 0.8930213872149355}
3520;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    for col in df.columns:
        if col not in ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
            df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8677377589453862}
3523;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(subset=['caa'], inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    scaler = lambda x: (x - x.mean()) / x.std()
    df['thalachh'] = scaler(df['thalachh'])
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = scaler(df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']])
    return df
";{0: 0.8999923687423687}
3524;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8872832722832722}
3526;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop remaining rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = np.square(df['slp'])  # Square transformation
    df['thalachh'] = ((df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scaling
    cols_to_normalize = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()  # Standardization for specific columns
    return df
";{0: 0.8911462148962149}
3528;"
# Continue improvements for data preprocessing
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Fill NaN values with the mean of the column
    df.fillna(df.mean(), inplace=True)
    
    # Applying logarithmic transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Dropping less important columns from the dataset
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Applying modifications to certain columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8755318110850897}
3529;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    # Additional feature engineering or data processing can be included here
    return df
";{0: 0.8921100404971373}
3535;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])

    # Normalizing and standardizing the features
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0',
                                                                                        'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1',
                                                                                        'cp_2', 'cp_3', 'restecg_0', 'restecg_1',
                                                                                        'restecg_2']].mean()) / df[['cp_0', 'cp_1',
                                                                                        'cp_2', 'cp_3', 'restecg_0', 'restecg_1',
                                                                                        'restecg_2']].std()
    
    return df
";{0: 0.8868055555555555}
3540;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8830803258672111}
3541;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    one_hot_columns = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']
    df[one_hot_columns] = (df[one_hot_columns] - df[one_hot_columns].mean()) / df[one_hot_columns].std()
    
    return df
";{0: 0.9000885225885226}
3542;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    columns_to_standardize = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
    
    return df
";{0: 0.8893303258672111}
3543;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Add more preprocessing steps or feature engineering here
    return df
";{0: 0.8900898384769353}
3545;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8938385225885226}
3548;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8691826047358834}
3550;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    for col in df.columns:
        if col not in ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
            df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8642655367231639}
3555;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8893322627193596}
3558;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns and adjust column values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].std()
    
    return df
";{0: 0.8830803258672111}
3560;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  
    df[['restecg_1', 'restecg_2', 'cp_1', 'cp_2', 'cp_3']] = (df[['restecg_1', 'restecg_2', 'cp_1', 'cp_2', 'cp_3']] - df[['restecg_1', 'restecg_2', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['restecg_1', 'restecg_2', 'cp_1', 'cp_2', 'cp_3']].std()    
    return df
";{0: 0.884800061050061}
3565;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalize all features in the dataset
    for col in df.columns:
        if col not in ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
            df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8677377589453862}
3567;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    
    selected_columns = ['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8392208707914683}
3570;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.895820532514081}
3571;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    std_cols = ['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']
    df[std_cols] = (df[std_cols] - df[std_cols].mean()) / df[std_cols].std()
    
    return df
";{0: 0.8811294261294261}
3573;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # Enhanced with standardization of 'thalachh'
    return df
";{0: 0.8859991039426524}
3577;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()

    return df
";{0: 0.8930555555555555}
3579;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize and normalize features
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.879004033307312}
3581;"
    df.fillna(df['caa'].mode()[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['slp'] = np.square(df['slp'])
    df = df[['caa', 'age', 'cp_0', 'cp_2', 'restecg_0']]
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.7407105606258148}
3582;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8867500350287235}
3583;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['age', 'sex', 'fbs', 'trtbps', 'chol', 'oldpeak', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] **= 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8595791708291708}
3584;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])

    for col in ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.890267094017094}
3585;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8872832722832722}
3587;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thal_packed'] = df['thall'].apply(lambda x: 1 if x > 1 else 0)
    df.drop(columns=['thall'], inplace=True)
    return df
";{0: 0.8439177549319256}
3588;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thal_packed'] = df['thall'].apply(lambda x: 1 if x > 1 else 0)
    df.drop(columns=['thall'], inplace=True)
    return df
";{0: 0.840075947022321}
3589;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    selected_columns = ['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8609695143566112}
3591;"
    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # One-hot encoding 'cp' and 'restecg' columns dropping the first for each
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Dropping unnecessary columns
    df.drop(['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], axis=1, inplace=True)
    
    # Transformation on 'caa' and 'slp' columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Min-max scaling on 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing 'cp_1', 'cp_2', 'cp_3' columns
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
  
    return df
";{0: 0.8868057463836763}
3594;"
    df.fillna(df.mean(), inplace=True) # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encoding
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True) # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa']) # Square root transformation
    df['slp'] = np.square(df['slp']) # Square transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min()) # Min-max scaling
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std() # Standardization for dummy columns
    return df
";{0: 0.8973000610500611}
3595;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    std_cols = ['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']
    df[std_cols] = (df[std_cols] - df[std_cols].mean()) / df[std_cols].std()
    return df
";{0: 0.8874786324786325}
3598;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    # Advanced data preprocessing and feature engineering steps can be incorporated here
    return df
";{0: 0.8838087447884444}
3608;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    return df
";{0: 0.8716845878136201}
3609;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[df.select_dtypes(include=['uint8']).columns] = (df.select_dtypes(include=['uint8']) - df.select_dtypes(include=['uint8']).mean()) / df.select_dtypes(include=['uint8']).std()
    return df
";{0: 0.8885258111064565}
3612;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(subset=['caa'], inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8681003584229391}
3615;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df.dropna(inplace=True) # Drop rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encoding
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation
    df['caa'] = np.sqrt(df['caa']) # Square root transformation
    df['slp'] = np.square(df['slp']) # Square transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min()) # Min-max scaling
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True) # Drop irrelevant columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std() # Standardization for dummy columns
    return df
";{0: 0.8966163003663004}
3616;"
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.9000885225885226}
3624;"
    df.dropna(inplace=True)
    df.fillna(df.mean(), inplace=True)
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    # Min-Max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardization for one-hot encoded columns
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8795088972957826}
3625;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Remove unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Take square root of 'caa'
    df['slp'] = df['slp'] ** 2  # Square 'slp'

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].std()

    return df
";{0: 0.8893303258672111}
3626;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    columns_to_standardize = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
    
    return df
";{0: 0.8830803258672111}
3629;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])
    df['slp'] = np.log1p(df['slp'])
    return df
";{0: 0.8839559881086121}
3634;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform 'caa'
    df['slp'] = np.square(df['slp'])
    df[['thalachh']] = (df[['thalachh']] - df[['thalachh']].mean()) / df[['thalachh']].std()
    return df
";{0: 0.8797619047619047}
3636;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8893303258672111}
3637;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8830803258672111}
3642;"
    df.fillna(df.median(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df = df[['cp_0', 'thalachh', 'caa', 'restecg_0', 'restecg_1']]
    return df
";{0: 0.8432614160033515}
3644;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation on 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding on 'cp' and 'restecg' with drop_first
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Square root transformation on 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Square 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df.loc[:, df.columns.str.startswith('cp_') | df.columns.str.startswith('restecg_')] = (df.loc[:, df.columns.str.startswith('cp_') | df.columns.str.startswith('restecg_')] - df.loc[:, df.columns.str.startswith('cp_') | df.columns.str.startswith('restecg_')].mean()) / df.loc[:, df.columns.str.startswith('cp_') | df.columns.str.startswith('restecg_')].std()
    
    return df
";{0: 0.8811294261294261}
3647;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8811294261294261}
3648;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.885858103644989}
3649;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.885858103644989}
3651;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    # Min-Max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8874786324786325}
3653;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8811294261294261}
3658;"
    df.dropna(inplace=True)
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    return df
";{0: 0.8856855644355643}
3659;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  # Min-Max scaling 'age'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    return df
";{0: 0.8848565055016667}
3661;"
    df.fillna(df.mean(), inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8937423687423687}
3662;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['cp', 'restecg'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    return df
";{0: 0.8930320709756193}
3668;"
    df.fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thall'] = np.cbrt(df['thall'])  # Cube root transform 'thall'
    return df
";{0: 0.8459195378920393}
3669;"
    df.fillna(df.mean(), inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df['thalachh'] = (df['thalachh'] - np.nanmin(df['thalachh'])) / (np.nanmax(df['thalachh']) - np.nanmin(df['thalachh']))
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    return df
";{0: 0.892793801180898}
3670;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop any remaining NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    return df
";{0: 0.8845663205460201}
3674;"
    df.fillna(df.mean(), inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.cbrt(df['caa'])  
    df['slp'] = np.log1p(df['slp'])  
    df['chol'] = np.sqrt(df['chol'])  
    df = df[['thalachh', 'caa', 'slp', 'chol', 'sex']]  # Change column selection  
    return df
";{0: 0.7695522857626437}
3679;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    df['thall'] = np.where(df['thall'] == 0, 'zero', 'three')
    df = pd.get_dummies(df, columns=['thall'])
    return df
";{0: 0.673783922171019}
3688;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns and adjust column values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8260142679900746}
3689;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)
    df = df[['thalachh', 'cp_0', 'cp_1', 'cp_3', 'caa', 'sex']]  
    df['caa'] = np.sqrt(df['caa'])
    # Additional feature engineering can be implemented here
    return df
";{0: 0.8459743992750237}
3692;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    # Add any additional preprocessing steps here
    return df
";{0: 0.8775587447884444}
3696;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thal_packed'] = df['thall'].apply(lambda x: 1 if x > 1 else 0)
    df.drop(columns=['thall'], inplace=True)
    # Add any further feature engineering steps for improved model training
    return df
";{0: 0.840075947022321}
3700;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df = pd.concat([df, pd.get_dummies(df['restecg'], prefix='restecg')], axis=1)
    df.drop(columns=['cp', 'restecg'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    return df
";{0: 0.8923483102918587}
3701;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Feature engineering steps
    df['caa'] = np.sqrt(df['caa'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Add any additional feature engineering steps here for better performance
    return df
";{0: 0.8794640605296344}
3706;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    
    # Selecting the five most important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing 'cp' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8938385225885226}
3707;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['cp_2'] = df.pop('cp_2')
    return df
";{0: 0.8838087447884444}
3709;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    return df
";{0: 0.7573305472117018}
3710;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['cp_0', 'cp_1', 'thalachh', 'caa', 'slp']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square 'slp'
    return df
";{0: 0.8322719817088323}
3711;"
    df = df.fillna(df.mean())
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df.dropna()
    df = df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8938385225885226}
3712;"
    df = df.fillna(df.mean())
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df.dropna()
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.861531229801986}
3720;"
    df = df.fillna(df.mean())
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df = df.dropna()
    
    selected_columns = ['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    for col in ['cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8550796168987602}
3722;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'cp_0', 'cp_1', 'cp_3', 'caa', 'sex']]
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8459743992750237}
3723;"
    df.fillna(df.mode().iloc[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.cbrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.8893322627193596}
3724;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    return df
";{0: 0.8900898384769353}
3725;"
    df.fillna(df.mean(), inplace=True) 
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8589710659514995}
3730;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation on 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Feature scaling 'caa' and 'slp' columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing 'cp' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.890267094017094}
3732;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = df[['thalachh', 'cp_0', 'cp_1', 'cp_3', 'caa', 'sex']]
    df['caa'] = np.sqrt(df['caa'])
    return df
";{0: 0.8459743992750237}
3735;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  # Fill missing values with mode
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scale 'caa'
    return df
";{0: 0.880783661957644}
3736;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    return df
";{0: 0.8923483102918587}
3737;"
    df.fillna(df.mean(), inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    return df
";{0: 0.8955822627193596}
3739;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation of 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    # Dropping less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Squareroot transformation for 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Squaring transformation for 'slp' column
    df['slp'] = np.square(df['slp'])
    
    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing 'cp' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8938385225885226}
3742;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8121572914994918}
3746;"
    df.dropna(inplace=True)  # Remove rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transform 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh' column
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns
    return df
";{0: 0.9000885225885226}
3747;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.square(df['caa'])  # Updated transformation with square
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8581535404486222}
3749;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(subset=['caa'], inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    scaler = lambda x: (x - x.mean()) / x.std()
    df[['thalachh']] = scaler(df[['thalachh']])
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = scaler(df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']])
    return df
";{0: 0.8863465041333892}
3750;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8790188977688977}
3756;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Creating dummy variables for categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    
    # Dropping unrelated columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    # Applying mathematical transformations to columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Normalizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing 'cp' columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8938385225885226}
3757;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df = df[['age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
    return df
";{0: 0.7302781015281015}
3759;"
    df = df.fillna(df.mean())  # Fill missing values with column mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df = df.dropna()  # Drop rows with missing values

    selected_columns = ['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df = df[selected_columns]  # Select specified columns

    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa'
    df['slp'] = np.square(df['slp'])  # Square transformation of 'slp'

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization of 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scaling of 'thalachh'

    for col in ['cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardization of one-hot encoded columns

    return df
";{0: 0.8602409072213408}
3761;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'sex', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8760784690220174}
3765;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.8966163003663004}
3769;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df = df[['cp', 'thalachh', 'caa', 'slp']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8283000997008972}
3770;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'], prefix=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    return df
";{0: 0.895820532514081}
3772;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['caa'] = np.sqrt(df['caa'])  # Square root 'caa' feature
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = (df - df.mean()) / df.std()  # Standardize the data
    return df
";{0: 0.8638767389587511}
3779;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any additional preprocessing steps
    return df
";{0: 0.8899827538024871}
3782;"
    df.drop(columns=['fbs', 'oldpeak', 'exng', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]  # Select specific columns
    df['slp'] = np.square(df['slp'])  # Square feature 'slp'
    return df
";{0: 0.8231858423735252}
3784;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True) 
    df['caa'] = np.sqrt(df['caa']) 
    df['slp'] = np.square(df['slp'])  
    return df
";{0: 0.8893322627193596}
3786;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[df.select_dtypes(include=['uint8']).columns] = (df.select_dtypes(include=['uint8']) - df.select_dtypes(include=['uint8']).mean()) / df.select_dtypes(include=['uint8']).std()
    return df
";{0: 0.892793801180898}
3787;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['slp'] = np.square(df['slp'])  # Square 'slp'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop selected columns
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_3']]  # Select specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root 'caa'
    return df
";{0: 0.8231858423735252}
3789;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8893322627193596}
3792;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])
    df['slp'] = np.log1p(df['slp'])
    df['slp'] = (df['slp'] - df['slp'].mean()) / df['slp'].std()
    return df
";{0: 0.8054301527252348}
3793;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns with drop_first=True
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Square values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8811294261294261}
3795;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    standard_scaler = lambda x: (x - x.mean()) / x.std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = standard_scaler(df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']])
    
    return df
";{0: 0.8900482492417975}
3801;"
    df = df.fillna(df.mean()) # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh']) # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode categorical columns
    df = df.dropna() # Drop rows with missing values
    df = df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age']) # Drop unrelated columns
    df['caa'] = np.sqrt(df['caa']) # Square root transform 'caa' column
    df['slp'] = np.square(df['slp']) # Square transform 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min()) # Min-Max scale 'thalachh' column
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std() # Standardize 'cp' columns
    return df
";{0: 0.8938385225885226}
3806;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.8494799929490569}
3807;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min())
    return df
";{0: 0.8921100404971373}
3809;"
    df.fillna(df.mean(), inplace=True)
    
    # Applying log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Dropping irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transforming 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Squaring the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardizing 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8874786324786325}
3810;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    # Add any additional processing steps here
    return df
";{0: 0.8811164370961369}
3811;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8893303258672111}
3812;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
3813;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.8339175543300344}
3816;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    # Min-max scaling 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardizing one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8903460159911774}
3818;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    for col in ['cp_1', 'cp_2', 'cp_3', 'restecg_1']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8867608332527688}
3822;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['caa'] = np.cbrt(df['caa'])  # Cube root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square transform 'slp'
    return df
";{0: 0.7735573195806789}
3825;"
    df.fillna(df.mean(), inplace=True)
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    # Dropping columns 'exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    # One-hot encoding for 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    # Square root transformation for 'caa' and squaring 'slp'
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Min-max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Standardization for 'thalachh' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8999923687423687}
3826;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.cbrt(df['caa'])
    df['slp'] = np.log1p(df['slp'])
    df['chol'] = np.sqrt(df['chol'])
    return df
";{0: 0.7764089819048434}
3827;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min())
    return df
";{0: 0.831509511993383}
3828;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.cbrt(df['caa'])  
    df['slp'] = np.log1p(df['slp'])  
    df.rename(columns={'cp_0': 'Typical Angina', 'cp_1': 'Atypical Angina', 'cp_2': 'Non-anginal Pain', 'cp_3': 'Asymptomatic',
                       'restecg_0': 'Normal', 'restecg_1': 'ST-T wave normality', 'restecg_2': 'Left ventricular hypertrophy'}, inplace=True)
    return df
";{0: -1}
3830;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with column mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with NaN values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa' column
    df['slp'] = np.square(df['slp'])  # Square transformation of 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization of 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scaling of 'thalachh'
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns

    return df
";{0: 0.8930320709756193}
3832;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8866399550270518}
3833;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    return df
";{0: 0.8543627710206241}
3838;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['caa'] = np.sqrt(df['caa'])
    # Additional data preprocessing steps and feature selection can be added here
    return df
";{0: 0.8345997717521634}
3840;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8999923687423687}
3842;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(subset=['caa'], inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    minmax_scaler = lambda x: (x - x.mean()) / x.std()
    df['thalachh'] = minmax_scaler(minmax_scaler(df['thalachh']))
    
    for col in ['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']:
        df[col] = minmax_scaler(df[col])
    
    return df
";{0: 0.8835966363385719}
3844;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min())
    # Remaining columns not touched in this function for improvement
    return df
";{0: 0.828846941588877}
3845;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg', 'slp', 'caa'], inplace=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8478960489536904}
3846;"
    df.dropna(inplace=True)
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8929359171294655}
3847;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    
    # Dropping redundant/less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)

    # Feature engineering steps
    df['caa'] = np.sqrt(df['caa'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Add any additional feature engineering steps here for better performance

    return df
";{0: 0.8190505819008468}
3848;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['age'] = np.sqrt(df['age'])
    df['sex'].replace({'Male': 1, 'Female': 0}, inplace=True)
    return df
";{0: 0.7764766689330412}
3849;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg'], inplace=True)
    # Feature transformation
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min())
    return df
";{0: 0.892793801180898}
3853;"
    df.dropna(inplace=True)
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Min-Max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8830803258672111}
3855;"
    df.dropna(inplace=True)
    
    # Fill NA values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Min-Max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8865418643287496}
3856;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.887771492841226}
3858;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[[f'cp_{i}' for i in range(4)]] = (df[[f'cp_{i}' for i in range(4)]] - df[[f'cp_{i}' for i in range(4)]].mean()) / df[[f'cp_{i}' for i in range(4)]].std()
    return df
";{0: 0.8938385225885226}
3859;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] **= 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8801926579795432}
3867;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    # Standardize and Min-Max scale 'thalachh' at the same time
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8865804580723935}
3869;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.885858103644989}
3873;"
    df.fillna(df.mean(), inplace=True)
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    # Dropping columns 'exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    # One-hot encoding for 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    # Square root transformation for 'caa' and squaring 'slp'
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Min-max scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Standardization for selected columns
    selected_columns = ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
    return df
";{0: 0.8999923687423687}
3874;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8755318110850897}
3877;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean
    
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # Perform one-hot-encoding
    
    df.dropna(subset=['caa'], inplace=True)  # Drop rows with missing 'caa' values
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop unnecessary columns
    
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation
    
    df['slp'] = df['slp'] ** 2  # Square the 'slp' column
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize the 'thalachh' column
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Normalize the 'thalachh' column
    
    return df
";{0: 0.8689068100358422}
3882;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'slp', 'cp_0', 'cp_2', 'sex']]
    df['thalachh'] = np.sqrt(df['thalachh'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.8063656068944276}
3884;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8972039072039072}
3885;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.7960215053763441}
3887;"
    df.fillna(df.mean(), inplace=True) # Fill missing values with the mean of each column
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode specified columns
    df.dropna(inplace=True) # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True) # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa']) # Apply square root transformation to 'caa' column
    df['slp'] = np.square(df['slp']) # Square the values in 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min()) # Min-max scale 'thalachh' column
    return df
";{0: 0.8893322627193596}
3891;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = df[['age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    return df
";{0: 0.7857405487594167}
3892;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8936324786324785}
3898;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    selected_columns = ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
    return df
";{0: 0.8965201465201466}
3901;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    # Further data processing steps can be added
    return df
";{0: 0.8838087447884444}
3902;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing steps can be added
    return df
";{0: 0.9045859284056619}
3907;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df[['thalachh', 'caa', 'slp']] = (df[['thalachh', 'caa', 'slp']] - df[['thalachh', 'caa', 'slp']].mean()) / df[['thalachh', 'caa', 'slp']].std()
    return df
";{0: 0.8431341441917857}
3908;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop columns that are not important
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Standardize one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8908547008547008}
3910;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] -= df['thalachh'].min()
    df['thalachh'] /= (df['thalachh'].max() - df['thalachh'].min())
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.879004033307312}
3919;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['caa', 'slp', 'cp_0', 'cp_1', 'cp_2']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['cp_1'] = np.log1p(df['cp_1'])
    return df
";{0: 0.8276014267891096}
3922;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop rows with missing values
    df.dropna(inplace=True)

    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)

    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])

    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2

    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8955822627193596}
3934;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.cbrt(df['caa'])
    df['slp'] = np.log1p(df['slp'])
    df['chol'] = np.sqrt(df['chol'])
    df = df[['thalachh', 'caa', 'slp', 'chol', 'sex']]
    return df
";{0: 0.7695522857626437}
3935;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps can be included
    return df
";{0: 0.9054461434594252}
3936;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8879718397579911}
3939;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']].std()
    return df
";{0: 0.8822738742543079}
3943;"
    df.fillna(df.median(), inplace=True)
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df[['thalachh']] = (df[['thalachh']] - df[['thalachh']].mean()) / df[['thalachh']].std()
    return df
";{0: 0.8868782248217733}
3947;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(subset=['caa'], inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8811294261294261}
3951;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8921100404971373}
3955;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])  # One-hot encode 'cp' column
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])  # One-hot encode 'restecg' column
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg', 'slp'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transform to 'caa' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max normalize 'thalachh' column
    return df
";{0: 0.8889188094549606}
3968;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.892793801180898}
3972;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8323697270471465}
3973;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8966163003663004}
3974;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    # Implement any extra preprocessing if needed
    return df
";{0: 0.8838087447884444}
3976;"
import pandas as pd
import numpy as np

def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    return df
";{0: 0.8999923687423687}
3980;"
    df.fillna(df.mean(), inplace=True) # Fill missing values with mean
    df['thalachh'] = np.log1p(df['thalachh']) # Log transform 'thalachh'

    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns

    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['slp'] = np.square(df['slp'])  # Square 'slp'

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-Max scale 'thalachh'

    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()  # Standardize one-hot encoded columns

    return df
";{0: 0.8973000610500611}
3982;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['age', 'sex', 'fbs', 'trtbps', 'chol', 'oldpeak', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] **= 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # Min-Max scale with 0-1 range for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8559253246753247}
3984;"
    df.fillna(df.mean(), inplace=True)  # Fill missing values with column mean
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transform to 'caa' column
    df['slp'] = df['slp'] ** 2  # Square the 'slp' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max normalize 'thalachh' column
    return df
";{0: 0.8921100404971373}
3988;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df.loc[:, df.columns.str.startswith('cp_') | df.columns.str.startswith('restecg_')] = (df.loc[:, df.columns.str.startswith('cp_') | df.columns.str.startswith('restecg_')] - df.loc[:, df.columns.str.startswith('cp_') | df.columns.str.startswith('restecg_')].mean()) / df.loc[:, df.columns.str.startswith('cp_') | df.columns.str.startswith('restecg_')].std()
    
    return df
";{0: 0.8838944030879514}
3990;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa']) 
    df['slp'] = np.square(df['slp'])
    df = (df - df.mean()) / df.std()  # Standardization
    return df
";{0: 0.863961410453346}
3994;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.8903281082716568}
3997;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])

    # Normalize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardize selected columns
    selected_columns = ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

    return df
";{0: 0.8937423687423687}
3998;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop any remaining rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Normalize 'caa' to range [0,1]
    # Implement any additional preprocessing steps here
    return df
";{0: 0.8749625909422907}
3999;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize the entire dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8762155717688505}
4003;"
    # Fill missing values with mean and apply log transformation to 'thalachh'
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values and irrelevant columns
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Apply operations on 'caa' and 'slp' columns
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8893303258672111}
4005;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min())
    df.fillna(0, inplace=True)  # Filling NA values with 0
    return df
";{0: 0.8921100404971373}
4007;"
    df.dropna(inplace=True)
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    selected_columns = ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
    return df
";{0: 0.8999923687423687}
4012;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8831189196108552}
4013;"
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = pd.get_dummies(df['cp'])
    df[['restecg_0', 'restecg_1', 'restecg_2']] = pd.get_dummies(df['restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'cp', 'restecg', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).min()) / (np.log1p(df['thalachh']).max() - np.log1p(df['thalachh']).min())
    # Further improvements can be made here
    return df
";{0: 0.8815979713948885}
4014;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    for col in df.columns:
        if col.startswith('cp_') or col.startswith('restecg_'):
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8847008547008546}
4018;"
    df = df[['thalachh', 'caa', 'sex', 'cp', 'restecg']]
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8219443814895957}
4024;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(subset=['caa'], inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    for col in ['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    return df
";{0: 0.8867500350287235}
4025;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    selected_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()
    return df
";{0: 0.8930320709756193}
4028;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8744845142518332}
4032;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8856855644355643}
4035;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['age'] = np.sqrt(df['age'])
    df['sex'] = np.where(df['sex']=='Male', 1, 0)
    # Further feature engineering can be implemented as needed
    return df
";{0: 0.7711402575918705}
4041;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    df = df[['thalachh', 'caa', 'slp', 'oldpeak', 'sex']]  # Change column selection and add 'oldpeak'
    return df
";{0: 0.7641584760237544}
4043;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode certain columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['slp'] = df['slp'] ** 2  # Square transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())  # Min-max scale 'thalachh'
    return df
";{0: 0.8955822627193596}
4049;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.825857654889913}
4051;"
    df = df.fillna(df.median())
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps can be included
    return df
";{0: 0.8886671729909436}
4053;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    return df
";{0: 0.8874786324786325}
4055;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['slp'] = (df['slp'] - df['slp'].mean()) / df['slp'].std()  # Standardizing 'slp'
    return df
";{0: 0.8570068746694872}
4056;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']].std()
    
    return df
";{0: 0.8966163003663004}
4058;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]
";{0: 0.7796069707081943}
4059;"
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns and adjust column values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8760784690220174}
4060;"
    df.fillna(df.median(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)  
    df = df[['thalachh', 'cp_0', 'cp_1', 'cp_3', 'caa']]  
    df['caa'] = np.sqrt(df['caa'])  
    df['thalachh'] = np.square(df['thalachh'])  
    return df
";{0: 0.7969605036540519}
4061;"
    df.fillna(df.median(), inplace=True) # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encoding
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa']) # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Min-max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) # Convert categorical to numerical
    return df
";{0: 0.8937525950723284}
4064;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.9017443983510169}
4067;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps can be included
    return df
";{0: 0.8886671729909436}
4075;"
    df.dropna(inplace=True)
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] **= 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    one_hot_cols = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']
    df[one_hot_cols] = (df[one_hot_cols] - df[one_hot_cols].mean()) / df[one_hot_cols].std()
    
    return df
";{0: 0.8830803258672111}
4079;"
    df.fillna(df.median(), inplace=True) # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa']) # Square root transformation of 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Min-max scale 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) # Encode 'sex' as binary
    # Additional preprocessing steps can be included
    return df
";{0: 0.9045859284056619}
4086;"
    # Drop rows with missing values and fill remaining NaN values with median
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9090303728501062}
4088;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8886671729909436}
4095;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    # Standardize all one-hot encoded columns
    for col in df.columns:
        if 'cp_' in col or 'restecg_' in col:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    return df
";{0: 0.8865418643287496}
4099;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8838944030879514}
4102;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9017443983510169}
4104;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa']) 
    df['slp'] = np.square(df['slp'])
    df = (df - df.mean()) / df.std()  
    return df
";{0: 0.863961410453346}
4106;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    
    for col in ['thalachh', 'caa', 'slp']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8418438216111405}
4109;"
    df.fillna(df.mean(), inplace=True)  # Fill NaN values with mean of each column
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)  # Remove unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Take square root of 'caa'
    df['slp'] = df['slp'] ** 2  # Square 'slp'

    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    return df
";{0: 0.8679271372026527}
4111;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    return df
";{0: 0.8872702832499829}
4112;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    return df
";{0: 0.8834424885122217}
4115;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df[['thalachh', 'caa', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
";{0: 0.8219443814895957}
4116;"
    df.dropna(inplace=True)
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()

    # More preprocessing steps or feature engineering can be added here as needed

    return df
";{0: 0.8966163003663004}
4121;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    return df
";{0: 0.8814674226414047}
4122;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['thalachh', 'caa', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Convert categorical to numerical
    return df
";{0: 0.825857654889913}
4123;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) 
    df['caa'] = np.sqrt(df['caa'])  
    df = pd.get_dummies(df, columns=['sex', 'thall'])
    return df
";{0: 0.7516553518919291}
4129;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'chol', 'oldpeak', 'exng', 'slp']]
    df['chol'] = np.sqrt(df['chol'])
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.7535094793435201}
4130;"
    df.fillna(df.mode().iloc[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.7624260431136493}
4133;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing can be added
    return df
";{0: 0.9007441204960571}
4135;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further feature engineering or data processing can be added if needed
    return df
";{0: 0.8794640605296344}
4137;"
    df.fillna(df.median(), inplace=True) # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True) # Drop rows with missing values
    df['caa'] = np.sqrt(df['caa']) # Square root transformation of 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Min-max scale 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) # Encode 'sex' as binary
    return df
";{0: 0.7679215408247667}
4141;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    minmax_scaler = lambda x: (x - x.mean()) / x.std()
    df['thalachh'] = minmax_scaler(df['thalachh'])
    
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']] = minmax_scaler(df[['cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']])
    
    return df
";{0: 0.8835966363385719}
4142;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    df = pd.get_dummies(df, columns=['sex', 'thall'])
    return df
";{0: 0.7984263720150817}
4145;"
    df.fillna(df.mode().iloc[0], inplace=True)  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = np.square(df['slp'])  
    df = (df - df.mean()) / df.std()  # Standardize the data
    return df
";{0: 0.8480239577438219}
4146;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8751417008721345}
4150;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8903460159911774}
4158;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop specific columns
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scale 'caa'
    # Implement any extra preprocessing if needed
    return df
";{0: 0.8811164370961369}
4159;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    # Further feature engineering or data processing can be added here
    return df
";{0: 0.8845663205460201}
4161;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # No changes made in this version
    return df
";{0: 0.9083017754001972}
4162;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' with drop_first=True
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardize one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8838944030879514}
4165;"
    df.fillna(df.median(), inplace=True)  # Fill NA values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True)  # Drop rows with NA values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa' column
    df['age'] = np.power(df['age'], 2)  # Square the 'age' column
    return df
";{0: 0.7709304080470645}
4168;"
# Version 3 of the function
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding for 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['thalachh', 'caa', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]  # Select specific columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scaling of 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as binary
    return df
";{0: 0.825857654889913}
4169;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] = df['slp'] ** 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    selected_columns = ['cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.9000885225885226}
4170;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg']) 
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df.drop(columns=['fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thal_packed'] = df['thall'].apply(lambda x: 1 if x > 1 else 0)
    df.drop(columns=['thall'], inplace=True)
    # Add any further feature engineering steps for improved model training
    return df
";{0: 0.8344393241167435}
4172;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    df[df.select_dtypes(include=['float64']).columns] = (df.select_dtypes(include=['float64']) - df.select_dtypes(include=['float64']).mean()) / df.select_dtypes(include=['float64']).std()  
    df[df.select_dtypes(include=['int64']).columns] = (df.select_dtypes(include=['int64']) - df.select_dtypes(include=['int64']).min()) / (df.select_dtypes(include=['int64']).max() - df.select_dtypes(include=['int64']).min())  
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) 
    return df
";{0: 0.8475087668030392}
4176;"
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8921100404971373}
4177;"
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['cp_2', 'thalachh', 'caa', 'slp', 'restecg_1']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    return df
";{0: 0.7961914795210443}
4179;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns  
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()  
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) 
    return df
";{0: 0.8759370128646558}
4188;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    # Additional preprocessing steps or feature engineering can be added here
    return df
";{0: 0.8207723325062035}
4192;"
    df['sex'].fillna(df['sex'].mode()[0], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])
    df['slp'] = np.log1p(df['slp'])
    return df
";{0: 0.8902059881086121}
4194;"
    df.fillna(df.mean(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    return df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_1']]
";{0: 0.8278400695349847}
4199;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = np.square(df['slp'])
    
    # Standardize 'thalachh' using z-score normalization
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Standardize one-hot encoded columns
    df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] = (df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']] - df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].mean()) / df[['cp_1', 'cp_2', 'cp_3', 'restecg_1']].std()
    
    return df
";{0: 0.8908547008547008}
4202;"
    df.dropna(inplace=True)  # Removing rows with missing values
    df.fillna(df.median(), inplace=True)  # Filling missing values with median

    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation of 'thalachh'

    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding 'cp' and 'restecg'

    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Dropping unnecessary columns

    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa'

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardizing 'thalachh'

    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scaling 'caa'

    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Converting 'sex' to binary values

    return df
";{0: 0.9045859284056619}
4203;"
    df.fillna(df.mean(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'sex'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['slp'] **= 2
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    selected_columns = ['cp_1', 'cp_2', 'cp_3', 'restecg_1']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8895107010475863}
4206;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = df[['thalachh', 'slp', 'cp_0', 'cp_2', 'sex']]  # Select specific columns
    df['thalachh'] = np.sqrt(df['thalachh'])  # Square root transform 'thalachh'
    df['slp'] = np.square(df['slp'])  # Square 'slp' column values
    return df
";{0: 0.8063656068944276}
4207;"
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9007441204960571}
4210;"
    df.fillna(df.mean(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' with drop_first=True
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)
    
    # Transform 'caa' with square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Square the values in 'slp'
    df['slp'] = df['slp'] ** 2
    
    # Min-Max scaling on 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Standardization of columns 'cp_1', 'cp_2', 'cp_3', 'restecg_1'
    cols_to_standardize = ['cp_1', 'cp_2', 'cp_3', 'restecg_1']
    df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
    
    return df
";{0: 0.8874786324786325}
4211;"
    df.fillna(df.mean(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['slp'] = df['slp'] ** 2  
    
    # Standardize 'thalachh' using Min-Max Scaling
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8709559903637112}
4215;"
    df.fillna(df.median(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    df[df.select_dtypes(include=['float64']).columns] = (df.select_dtypes(include=['float64']) - df.select_dtypes(include=['float64']).mean()) / df.select_dtypes(include=['float64']).std()  
    df[df.select_dtypes(include=['int64']).columns] = (df.select_dtypes(include=['int64']) - df.select_dtypes(include=['int64']).min()) / (df.select_dtypes(include=['int64']).max() - df.select_dtypes(include=['int64']).min())  
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8495240422659778}
4216;"
    df.fillna(df.mode().iloc[0], inplace=True)  # Fill NaN values with the most common value
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'slp', 'cp_0', 'cp_2', 'restecg_1', 'restecg_2']]
    df['caa'] = np.sqrt(df['caa'])
    df['slp'] = np.square(df['slp'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    return df
";{0: 0.8399390597063785}
4219;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    df[df.select_dtypes(include=['float64']).columns] = (df.select_dtypes(include=['float64']) - df.select_dtypes(include=['float64']).mean()) / df.select_dtypes(include=['float64']).std()  
    df[df.select_dtypes(include=['int64']).columns] = (df.select_dtypes(include=['int64']) - df.select_dtypes(include=['int64']).min()) / (df.select_dtypes(include=['int64']).max() - df.select_dtypes(include=['int64']).min())  
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) 
    df = df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
    return df
";{0: 0.816010020458155}
4221;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Continue with further improvements
    return df
";{0: 0.9017443983510169}
4223;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df[['thalachh', 'caa', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
";{0: 0.8219443814895957}
4224;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps can be done here
    return df
";{0: 0.828501758538776}
4225;"
    # Drop rows with missing values
    df.dropna(inplace=True)

    # Fill missing values with median
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9090303728501062}
4226;"
    df.dropna(inplace=True)

    # Fill missing values with median
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9054461434594252}
4228;"
    df.dropna(inplace=True)

    # Fill missing values with median
    df.fillna(df.median(), inplace=True)

    # Replace missing values in 'thalachh' with its mean
    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9017443983510169}
4231;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scale 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as binary
    return df
";{0: 0.9045859284056619}
4236;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    column_names = ['cp_0', 'cp_1','cp_2','cp_3','restecg_0','restecg_1','restecg_2']
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    new_df = df.reindex(columns=column_names, fill_value=0)
    return new_df
";{0: 0.7890362511052167}
4237;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing can be added here as needed
    return df
";{0: 0.9083017754001972}
4238;"
    df.dropna(inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9083017754001972}
4247;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df[['thalachh']] = (df[['thalachh']] - df[['thalachh']].mean()) / df[['thalachh']].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df[['thalachh', 'caa', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
";{0: 0.8245673323092678}
4250;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement further preprocessing steps
    return df
";{0: 0.9054461434594252}
4251;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Sq. root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8979192617389952}
4255;"
    df.dropna(inplace=True)
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8956837922904108}
4257;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement any further preprocessing steps if required
    return df
";{0: 0.9017443983510169}
4261;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Complete the function implementing additional processing steps as required
    return df
";{0: 0.9054461434594252}
4262;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add further preprocessing steps here
    return df
";{0: 0.9017443983510169}
4263;"
    df.dropna(inplace=True)
    
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9045859284056619}
4264;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Finish additional enhancements
    return df
";{0: 0.9017443983510169}
4265;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further enhancements can be made here
    return df
";{0: 0.9083017754001972}
4268;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df[['thalachh', 'caa', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]
";{0: 0.8397710622710622}
4276;"
    df.dropna(inplace=True)

    # Fill missing values with median
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8886671729909436}
4278;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Possible additional preprocessing steps
    return df
";{0: 0.9054461434594252}
4281;"
    df.fillna(df.median(), inplace=True) 
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True) 
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) 
    df['caa'] = np.sqrt(df['caa']) 
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() 
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) 
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any additional preprocessing steps as needed
    return df
";{0: 0.9045859284056619}
4283;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df.dropna(inplace=True)  # Drop rows with missing values
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scale 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as binary
    return df
";{0: 0.9045859284056619}
4284;"
   # Drop rows with missing values
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8985253223450556}
4287;"
    df.dropna(inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns and select the FIVE most important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9054461434594252}
4288;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Continue feature engineering or encoding if required
    return df
";{0: 0.9007441204960571}
4292;"
    df.fillna(df.median(), inplace=True) # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encoding
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa']) # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Min-max scaling
    df['sex'] = np.where(df['sex'] == 1, 1, 0) # Encode 'sex' as binary
    return df
";{0: 0.8838087447884444}
4295;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement any further data processing steps here
    return df
";{0: 0.8963319601516936}
4300;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Sq. root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8886671729909436}
4302;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional data processing can be implemented here
    return df
";{0: 0.911897756362651}
4304;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add more preprocessing steps as needed
    return df
";{0: 0.9017443983510169}
4305;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'restecg_1', 'restecg_2']]
";{0: 0.8059484777517565}
4308;"
    df.dropna(inplace=True)
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns except 'thalachh', 'caa', 'sex'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'restecg_1', 'restecg_2']]
";{0: 0.8304365079365079}
4311;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing steps can be added here
    return df
";{0: 0.9083017754001972}
4312;"
    # Drop rows with missing values
    df.dropna(inplace=True)

    # Log transformation of 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa' column
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column values to binary (1 for Male and 0 for Female)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9045859284056619}
4314;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing can be included here
    return df
";{0: 0.9045859284056619}
4315;"
    df.fillna(df.median(), inplace=True) # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa']) # Square root transformation of 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Min-max scale 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) # Encode 'sex' as binary
    return df
";{0: 0.9007441204960571}
4325;"
# Import libraries as needed

def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement further preprocessing steps
    return df
";{0: 0.9054461434594252}
4327;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any additional preprocessing steps here
    return df
";{0: 0.9083017754001972}
4328;"
    df.dropna(inplace=True)
    
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)

    # Replace missing 'thalachh' values with mean
    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8974064412261746}
4334;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add or change preprocessing steps as needed
    return df
";{0: 0.9007441204960571}
4340;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any further preprocessing steps needed in this version
    return df
";{0: 0.9045859284056619}
4348;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    df['thalachh'] = np.log1p(df['thalachh'])

    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)

    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    df['caa'] = np.sqrt(df['caa'])

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8886671729909436}
4349;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df = df[['thalachh', 'caa', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'restecg_0', 'restecg_1', 'restecg_2']]
    df['caa'] = np.sqrt(df['caa'])
    df[['thalachh', 'caa']] = (df[['thalachh', 'caa']] - df[['thalachh', 'caa']].mean()) / df[['thalachh', 'caa']].std()
    df[['sex']] = (df[['sex']] - df[['sex']].min()) / (df[['sex']].max() - df[['sex']].min())
    return df
";{0: 0.8698917989685508}
4350;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8956837922904108}
4354;"
    df.dropna(inplace=True)  # Drop rows with missing values
    df.fillna(df.median(), inplace=True)  # Fill missing values with the median

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9000025950723284}
4357;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    df['thalachh'] = np.log1p(df['thalachh'])

    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9017443983510169}
4358;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    df = (df - df.mean()) / df.std()  
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) 
    return df
";{0: 0.8803673554229728}
4360;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Continue preprocessing steps here
    return df
";{0: 0.8937525950723284}
4365;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any further preprocessing steps if required
    return df
";{0: 0.9045859284056619}
4366;"
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9007441204960571}
4375;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement any necessary additional preprocessing
    return df
";{0: 0.9054461434594252}
4377;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps can be added here
    return df
";{0: 0.9045859284056619}
4385;"
    df.dropna(inplace=True)

    # Fill missing values with median
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df[['thalachh', 'caa', 'cp_0', 'cp_1', 'cp_2', 'restecg_0', 'restecg_1']]
";{0: 0.8140886699507389}
4387;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df[['thalachh', 'caa', 'cp_1', 'cp_2', 'cp_3', 'restecg_1', 'restecg_2']]
";{0: 0.8397710622710622}
4391;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing steps
    return df
";{0: 0.9083017754001972}
4396;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Continue additional data processing steps here
    return df
";{0: 0.9000025950723284}
4399;"
    df.dropna(inplace=True)
    
    df.fillna(df.median(), inplace=True)

    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)

    df['thalachh'] = np.log1p(df['thalachh'])

    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    df['caa'] = np.sqrt(df['caa'])

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9083017754001972}
4409;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing steps can be added
    return df
";{0: 0.9017443983510169}
4412;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add more preprocessing steps to optimize the dataset further
    return df
";{0: 0.8925429176529736}
4416;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Continue with more preprocessing steps if needed
    return df
";{0: 0.9017443983510169}
4425;"
    df.fillna(df.median(), inplace=True)

    df['thalachh'] = np.log1p(df['thalachh'])

    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9017443983510169}
4428;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any further improvements
    return df
";{0: 0.8979192617389952}
4430;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9017443983510169}
4432;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9017443983510169}
4438;"
    df.dropna(inplace=True)

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8993855373988191}
4439;"
    df.dropna(inplace=True)

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Keep the 'thalachh', 'caa', and 'sex' columns
    df = df[['thalachh', 'caa', 'sex']]

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.7213168187744458}
4441;"
    df.fillna(df.median(), inplace=True)
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.9090303728501062}
4449;"
    df.dropna(inplace=True)

    # Log transformation of 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column values to binary (1 for Male and 0 for Female)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8974064412261746}
4450;"
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.9007441204960571}
4452;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.9083017754001972}
4454;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8979192617389952}
4456;"
    df = df[['cp', 'thalachh', 'sex', 'caa', 'restecg']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8245673323092678}
4459;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as numeric values
    # Additional data processing can be implemented here
    return df
";{0: 0.9045859284056619}
4460;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'].fillna(0, inplace=True)  # Fill missing values in 'caa' with 0
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as numeric values
    # Additional data processing can be added here
    return df
";{0: 0.9054461434594252}
4461;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9054461434594252}
4472;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as numeric values
    # Additional data processing can be implemented in this function
    return df
";{0: 0.9083017754001972}
4474;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  
    # Additional data processing can be implemented in this function
    return df
";{0: 0.9045859284056619}
4483;"
# Using the best features based on feature importance analysis
# Dropping less important columns such as 'slp' and 'fbs'
# Applying appropriate transformations to columns
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8951870213018367}
4486;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Normalization of 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Keep the 'sex' column and apply label encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    # Scale 'caa' using z-score normalization
    df['caa'] = (df['caa'] - df['caa'].mean()) / df['caa'].std()

    return df
";{0: 0.7625803989916893}
4488;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values assuming 'Male' is 1 and 'Female' is 0
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9017443983510169}
4491;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max()-df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further feature engineering or encoding may be done here
    return df
";{0: 0.8979192617389952}
4494;"
    df.fillna(df.median(), inplace=True) # Fill NA values with median
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop irrelevant columns
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode categorical columns
    df.dropna(inplace=True) # Drop rows with NA values
    df['caa'] = np.sqrt(df['caa']) # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Min-max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) # Convert categorical gender to numerical
    return df
";{0: 0.9017443983510169}
4499;"
    df.dropna(inplace=True)
    
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.7650413564929694}
4500;"
    df.fillna(df.median(), inplace=True)
    df['age'] = np.sqrt(df['age'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional data processing can be implemented here
    return df
";{0: 0.8829977789823722}
4511;"
    df.fillna(df.median(), inplace=True) # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encoding
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Remove unnecessary columns
    df['caa'] = np.sqrt(df['caa']) # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Min-max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) # Convert categorical to numerical
    # Additional preprocessing steps can be added here
    return df
";{0: 0.9007441204960571}
4516;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8985253223450556}
4518;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)

    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)

    df['thalachh'] = np.log1p(df['thalachh'])

    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)

    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    df['caa'] = np.sqrt(df['caa'])

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8886671729909436}
4519;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.9017443983510169}
4520;"
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9022411693395913}
4528;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Consider adding further improvements here
    return df
";{0: 0.911897756362651}
4536;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as numeric values
    return df
";{0: 0.9017443983510169}
4541;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)
    
    # Fill missing values in 'thalachh' with mean
    df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.883462905491594}
4554;"
    df.dropna(inplace=True)

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Remove unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Z-score standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8985253223450556}
4564;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.7679215408247667}
4565;"
    df.fillna(df.median(), inplace=True)

    df['thalachh'] = np.log1p(df['thalachh'])

    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)

    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    df['caa'] = np.sqrt(df['caa'])

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8886671729909436}
4567;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'].fillna(0, inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional data processing can be added here
    return df
";{0: 0.9054461434594252}
4568;"
    df.fillna(df.median(), inplace=True)
    df['age'] = np.sqrt(df['age'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8829977789823722}
4570;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further data processing or feature engineering can be added here
    return df
";{0: 0.9083017754001972}
4572;"
    df.dropna(inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.8886671729909436}
4575;"
    df.fillna(df.median(), inplace=True)
    df['age'] = np.sqrt(df['age'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add your improvements here
    return df
";{0: 0.8768439328285259}
4576;"
    df.fillna(df.median(), inplace=True) # Fill NA values with median
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop irrelevant columns
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode categorical columns
    df.dropna(inplace=True) # Drop rows with NA values
    df['caa'] = np.sqrt(df['caa']) # Square root transformation
    df_standardized = (df - df.mean()) / df.std() # Standardize all columns
    df_minmax_scaled = (df_standardized - df_standardized.min()) / (df_standardized.max() - df_standardized.min()) # Min-max scaling
    df = pd.concat([df_minmax_scaled, df[['sex']]], axis=1) # Keep 'sex' column as it is
    return df
";{0: 0.8611524128649238}
4580;"
    # Remove rows with NaN values
    df.dropna(inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns with drop_first=True
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.883462905491594}
4582;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot-encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop selected columns that are not important
    df.drop(columns=['exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8967698364516388}
4586;"
    # Drop rows with missing values
    df.dropna(inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9017443983510169}
4587;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement any additional preprocessing steps here
    return df
";{0: 0.9017443983510169}
4591;"
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional improvements can be made in this version
    return df
";{0: 0.9007441204960571}
4595;"
    df.fillna(df.median(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot-encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8979192617389952}
4597;"
    df.fillna(df.median(), inplace=True)
    df['age'] = np.log1p(df['age'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df_standardized = (df - df.mean()) / df.std()
    df_minmax_scaled = (df_standardized - df_standardized.min()) / (df_standardized.max() - df_standardized.min())
    df = pd.concat([df_minmax_scaled, df[['sex']]], axis=1)
    return df
";{0: 0.8409348451654111}
4604;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.883462905491594}
4613;"
    df.dropna(inplace=True)
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Square root transformation of 'caa' column
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.753512938674229}
4614;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalization
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encoding categorical 'sex' as numeric
    # Additional preprocessing steps can be added here
    return df
";{0: 0.9017443983510169}
4615;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot-encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation of 'caa' feature
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scale 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Convert 'sex' to binary encoding
    return df
";{0: 0.9007441204960571}
4616;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9058371503020449}
4618;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot-encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9017443983510169}
4619;"
    df.dropna(inplace=True)

    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])

    # Standardization of 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling of 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Convert 'sex' column to binary values (assuming 'Male' is 1 and 'Female' is 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9007441204960571}
4621;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement additional preprocessing steps in v3
    return df
";{0: 0.9054461434594252}
4625;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional data processing can be added here
    return df
";{0: 0.9045859284056619}
4627;"
    df.dropna(subset=['thalachh', 'caa', 'sex'], inplace=True)
    df['thalachh'] = df['thalachh'].fillna(df['thalachh'].mean())
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8886671729909436}
4628;"
    df.fillna(df.median(), inplace=True) # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transform the 'thalachh' column
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode 'cp' and 'restecg' columns
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa']) # Square root transformation on 'caa' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardize 'thalachh' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Min-max scale 'caa' column
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) # Convert 'sex' column to binary
    # Additional data processing logic can be added here
    return df
";{0: 0.9045859284056619}
4630;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Return the preprocessed dataframe
    return df
";{0: 0.9090303728501062}
4635;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'].replace({'Male': 1, 'Female': 0}, inplace=True) # Updated sex conversion
    return df
";{0: 0.880237316217016}
4641;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'].fillna(0, inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further data processing can be implemented if necessary
    return df
";{0: 0.9017443983510169}
4642;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  
    # Further data processing enhancements can be added in this function
    return df
";{0: 0.9007441204960571}
4643;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Transform 'thalachh' using log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Continue with additional data processing as needed
    
    return df
";{0: 0.9007441204960571}
4644;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df = (df - df.mean()) / df.std()
    df = (df - df.min()) / (df.max() - df.min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps can be added here
    return df
";{0: 0.8878718299005184}
4647;"
    df.fillna(df.median(), inplace=True)
    
    # Transform 'thalachh' using log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Continue with additional data processing as needed
    
    return df
";{0: 0.9017443983510169}
4648;"
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing steps can be added in this version
    return df
";{0: 0.9017443983510169}
4649;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add your enhancements here
    return df
";{0: 0.9083017754001972}
4652;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional improvements can be made here
    return df
";{0: 0.9045859284056619}
4653;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Convert categorical to numerical
    # Code for further preprocessing steps can be added here
    return df
";{0: 0.9017443983510169}
4656;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further improvements can be made here
    return df
";{0: 0.9017443983510169}
4657;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'].fillna(0, inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8886671729909436}
4662;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'].fillna(0, inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.9083017754001972}
4663;"
    df.fillna(df.median(), inplace=True)
    
    # Transform 'thalachh' using log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9054461434594252}
4666;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'].fillna(0, inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further data preprocessing steps can be implemented here
    return df
";{0: 0.9054461434594252}
4667;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp', 'restecg'
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'].replace({'Male': 1, 'Female': 0}, inplace=True)  # Replace 'Male' and 'Female' with 1 and 0 in 'sex'
    return df
";{0: 0.8838087447884444}
4673;"
    df.fillna(df.median(), inplace=True)
    
    # Transform 'thalachh' using log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Keep only the FIVE most important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Continue with additional data processing as needed
    
    return df
";{0: 0.9017443983510169}
4675;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any additional data preprocessing steps
    return df
";{0: 0.9017443983510169}
4677;"
    df.fillna(df.median(), inplace=True)  
    df['thalachh'] = np.log1p(df['thalachh'])  
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    df.dropna(inplace=True)  
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    df['caa'] = np.sqrt(df['caa'])  
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  
    df['sex'].replace({'Male': 1, 'Female': 0}, inplace=True)  
    return df
";{0: 0.8845663205460201}
4683;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df['caa'].fillna(0, inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8886671729909436}
4684;"
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'slp', 'age'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further enhancements can be applied in this version
    return df
";{0: 0.9054461434594252}
4690;"
    df.fillna(df.median(), inplace=True)
    
    # Transform 'thalachh' using log transformation
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Transform 'caa' using square root function
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Additional data processing can be continued
    
    return df
";{0: 0.9083017754001972}
4691;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further enhancements can be applied here
    return df
";{0: 0.8979192617389952}
4699;"
    df.fillna(df.median(), inplace=True)
    df['age'] = np.sqrt(df['age'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)
    df['caa'] = np.cbrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add your improvements here
    return df
";{0: 0.8832323232323231}
4700;"
    df.fillna(df.median(), inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.log1p(df['thalachh']).mean()) / np.log1p(df['thalachh']).std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8979192617389952}
4703;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any additional data processing or feature engineering here
    return df
";{0: 0.9007441204960571}
4705;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df['caa'].fillna(0, inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df = (df - df.mean()) / df.std()
    df = (df - df.min()) / (df.max() - df.min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8964768423540139}
4708;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional processing if needed
    return df
";{0: 0.9083017754001972}
4711;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing can be added after this point
    return df
";{0: 0.9054461434594252}
4717;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # This function can be further enhanced for more feature engineering steps
    return df
";{0: 0.9017443983510169}
4720;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Include any further data preprocessing steps here
    return df
";{0: 0.9007441204960571}
4723;"
    # Fill NA values with the median of each column
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of the 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode the 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with NA values
    df.dropna(inplace=True)
    
    # Drop columns that are not considered as important
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of the 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize the 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling of the 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (Male: 1, Female: 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Return the preprocessed dataframe
    return df
";{0: 0.9045859284056619}
4725;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing steps or modifications can be implemented
    return df
";{0: 0.9007441204960571}
4729;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop specified columns
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp', 'restecg'
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'].replace({'Male': 1, 'Female': 0}, inplace=True)  # Replace 'Male' and 'Female' with 1 and 0 in 'sex'
    return df
";{0: 0.8785057144854141}
4735;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further improvements can be made in the next version
    return df
";{0: 0.9045859284056619}
4736;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df = (df - df.mean()) / df.std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # You can add further data processing enhancements in this function
    return df
";{0: 0.8982007652991871}
4738;"
    df.fillna(df.median(), inplace=True)
    df['age'] = np.sqrt(df['age'])
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further data preprocessing or feature engineering can be added here
    return df
";{0: 0.8791627734082361}
4740;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further improvements can be made in this function
    return df
";{0: 0.911897756362651}
4741;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further enhancements
    return df
";{0: 0.9017443983510169}
4749;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.9045859284056619}
4751;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'].fillna(0, inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps can be included here
    return df
";{0: 0.9054461434594252}
4753;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg'
    df['caa'].fillna(0, inplace=True)  # Fill missing values in 'caa' with 0
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as numeric values
    return df
";{0: 0.8886671729909436}
4755;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Transformation on 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop columns: 'exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Transformation on 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Encoding 'sex' column as binary (male: 1, female: 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Return the preprocessed dataframe
    return df
";{0: 0.9045859284056619}
4758;"
    df.fillna(df.median(), inplace=True) # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh']) # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True) # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop columns
    df['caa'] = np.sqrt(df['caa']) # Square root transform 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std() # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min()) # Normalize 'caa'
    df['sex'].replace({'Male': 1, 'Female': 0}, inplace=True) # Updated sex conversion
    return df
";{0: 0.8775587447884444}
4767;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Continue improving this version
    return df
";{0: 0.9045859284056619}
4770;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Dropping columns based on importance
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Binary encoding for 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Further data processing if necessary
    
    return df
";{0: 0.9090303728501062}
4772;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop less important columns and transform 'caa'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' and min-max scale 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9017443983510169}
4773;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Binary encoding for 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9054461434594252}
4775;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of the 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode the 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with NA values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of the 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize the 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling of the 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (Male: 1, Female: 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Return the preprocessed dataframe
    return df
";{0: 0.8899827538024871}
4776;"
    # Fill missing values with the median
    df.fillna(df.median(), inplace=True)  
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])  
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  
    # Drop rows with missing values
    df.dropna(inplace=True)  
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])  
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
    # Min-max normalize 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  
    # Encode 'sex' as numeric values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  
    # Additional data processing can be implemented here
    return df
";{0: 0.9083017754001972}
4778;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Additional data processing can be implemented here
    
    return df
";{0: 0.9045859284056619}
4781;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # More data processing can be added before returning the dataframe
    return df
";{0: 0.9083017754001972}
4783;"
    df.fillna(df.median(), inplace=True) # Fill NA values with median
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True) # Drop irrelevant columns
    df['thalachh'] = np.log1p(df['thalachh']) # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg']) # One-hot encode categorical columns
    df.dropna(inplace=True) # Drop rows with NA values
    df['caa'] = np.sqrt(df['caa']) # Square root transformation
    df_standardized = (df - df.mean()) / df.std() # Standardization
    df_minmax_scaled = (df_standardized - df_standardized.min()) / (df_standardized.max() - df_standardized.min()) # Min-max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0) # Convert categorical gender to numerical
    return df
";{0: 0.8756389239176124}
4794;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df = (df - df.mean()) / df.std()
    df = (df - df.min()) / (df.max() - df.min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8812051632338518}
4795;"
    df.fillna(df.median(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot-encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8979192617389952}
4798;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['ca'] = df['caa'] ** 2
    df['thalachh'] = np.log(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)
    df.dropna(inplace=True)
    df['thalachh'] = (df['thalachh'] - np.mean(df['thalachh'])) / np.std(df['thalachh'])
    df['ca'] = (df['ca'] - np.min(df['ca'])) / (np.max(df['ca']) - np.min(df['ca']))
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # More feature engineering can be performed here
    return df
";{0: 0.8787550894372682}
4801;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df.fillna(df.median(), inplace=True)  # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation to 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], drop_first=True)  # One-hot encode 'cp' and 'restecg'
    df['caa'].fillna(0, inplace=True)  # Fill missing values in 'caa' with 0
    df['caa'] = np.sqrt(df['caa'])  # Apply square root transformation to 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encode 'sex' as numeric values
    return df
";{0: 0.883462905491594}
4802;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Improve preprocessing steps here
    
    return df
";{0: 0.9045859284056619}
4805;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Binary encoding for 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.7714929693961953}
4806;"
    df.fillna(df.median(), inplace=True)
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df_standardized = (df - df.mean()) / df.std()
    df_minmax_scaled = (df_standardized - df_standardized.min()) / (df_standardized.max() - df_standardized.min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8831658056380427}
4808;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'].replace({'Male': 1, 'Female': 0}, inplace=True)
    # Additional feature engineering can be added here
    return df
";{0: 0.8872702832499829}
4810;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode for 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    # Drop specified columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation for 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling for 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Binary encoding for 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Further data processing if necessary
    
    return df
";{0: 0.9009495647692981}
4811;"
    df.drop(columns=['fbs', 'exng', 'oldpeak', 'chol', 'trtbps', 'slp', 'age'], inplace=True)
    df.fillna(df.mean(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    return df
";{0: 0.8979192617389952}
4812;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of the 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode the 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with NA values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of the 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize the 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling of the 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' column to binary values (Male: 1, Female: 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Return the preprocessed dataframe
    return df
";{0: 0.9054461434594252}
4813;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'].fillna(0, inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any additional data preprocessing steps here
    return df
";{0: 0.9017443983510169}
4819;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Make further improvements or additions
    return df
";{0: 0.9007441204960571}
4821;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' and min-max scale 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9045859284056619}
4825;"
    df.fillna(df.median(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Add any additional data preprocessing steps here
    
    return df
";{0: 0.8963319601516936}
4826;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # You can add more preprocessing steps or feature engineering here
    return df
";{0: 0.9090303728501062}
4828;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transform 'thalachh'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encode 'cp' and 'restecg'
    df.dropna(inplace=True)  # Drop rows with any missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop specified columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transform 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize 'thalachh'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max normalize 'caa'
    df['sex'].replace({'Male': 1, 'Female': 0}, inplace=True)  # Replace 'Male' and 'Female' with 1 and 0 in 'sex'
    return df
";{0: 0.8845663205460201}
4831;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further enhancements can be added here
    return df
";{0: 0.9045859284056619}
4832;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further feature engineering or encoding could be added here
    return df
";{0: 0.9083017754001972}
4836;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Binary encoding for 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9054461434594252}
4837;"
    df.fillna(df.median(), inplace=True)  # Fill NAs with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with NAs
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-Max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encoding categorical variable
    # Additional data processing can be implemented here
    return df
";{0: 0.9083017754001972}
4839;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Further data preprocessing or feature engineering can be added here
    
    return df
";{0: 0.9045859284056619}
4842;"
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-Max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encoding categorical variable
    # Additional data processing can be implemented here
    return df
";{0: 0.7614699279215409}
4848;"
    # Filling missing values with the median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of the column 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for columns 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Dropping unnecessary columns and/or columns with low importance
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Applying square root transformation to column 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardizing the column 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling for column 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Encoding categorical variable 'sex' to numeric
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Add any more processing here if needed
    
    return df
";{0: 0.9017443983510169}
4851;"
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Dropping unimportant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Binary encoding for 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9054461434594252}
4852;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9054461434594252}
4861;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional data processing steps can be added here
    return df
";{0: 0.9090303728501062}
4874;"
    df.fillna(df.median(), inplace=True)  # Fill NAs with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with NAs
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-Max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encoding categorical variable
    return df
";{0: 0.9083017754001972}
4875;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Square root transformation of 'chol'
    df['chol'] = np.sqrt(df['chol'])
    
    # Min-max scaling 'chol'
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    # Binary encoding for 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.7659368682319501}
4877;"
    df.fillna(df.median(), inplace=True)
    
    # Transformation on 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop columns: 'exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Transformation on 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scaling on 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Encoding 'sex' column as binary (male: 1, female: 0)
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8979192617389952}
4879;"
    df.fillna(df.median(), inplace=True)  # Fill NAs with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with NAs
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)  # Drop irrelevant columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-Max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Encoding categorical variable
    return df
";{0: 0.8231072923225067}
4882;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot-encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9007441204960571}
4884;"
    # Filling missing values with the median of each column
    df.fillna(df.median(), inplace=True)

    # Log transformation of 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])

    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])

    # Dropping rows with missing values
    df.dropna(inplace=True)

    # Dropping unimportant columns and keeping only FIVE most important
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)

    # Applying square root transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])

    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Min-max scaling for 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    # Encoding categorical variable 'sex' to numeric
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    return df
";{0: 0.9054461434594252}
4886;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation for 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop less important columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert categorical variable 'sex' to numeric
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9017443983510169}
4888;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Other data processing steps can be added here
    return df
";{0: 0.9045859284056619}
4893;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Applying square root transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling for 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Encoding categorical variable 'sex' to numeric
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9017443983510169}
4894;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation for 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert categorical variable 'sex' to numeric
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8979192617389952}
4895;"
    df.dropna(subset=['cp', 'thalachh', 'slp'], inplace=True)
    
    # One-hot encoding for columns 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Dropping uninformative or redundant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Applying log transformation to column 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardization of the column 'caa'
    df['caa'] = (df['caa'] - df['caa'].mean()) / df['caa'].std()
    
    # Min-max scaling for column 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Encoding male as 1 and female as 0 in column 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.857998676155827}
4899;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'], _ = pd.factorize(df['caa'])
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8719293363690024}
4902;"
    df.fillna(df.median(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = np.sqrt(df['caa'])
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8963319601516936}
4903;"
    df.fillna(df.median(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9090303728501062}
4906;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add any further desired preprocessing steps here
    return df
";{0: 0.9007441204960571}
4908;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with median
    df['thalachh'] = np.log1p(df['thalachh'])  # Apply log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # Perform one-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardize column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Convert categorical to numerical
    return df
";{0: 0.8974064412261746}
4909;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps or encoding can be added here
    return df
";{0: 0.8937525950723284}
4911;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further data processing steps can be added here
    return df
";{0: 0.9054461434594252}
4914;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Further improvements or additional preprocessing steps can be added here
    
    return df
";{0: 0.9007441204960571}
4916;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Dropping rows with missing values
    df.dropna(subset=['thall', 'caa'], inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Applying cube root transformation to 'caa' column
    df['caa'] = np.cbrt(df['caa'])
    
    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling for 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Encoding categorical variable 'sex' to numeric
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8985253223450556}
4920;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Add your improved preprocessing steps here
    return df
";{0: 0.9007441204960571}
4927;"
    df.fillna(df.median(), inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot-encoding on 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-Max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Convert 'sex' to binary values
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.911897756362651}
4932;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Continue to enhance preprocessing steps
    
    return df
";{0: 0.9017443983510169}
4934;"
    # Drop rows with missing values in specified columns
    df.dropna(subset=['cp', 'thalachh', 'slp'], inplace=True)
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Drop irrelevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardize 'caa' column
    df['caa'] = (df['caa'] - df['caa'].mean()) / df['caa'].std()
    
    # Min-max scale 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Encode 'sex' column as binary
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.8561827871268234}
4935;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Keep preprocessing steps from v2
    return df
";{0: 0.9017443983510169}
4936;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Continue preprocessing steps if needed
    
    return df
";{0: 0.9083017754001972}
4937;"
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional data processing can be added before returning the dataframe
    return df
";{0: 0.9045859284056619}
4940;"
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (np.log1p(df['thalachh']) - np.mean(np.log1p(df['thalachh']))) / np.std(np.log1p(df['thalachh']))
    df['caa'] = (df['caa'] - np.min(df['caa'])) / (np.max(df['caa']) - np.min(df['caa']))
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional data processing can be implemented here
    return df
";{0: 0.9017005009915458}
4941;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional feature engineering can be added here
    return df
";{0: 0.9083017754001972}
4943;"
    df.fillna(df.median(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.821022478297394}
4945;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further preprocessing enhancements can be added here
    return df
";{0: 0.8963319601516936}
4952;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation on 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Standardizing 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Square root transformation on 'caa' and min-max scaling
    df['caa'] = np.sqrt(df['caa'])
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # One-hot encoding 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Removing missing values and selected columns
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Binary encoding 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9017443983510169}
4954;"
    df.fillna(df.median(), inplace=True)
    # Applying log transformation to 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    # One-hot encoding 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    # Dropping selected columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    # Applying sqrt transformation to 'caa' column
    df['caa'] = np.sqrt(df['caa'])
    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    # Min-max scaling 'caa' column
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    # Converting 'sex' column to binary
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further feature engineering can be done in this function
    return df
";{0: 0.9045859284056619}
4959;"
    df.fillna(df.median(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Include any additional data preprocessing steps in this version
    
    # Return the preprocessed dataframe
    return df
";{0: 0.911897756362651}
4961;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Further feature engineering or encoding can be added here
    return df
";{0: 0.9054461434594252}
4963;"
    df.fillna(df.median(), inplace=True)
    
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode for 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    # Drop specified columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation for 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling for 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Binary encoding for 'sex'
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Continue with additional data processing as needed
    
    return df
";{0: 0.9083017754001972}
4968;"
    # Fill missing values with the median of each column
    df.fillna(df.median(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop columns not needed and apply transformations to selected columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Additional data processing can be implemented here
    
    return df
";{0: 0.9054461434594252}
4971;"
    df.fillna(df.median(), inplace=True)
    
    # Log transform 'thalachh' column
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # Perform one-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop columns not needed and apply transformations to selected columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Additional data processing can be implemented here
    
    return df
";{0: 0.9045859284056619}
4984;"
    df.fillna(df.median(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    df['caa'] = np.sqrt(df['caa'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)

    # Further data preprocessing can be added here

    return df
";{0: 0.9045859284056619}
4986;"
    df.fillna(df.median(), inplace=True)
    
    # Use log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    # Select relevant columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Apply square root transformation to 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Min-max scaling for 'caa'
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    # Encode 'sex' as binary
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Further data processing can be added here
    
    return df
";{0: 0.9045859284056619}
4989;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement additional preprocessing steps as needed
    return df
";{0: 0.9017443983510169}
4992;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Implement your preprocessing improvements
    # Add comments or docstrings to explain the changes
    return df
";{0: 0.9083017754001972}
4994;"
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation of 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encode 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Drop unnecessary columns
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    
    # Square root transformation of 'caa'
    df['caa'] = np.sqrt(df['caa'])
    
    # Standardize 'thalachh' and min-max scale 'caa'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
  
    # Convert 'sex' to binary encoding
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    return df
";{0: 0.9045859284056619}
4995;"
    df.fillna(df.median(), inplace=True)  # Fill missing values with the median
    df['thalachh'] = np.log1p(df['thalachh'])  # Log transformation
    df = pd.get_dummies(df, columns=['cp', 'restecg'])  # One-hot encoding
    df.dropna(inplace=True)  # Drop rows with missing values
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)  # Drop unnecessary columns
    df['caa'] = np.sqrt(df['caa'])  # Square root transformation
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())  # Min-Max scaling
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)  # Convert 'sex' to numerical values
    # Additional data processing can be implemented here
    return df
";{0: 0.9054461434594252}
4996;"
    df.fillna(df.median(), inplace=True)
    df['thalachh'] = np.log1p(df['thalachh'])
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    df.dropna(inplace=True)
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'slp', 'age'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    # Additional preprocessing steps can be added here
    return df
";{0: 0.9054461434594252}
4997;"
    df.fillna(df.median(), inplace=True)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    df.dropna(inplace=True)
    
    df.drop(columns=['exng', 'fbs', 'oldpeak', 'chol', 'trtbps', 'age', 'slp'], inplace=True)
    df['caa'] = np.sqrt(df['caa'])
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
    
    # Continue with additional data processing if necessary

    return df
";{0: 0.9017443983510169}
