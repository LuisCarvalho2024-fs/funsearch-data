0;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7200387895382333}
1;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7547820716900614}
2;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7409815598061289}
3;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7120818002909214}
4;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
  return df
";{0: 0.7200387895382333}
5;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7120818002909214}
6;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7528465878190937}
7;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7491525579683473}
8;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7476482264727956}
9;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  return df
";{0: 0.7900495663494831}
10;"
  # Selecting the five most important columns from the dataset
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7416601471411276}
11;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7258460265664776}
12;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7226828931870963}
14;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7416183223524714}
15;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7200387895382333}
16;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)  # Convert categorical sex to binary
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)  # Discretize 'cp' column into 4 bins
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode 'cp' column
  df.dropna(inplace=True)
  return df
";{0: 0.7197854205058716}
17;"
  # Selecting the five most important columns for the dataset
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  return df
";{0: 0.7913105599666169}
18;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  return df
";{0: 0.7504315442772662}
19;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7453531445055825}
20;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: -1}
21;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  return df
";{0: 0.7254744781371353}
22;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  return df
";{0: 0.7884403709471843}
23;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.746179921152427}
24;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7535880418393152}
25;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7471364289360893}
26;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7212114454613082}
27;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7453531445055825}
28;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7364617857948296}
30;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.7710991219211392}
31;"

  # Select only the columns cp, thalachh, oldpeak, caa, exng
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  
  return df
";{0: 0.7884403709471843}
32;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7175240003340035}
33;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7493574760011343}
34;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.7452896793909648}
35;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
  return df
";{0: 0.7053724053724054}
36;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7409815598061289}
38;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7471364289360893}
39;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df['exng'] = df['exng'].apply(lambda x: 1 if x == 1 else 0)
  return df
";{0: 0.7884403709471843}
40;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7493574760011343}
41;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  return df
";{0: 0.787291522420345}
42;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7432414468117787}
43;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df['exng'] = df['exng'].astype(int)  # Convert 'exng' column to integer type
  return df
";{0: 0.7926484364059803}
44;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7483304587868356}
45;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7495837103437634}
46;"
  # Selecting relevant columns
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  # Encoding categorical variable 'sex'
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  
  # One-hot encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.7316283242909815}
47;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7513350976508871}
48;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7476482264727956}
49;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  return df
";{0: 0.7292973219599792}
50;"
    df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
    
    return df
";{0: 0.7364617857948296}
51;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7120818002909214}
52;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.753191019506809}
53;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  return df
";{0: 0.787291522420345}
54;"
    # Selecting specific columns from the dataset
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
    # Encoding categorical variable 'sex' to numerical
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  
    # One-hot encoding the 'cp' column to handle categorical data
    df = pd.get_dummies(df, columns=['cp'])
  
    # Dropping rows with missing values
    df.dropna(inplace=True)
  
    return df
";{0: 0.7261692672190212}
55;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  
  return df
";{0: 0.7884403709471843}
56;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]  # Return only selected columns
";{0: 0.7200387895382333}
57;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df.dropna(inplace=True)
  return df
";{0: 0.7884403709471843}
58;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7409815598061289}
59;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.77525212738562}
60;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7471364289360893}
61;"
  # Fill missing values if any
  df.fillna(0, inplace=True)
  
  return df
";{0: 0.8032222236793694}
62;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7406848160328636}
63;"
  df.dropna(inplace=True)
  
  return df
";{0: 0.8128072616688492}
64;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.71827026899072}
65;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.77525212738562}
66;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  # Encoding 'cp' column with one-hot-encoding
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.7452896793909648}
67;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.7486041406245141}
68;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7781947657605552}
69;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode cp column
  df = df.dropna()  # Drop rows with missing values
  return df
";{0: 0.7541677853259027}
70;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7507242331066005}
72;"
  df.fillna(0, inplace=True)
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7104726048886226}
73;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.77525212738562}
75;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.7892243785392921}
76;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7383144597385327}
77;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df.dropna(inplace=True)
  return df
";{0: 0.7926484364059803}
78;"
  df.dropna(inplace=True)
  
  return df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
";{0: 0.7409815598061289}
80;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  
  return df
";{0: 0.7106368899917287}
81;"
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.8100018846963184}
82;"
  df = df[['thalachh', 'oldpeak', 'slp', 'caa', 'exng']]
  df = pd.get_dummies(df, columns=['slp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.7625786266167836}
83;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7893887956113016}
84;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7258460265664776}
85;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7197854205058716}
86;"
  df = df[['age', 'restecg', 'thalachh', 'chol', 'exng']]
  df = pd.get_dummies(df, columns=['restecg'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.7310824177260761}
88;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.dropna(inplace=True)
  
  return df
";{0: 0.7200387895382333}
89;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']].dropna()  # Return selected columns and drop NA values
";{0: 0.7884403709471843}
90;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  
  return df
";{0: 0.7022452816001202}
91;"
  return df[['thalachh', 'oldpeak', 'caa', 'exng', 'chol']].dropna()  # Return selected columns and drop NA values
";{0: 0.7467844932844934}
92;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.dropna(inplace=True)
    return df
";{0: 0.7175240003340035}
94;"
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7972900202895388}
95;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df = pd.get_dummies(df, columns=['cp'])
  df['exng'] = df['exng'].apply(lambda x: 1 if x == 'Yes' else 0)
  df.dropna(inplace=True)

  return df
";{0: 0.7819509604393188}
96;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7675655138251231}
97;"
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'exng']]
  df['exng'] = df['exng'].apply(lambda x: 1 if x == 'Yes' else 0)
  
  return df
";{0: 0.7334477393840222}
99;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.dropna(inplace=True)
    return df
";{0: 0.71827026899072}
100;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']].dropna()
  return df
";{0: 0.7900495663494831}
101;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'slp']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7656008960767763}
102;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7159625766830277}
104;"
  # Selecting the specified columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.740397793071866}
105;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7120818002909214}
106;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7175240003340035}
107;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7212114454613082}
108;"
  # Keep only the specified columns
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  return df
";{0: 0.7596118721461187}
109;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  return df
";{0: 0.7831385169558642}
110;"
  # Selecting top 5 important columns
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]

  # Encoding categorical variable 'sex'
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)

  # One-hot encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'])

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.7261692672190212}
111;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.7892243785392921}
112;"
  return df[['age', 'sex', 'cp', 'thalachh', 'restecg']]  # Return selected columns with potential impact on the target
";{0: 0.7661823849666315}
113;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.723494149587735}
115;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = pd.factorize(df['sex'])[0]
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.7799575862733759}
116;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.dropna(inplace=True)
    return df
";{0: 0.7175240003340035}
117;"
    df = df[['age', 'sex', 'thalachh', 'oldpeak', 'caa']]
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'M' else 0)
    df.dropna(inplace=True)
    
    return df
";{0: 0.7176727295692813}
118;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']]  # Updated to include 'exng' column
";{0: 0.7488380626223091}
120;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7197854205058716}
122;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()  # Select 5 columns and drop rows with missing values
";{0: 0.7550880626223091}
123;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  # Encoding 'cp' column with one-hot-encoding
  df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
  
  return df
";{0: 0.7576843040000935}
124;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]  # Selecting relevant columns
  df.dropna(inplace=True)  # Dropping rows with missing values
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)  # Convert categorical sex to binary
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)  # Discretize 'cp' column into 4 bins
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode 'cp' column
  return df
";{0: 0.7648153051961126}
125;"
  # Selecting relevant columns
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.7884403709471843}
126;"
    df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
    return df
";{0: 0.7409815598061289}
127;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7120818002909214}
128;"
  df.dropna(inplace=True)
  
  return df
";{0: 0.7946584413421703}
129;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7648153051961126}
130;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  return df
";{0: 0.752945205479452}
131;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7516525579683474}
132;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()  # Select 5 columns and drop rows with missing values
";{0: 0.7488380626223091}
133;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7200387895382333}
134;"
  df.fillna(0, inplace=True)
  
  return df
";{0: 0.8167815457132676}
136;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  return df
";{0: 0.7292973219599792}
137;"
# Improved version with additional preprocessing steps
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = df['cp'].apply(lambda x: 1 if x >= 2 else 0)  # Grouping cp -> Non-anginal Pain + Asymptomatic
    df['slp'] = df['slp'].map({0: 'low', 1: 'medium', 2: 'high'})  # Encoding slp as categorical
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.dropna(inplace=True)
  
    return df
";{0: 0.7534111676443286}
138;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()  # Select 5 columns and drop rows with missing values
";{0: 0.7534751593965027}
140;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.dropna(inplace=True)
  
    return df
";{0: 0.7212114454613082}
141;"
  df.dropna(inplace=True)
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7453531445055825}
142;"
  new_df = df[['age', 'sex', 'cp', 'trtbps', 'chol']].copy()
  new_df['sex'] = new_df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  new_df = pd.get_dummies(new_df, columns=['cp'], drop_first=True)
  new_df.dropna(inplace=True)
  
  return new_df
";{0: 0.72452026899072}
143;"
  df.fillna(df.median(), inplace=True)
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7120818002909214}
144;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7573908997732672}
146;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7513350976508871}
147;"
  df = df[['age', 'sex', 'thalachh', 'slp', 'caa']]
  df.dropna(inplace=True)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)
  return df
";{0: 0.7066753642096109}
148;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  return df
";{0: 0.7215321704448276}
149;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  # Apply one-hot-encoding to 'cp' and 'slp' columns
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.7710991219211392}
150;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7471364289360893}
151;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]  # Updated to include 'caa' and 'oldpeak' columns
";{0: 0.7884403709471843}
153;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  return df
";{0: 0.7462785388127854}
154;"
  df.dropna(inplace=True)
  
  return df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
";{0: 0.7536799725045417}
155;"
  # Selecting only the necessary columns
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  return df
";{0: 0.7146806703474187}
156;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7175240003340035}
157;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7491525579683473}
158;"
  df.fillna(df.mean(), inplace=True)
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7146806703474187}
159;"
  df.dropna(inplace=True)
  
  return df[['age', 'sex', 'thalachh', 'cp', 'oldpeak']]
";{0: 0.7596118721461187}
160;"
  # Handling missing values by filling with mean
  df.fillna(df.mean(), inplace=True)
  
  # Selecting the five most important columns
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  return df
";{0: 0.7120818002909214}
161;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  
  df['cp'] = pd.Categorical(df['cp'])
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.7475847613581779}
162;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']].dropna()
  return df
";{0: 0.7884403709471843}
163;"
  df.dropna(subset=['age', 'sex', 'cp', 'chol', 'thalachh'], inplace=True)
  
  return df[['age', 'sex', 'cp', 'chol', 'thalachh']]
";{0: 0.7652979403637298}
164;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.77525212738562}
166;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
  
  return df
";{0: 0.7419847535020508}
167;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = pd.factorize(df['sex'])[0]
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.7721431784589681}
168;"
  df.dropna(inplace=True)
  
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7200387895382333}
169;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7200387895382333}
170;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.748764414519}
171;"
  df.dropna(inplace=True)
  
  # Selecting the FIVE most important columns based on domain knowledge
  df = df[['cp', 'thalachh', 'oldpeak', 'exng', 'caa']]
  
  return df
";{0: 0.7884403709471843}
172;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()  # Dropping rows with missing values
";{0: 0.7511198086540551}
173;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df = pd.get_dummies(df, columns=['cp'])
    df.dropna(inplace=True)
    return df
";{0: 0.73016312282578}
174;"
  df = df[['age', 'thalachh', 'oldpeak', 'cp', 'caa']]
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.7606171337242391}
175;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df['cp'] = df['cp'].apply(lambda x: x % 2)  # Applying transformation to 'cp' column
  return df
";{0: 0.7332111453243699}
176;"
  df.dropna(inplace=True)
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'])
  
  return df[['age', 'exng', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7320238361922844}
177;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.716125516137916}
178;"
  df.fillna(df.mean(), inplace=True)
  
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7200387895382333}
179;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7187484669575881}
180;"
  df = df[['sex', 'trtbps', 'chol', 'exng', 'thalachh']]
  df.dropna(inplace=True)
  
  return df
";{0: 0.7300220023840238}
182;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7820409196067091}
183;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7226828931870963}
184;"
  # Only keeping columns 'age', 'chol', 'thalachh', 'cp', 'oldpeak'
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  # One-hot encode 'cp' column
  df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
  
  return df
";{0: 0.7471364289360893}
185;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.752945205479452}
186;"
    return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7200387895382333}
187;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']]  # Returning only the selected columns
";{0: 0.7534751593965027}
188;"
  return df[['age', 'sex', 'thalachh', 'oldpeak', 'exng']]
";{0: 0.7402068600361885}
189;"
    # Selecting the required columns and dropping rows with missing values
    return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7120818002909214}
191;"
  return df[['thalachh', 'oldpeak', 'caa', 'exng', 'cp']].dropna()
";{0: 0.7884403709471843}
192;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  return df
";{0: 0.7316283242909815}
193;"
  return df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']].dropna()
";{0: 0.7528465878190937}
194;"
  df.dropna(inplace=True)
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'])
  
  return df[['age', 'exng', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7409151949030375}
195;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
    df['cp'] = df['cp'].apply(lambda x: 0 if x == 'Typical Angina' else 1 if x == 'Atypical Angina' else 2 if x == 'Non-anginal Pain' else 3)
    df.dropna(inplace=True)
    
    return df
";{0: 0.7140188834154351}
196;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7544505818235381}
197;"
    return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.716125516137916}
199;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7425483307062746}
201;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()  # Selecting specified columns and dropping rows with missing values
";{0: 0.7569889213264466}
202;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7197854205058716}
203;"
  # Selecting the relevant columns
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  # Encoding the 'sex' column
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  
  # One-hot encoding the 'cp' column
  df = pd.get_dummies(df, columns=['cp'])
  
  # Dropping rows with NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.7292973219599792}
204;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thall_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
205;"
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  return df
";{0: 0.7364617857948296}
206;"
    return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna().reset_index(drop=True)
";{0: 0.7200387895382333}
207;"
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
  
  # Fill NA values with the mean of the column
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7652979403637298}
208;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7175240003340035}
209;"
  # Selecting columns of interest
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  # Encoding categorical variable 'sex'
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  
  # One-hot encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.7282702689907199}
211;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  
  return df
";{0: 0.7926484364059803}
212;"
  df = df[['sex', 'trtbps', 'chol', 'exng', 'thalachh']]
  df.dropna(inplace=True)
  
  return df
";{0: 0.7321337000778276}
213;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7221164228368738}
214;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7544505818235381}
215;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7187484669575881}
216;"
  # Selecting the five most important columns
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]

  # Encoding categorical variable 'sex'
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)

  # One-hot encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'])

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.7215321704448276}
217;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7479989689203123}
218;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.723494149587735}
220;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = pd.factorize(df['sex'])[0]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7658057423545828}
222;"
  df.fillna(method='ffill', inplace=True)
  
  return df[['age', 'thalachh', 'chol', 'caa', 'oldpeak']]
";{0: 0.7434075462750599}
223;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7504315442772662}
225;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7187484669575881}
226;"
  # Fill missing values with median
  df.fillna(df.median(), inplace=True)
  
  # Reduce dataframe to the 5 most important columns
  selected_columns = ['age', 'sex', 'cp', 'trtbps', 'chol']
  
  return df[selected_columns]
";{0: 0.7120818002909214}
227;"
  df = df[['age', 'cp', 'thalachh', 'oldpeak', 'exng']]
  return df
";{0: 0.7476482264727956}
229;"
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.8128072616688492}
230;"
  df.dropna(subset=['age', 'sex', 'cp', 'trtbps', 'chol'], inplace=True)
  
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7146806703474187}
231;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df['exng'] = df['exng'].astype(int)  # Convert 'exng' column to integer type
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7772485397163726}
232;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7781947657605552}
233;"
  df.fillna(df.mode().iloc[0], inplace=True)
  
  return df
";{0: 0.8016759852018195}
234;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  return df
";{0: 0.7573908997732672}
235;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.740397793071866}
236;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
";{0: 0.752945205479452}
237;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df.dropna(inplace=True)
  df['sex'] = pd.factorize(df['sex'])[0]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7324052627263946}
238;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7120818002909214}
239;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  return df
";{0: 0.7462785388127854}
240;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7672700100470771}
241;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7425483307062746}
242;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df['cp'] = np.where(df['cp'] < 2, 0, 1)  # Applying transformation to 'cp' column
  return df
";{0: 0.7460894643455525}
243;"
  df = df[['age', 'thalachh', 'oldpeak', 'cp', 'slp']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.7468284187465891}
244;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df['cp'] = df['cp'].apply(lambda x: x % 2)  # Applying transformation to 'cp' column
  df = pd.get_dummies(df, columns=['cp'])     # One-hot encoding 'cp' column
  df.dropna(inplace=True)
  
  return df
";{0: 0.7343397237437485}
245;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  return df
";{0: 0.73016312282578}
246;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7786598300389532}
247;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].assign(sex=df['sex'].apply(lambda x: 1 if x == 'Male' else 0)).dropna()
";{0: 0.7076104082767223}
250;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df[['sex', 'cp']] = df[['sex', 'cp']].astype('category')
  df = pd.get_dummies(df)
  df.dropna(inplace=True)

  return df
";{0: 0.7486041406245141}
251;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = pd.factorize(df['sex'])[0]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7613638954814091}
252;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7226828931870963}
253;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  # Filling missing values using mean of the column
  df.fillna(df.mean(), inplace=True)

  return df
";{0: 0.7571088829010609}
254;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']].dropna()  # Updated to drop rows with missing values
";{0: 0.7884403709471843}
255;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0) 
  df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: -1}
256;"
  df.fillna(df.mean(), inplace=True)
  
  return df[['age', 'exng', 'thalachh', 'oldpeak', 'cp']]
";{0: 0.7409815598061289}
257;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  return df
";{0: 0.7900495663494831}
258;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.746179921152427}
259;"
  df.dropna(inplace=True)
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7519105215547628}
260;"
    return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna().reset_index(drop=True)
";{0: 0.752945205479452}
261;"
    df = df[['age', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['age_normalized'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['thalachh_cat'] = pd.qcut(df['thalachh'], q=3, labels=[0, 1, 2])
    df.drop(columns=['age', 'thalachh'], inplace=True)
    
    return df
";{0: 0.7495933310051084}
262;"
  df.dropna(subset=['age', 'sex', 'cp', 'trtbps', 'chol'], inplace=True)
  
  return df
";{0: 0.8059107099447111}
263;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna() # Select 5 columns and drop rows with missing values
";{0: 0.7599267722997285}
264;"
  # Impute missing values with 0
  df.fillna(0, inplace=True)
  
  return df
";{0: 0.8100018846963184}
265;"
    return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna().reset_index(drop=True)
";{0: 0.7120818002909214}
266;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna().reset_index(drop=True)
";{0: 0.7120818002909214}
267;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()  # Selecting relevant columns and dropping missing values
";{0: 0.7504315442772662}
268;"
    df = df[['sex', 'cp', 'thalachh', 'exng', 'oldpeak']]
    df['sex_encoded'] = pd.get_dummies(df['sex'], drop_first=True)
    df.drop(columns=['sex'], inplace=True)
    df['thalachh_bin'] = pd.cut(df['thalachh'], bins=3, labels=[0, 1, 2])
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.7947496771818374}
269;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df.dropna(inplace=True)
    return df
";{0: 0.723494149587735}
270;"
  df.fillna(df.mean(), inplace=True)
  
  return df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
";{0: 0.7453531445055825}
271;"
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.8139566869562055}
272;"
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'cp']]
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.7475847613581779}
273;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.7512030106810113}
274;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7146806703474187}
275;"
  df = df[['age', 'cp', 'chol', 'thalachh', 'exng']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7313898502459623}
276;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7226828931870963}
278;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
    df = pd.get_dummies(df, columns=['cp'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.7316283242909815}
280;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7197854205058716}
282;"
  return df[['age', 'sex', 'cp', 'thalachh', 'exng']].dropna()  # Returning selected columns and dropping NA values
";{0: 0.7534751593965027}
283;"
  df = df[['chol', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['slp'] = df['slp'].astype(str)  # Convert 'slp' column to string type
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)
  df.dropna(inplace=True)

  return df
";{0: 0.7180580364005301}
284;"
  df.dropna(subset=['age', 'cp', 'thalachh', 'oldpeak'], inplace=True)
  df['exng'] = df['exng'].fillna(0)
  
  return df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
";{0: 0.7409815598061289}
285;"
  df.fillna(df.mean(), inplace=True)
  
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7200387895382333}
286;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna().reset_index(drop=True)
";{0: 0.7200387895382333}
287;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()  # Dropping rows with missing values
";{0: 0.7462785388127854}
288;"
    return df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
";{0: 0.7801951036490948}
289;"
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'exng']]
  df['exng'] = df['exng'].apply(lambda x: 1 if x == 'Yes' else 0)
  
  return df
";{0: 0.735665481319506}
290;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7627933010331629}
291;"
  df = df[['sex', 'trtbps', 'chol', 'exng', 'thalachh']]
  df['thalachh'] = df['thalachh'].apply(lambda x: x if x > df['thalachh'].mean() else df['thalachh'].median())
  df.dropna(inplace=True)
  
  return df
";{0: 0.7173631934032985}
292;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = pd.factorize(df['sex'])[0]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7544673437572712}
293;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]  # Select relevant columns
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)  # One-hot encode 'slp'
  df.dropna(inplace=True)  # Drop rows with missing values

  return df
";{0: 0.7715845513713949}
294;"
  return df[['age', 'cp', 'thalachh', 'oldpeak', 'exng']]
";{0: 0.7453531445055825}
295;"
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'exng']].apply(pd.to_numeric, errors='coerce').dropna()
";{0: 0.7277209492459387}
296;"
  df = df[['sex', 'trtbps', 'chol', 'exng', 'thalachh']]
  df['thalachh'] = df['thalachh'].apply(lambda x: x if x > df['thalachh'].mean() else df['thalachh'].median())
  df.dropna(inplace=True)
  
  return df
";{0: 0.7202798600699651}
297;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    df['sex'] = df['sex'].map({0: 'female', 1: 'male'})  # Encoding sex as categorical
    df = pd.get_dummies(df, columns=['cp', 'sex'])
    df.dropna(inplace=True)

    return df
";{0: 0.7596407402005708}
298;"
  df.fillna(df.mean(), inplace=True)
  
  return df[['age', 'sex', 'cp', 'trtbps', 'chol', 'fbs', 'restecg', 'thalachh', 'oldpeak', 'slp', 'caa', 'thall', 'exng']]
";{0: 0.8044328774323958}
299;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  return df
";{0: 0.752945205479452}
300;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7624424238401806}
301;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.dropna(inplace=True)
  
  return df
";{0: 0.7200387895382333}
302;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
";{0: 0.752945205479452}
303;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.7892243785392921}
304;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7504315442772662}
305;"
  df.dropna(subset=['age', 'sex', 'cp', 'trtbps', 'chol'], inplace=True)
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.716125516137916}
306;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']].dropna()
";{0: 0.7884403709471843}
307;"
  df.dropna(subset=['age', 'exng', 'thalachh', 'cp', 'oldpeak'], inplace=True)
  
  return df
";{0: 0.8072900202895387}
308;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7786598300389532}
309;"
  # Keep only selected columns
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7483304587868356}
310;"
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.8100018846963184}
311;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  return df
";{0: 0.7573908997732672}
312;"
  df.dropna(subset=['age', 'exng', 'thalachh', 'cp', 'oldpeak'], inplace=True)
  
  return df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
";{0: 0.7409815598061289}
313;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode 'cp' column
  return df
";{0: 0.7786598300389532}
315;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna().reset_index(drop=True)
";{0: 0.7095681390887357}
316;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna().reset_index(drop=True)
";{0: 0.7544505818235381}
317;"
  df = df[['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7252801884243938}
318;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.716125516137916}
319;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7544505818235381}
320;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df.fillna(df.mean(), inplace=True)  # Fill missing values with the mean of each column
  return df
";{0: 0.7884403709471843}
321;"
  # Selecting the five most important columns
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  
  # Dropping rows with any missing values
  df.dropna(inplace=True)
  
  # Converting categorical feature 'sex' to numerical using factorize
  df['sex'] = pd.factorize(df['sex'])[0]
  
  # Performing one-hot encoding for the categorical feature 'cp'
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.782361432427222}
322;"
  return df.fillna(df.mean())
";{0: 0.7990141582205732}
323;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)
  return df
";{0: 0.7221164228368738}
324;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7528465878190937}
325;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df.dropna(inplace=True)
  df['sex'] = pd.factorize(df['sex'])[0]
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.776111432427222}
326;"
  df = df[['thalachh', 'oldpeak', 'chol', 'restecg', 'exng']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['restecg'], drop_first=True)
  return df
";{0: 0.7511442186845413}
327;"
    return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna().reset_index(drop=True)
";{0: 0.7569889213264466}
328;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['age', 'sex', 'cp', 'thalachh', 'caa']].dropna()
";{0: 0.7801951036490948}
329;"
    return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.7146806703474187}
330;"
    df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
    df.dropna(inplace=True)

    return df
";{0: 0.7525291275016335}
331;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  
    df = pd.get_dummies(df, columns=['cp'])
  
    df.dropna(inplace=True)
  
    return df
";{0: 0.7197176543157953}
332;"
  return df[['age', 'exng', 'thalachh', 'oldpeak', 'cp']]
";{0: 0.7495837103437634}
333;"
  # Fill missing values with the mean of each column
  df.fillna(df.mean(), inplace=True)
  
  # Select the FIVE most important columns for the model
  return df[['age', 'cp', 'thalachh', 'oldpeak', 'exng']]
";{0: 0.7476482264727956}
335;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.dropna(inplace=True)
  
  return df
";{0: 0.7146806703474187}
337;"
  df.dropna(inplace=True)
  
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
";{0: 0.7504315442772662}
338;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
  return df
";{0: 0.7053724053724054}
339;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8345110087045571}
340;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.77525212738562}
341;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8382808499743983}
342;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8370711725550436}
343;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['cp'] = df['cp'].apply(lambda x: x % 2)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.6477400089224549}
344;"
  df.dropna(subset=['age', 'sex', 'cp', 'trtbps', 'chol'], inplace=True)
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  return df
";{0: 0.7135871766350075}
345;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8345110087045571}
346;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
347;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]  
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
348;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
349;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8370711725550436}
350;"
  df.dropna(inplace=True)
  
  return df
";{0: 0.811224446519047}
351;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df['cp'] = (df['cp'] >= 2).astype(int)  # Transforming 'cp' column using boolean conversion
  return df
";{0: 0.7439036719958256}
352;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']].dropna()
";{0: 0.716125516137916}
353;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  
  df['cp'] = pd.Categorical(df['cp'])
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7554025579683474}
354;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
356;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
358;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thall_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
359;"
  # Selecting columns with highest correlation with the target
  df = df[['age', 'thalachh', 'cp', 'oldpeak', 'exng']]
  df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column
  df.dropna(inplace=True)
  
  return df
";{0: 0.7409151949030375}
360;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
361;"
    # Selecting the five most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning the 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating a binary column based on the mean of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
362;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  return df
";{0: 0.7120818002909214}
363;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8370711725550436}
364;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.7987474263747645}
365;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7383144597385327}
366;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.740397793071866}
367;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3], include_lowest=True)
  df['thalachh'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  return df
";{0: 0.8370711725550436}
368;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
369;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
370;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7547820716900614}
371;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = df['cp'].apply(lambda x: 1 if x >= 2 else 0) 
    df['slp'] = df['slp'].map({0: 'low', 1: 'medium', 2: 'high'})  
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.75126063000992}
372;"
  return df[['age', 'sex', 'cp', 'chol', 'thalachh']].fillna(df.mean())
";{0: 0.7731123481781376}
373;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  
  return df
";{0: 0.7471364289360893}
374;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
375;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7120818002909214}
376;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'] = df['thalachh'].fillna(df['thalachh'].mean())
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  
  return df
";{0: 0.779996112782998}
378;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  return df
";{0: 0.752945205479452}
379;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]  # Select relevant columns
  df['cp'] = pd.cut(df['cp'], bins=4, labels=['Typical Angina', 'Atypical Angina', 'Non-anginal Pain', 'Asymptomatic'])  # Binning 'cp' column
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)  # One-hot encode 'cp' and 'slp'
  df.dropna(inplace=True)  # Drop rows with missing values

  return df
";{0: -1}
380;"
  df = df[['age', 'thalachh', 'oldpeak', 'caa', 'chol']]
  df.dropna(inplace=True)
  
  return df
";{0: 0.7388098451256345}
381;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thall_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
382;"
  return df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']].dropna()
";{0: 0.7505515058518807}
384;"
  return df.fillna(df.mean())
";{0: 0.8167815457132676}
385;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7120818002909214}
386;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  return df
";{0: 0.8408602150537634}
387;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
388;"
  df.dropna(inplace=True)
  df = df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
  
  return df
";{0: 0.7386827092314163}
389;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df['cp'] = df['cp'].apply(lambda x: 1 if x >= 2 else 0)  # Simplifying cp column
  return df
";{0: 0.7504610490450061}
390;"
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'cp']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  return df
";{0: 0.7576843040000935}
391;"
  df.dropna(subset=['age', 'exng', 'thalachh', 'cp', 'oldpeak'], inplace=True)
  df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column
  df['age'] = np.log(df['age'])  # Log transformation of 'age'
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization of 'thalachh'
  df['oldpeak'] = np.where(df['oldpeak'] > 2, 1, 0)  # Binary transformation of 'oldpeak'
  
  return df[['age', 'exng', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'oldpeak']]
";{0: 0.774137641280284}
392;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8345110087045571}
393;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
394;"
    # Selecting the columns to keep
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating a binary column from 'thalachh' based on the mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8382808499743983}
395;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.8067934033862587}
396;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7120818002909214}
397;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
399;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
400;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]  # Select relevant columns
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)  # One-hot encode 'slp'
  df.dropna(inplace=True)  # Drop rows with missing values

  return df
";{0: 0.7675655138251231}
401;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
402;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8345110087045571}
403;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  return df
";{0: 0.787291522420345}
404;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning the 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating a binary column based on the mean of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8345110087045571}
405;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  
  return df
";{0: 0.7823514635254455}
406;"
  df = df[['age', 'thalachh', 'oldpeak', 'caa', 'chol']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7434075462750599}
407;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.7831385169558642}
409;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
413;"
  return df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']].dropna()
";{0: 0.7547820716900614}
414;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.7945127016318728}
415;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  df['thalachh'] = np.log1p(df['thalachh'])
  df['oldpeak'] = np.sqrt(df['oldpeak'])
  return df
";{0: 0.7503366451257552}
416;"
  df = df[['sex', 'trtbps', 'chol', 'exng', 'thalachh']]
  df['thalachh'] = df['thalachh'].apply(lambda x: x if x > df['thalachh'].mean() else df['thalachh'].median())
  df.dropna(inplace=True)
  
  return df
";{0: 0.7173631934032985}
417;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'trtbps', 'chol', 'thalachh']]
  
  return df
";{0: 0.722481266125946}
418;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating a binary column from 'thalachh' based on the mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8382808499743983}
419;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
421;"
  df.fillna(df.mean(), inplace=True)
  df = df[['age', 'sex', 'trtbps', 'chol', 'thalachh']]
  
  return df
";{0: 0.7246281587813133}
422;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thall_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
423;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  
  return df
";{0: 0.779996112782998}
424;"
  df = df[['age', 'thalachh', 'cp', 'oldpeak', 'exng']]
  df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column
  df.dropna(inplace=True)
  
  return df
";{0: 0.7388034972092336}
425;"
  df.fillna(df.mean(), inplace=True)
  df = df[['age', 'thalachh', 'oldpeak', 'chol', 'sex']]
  
  return df
";{0: 0.7418623481781376}
426;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.7454173067076293}
427;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7187484669575881}
428;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = df['cp'].apply(lambda x: 1 if x >= 2 else 0) 
    df['slp'] = df['slp'].map({0: 'low', 1: 'medium', 2: 'high'})  
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.7490748376601932}
429;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
   
  # Binarize thalachh column based on mean value
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Drop the original thalachh column
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8370711725550436}
430;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp', 'fbs', 'restecg'])
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'slp']]
";{0: 0.7310958624052795}
431;"
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'exng']].apply(pd.to_numeric, errors='coerce').dropna()
";{0: 0.7277209492459387}
432;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
433;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7200387895382333}
434;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
436;"
  df = df[['chol', 'thalachh', 'cp', 'oldpeak', 'restecg']]
  df['cp'] = df['cp'].astype('category')
  df = pd.get_dummies(df)
  df.dropna(inplace=True)

  return df
";{0: 0.7803656114000941}
437;"
  return df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']].dropna()
";{0: 0.7547820716900614}
438;"
  df = df[['age', 'thalachh', 'oldpeak', 'cp', 'chol']]
  
  df['cp'] = pd.Categorical(df['cp'])
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7493574760011343}
441;"
  # Selecting the desired columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]

  # Binning the 'cp' column
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])

  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8345110087045571}
444;"
  df = df[['age', 'thalachh', 'cp', 'oldpeak', 'exng']]
  df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column
  df.dropna(inplace=True)
  
  return df
";{0: 0.7455831582261827}
445;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8370711725550436}
446;"
  df.dropna(subset=['age', 'exng', 'thalachh', 'cp', 'oldpeak'], inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.8015302454915219}
447;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8382808499743983}
448;"
  df = df[['age', 'trtbps', 'chol', 'thalachh', 'exng']]
  df = pd.get_dummies(df, columns=['exng'], drop_first=True)
  df.dropna(inplace=True)

  return df
";{0: 0.7183865665367989}
450;"
  return df[['age', 'exng', 'thalachh', 'oldpeak', 'cp']]
";{0: 0.7409815598061289}
451;"
  df.fillna(df.mean(), inplace=True)
  
  return df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
";{0: 0.7560353232469892}
452;"
  return df.fillna(df.mean())
";{0: 0.8128072616688492}
455;"
  df = df[['sex', 'trtbps', 'chol', 'thalachh', 'exng']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), df['thalachh'], df['thalachh'].mean())
  df.dropna(inplace=True)
  
  return df
";{0: 0.7234530179793499}
456;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])
  
  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7805637419430524}
457;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.8138965693804405}
458;"
  df = df[['age', 'trtbps', 'chol', 'thalachh', 'exng']]
  df = pd.get_dummies(df, columns=['exng'], drop_first=True)
  df.dropna(inplace=True)

  return df
";{0: 0.7183865665367989}
460;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8382808499743983}
461;"
    # Selecting the desired columns
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning the 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating a binary column based on the mean of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8370711725550436}
463;"
  df.fillna(df.mean(), inplace=True)
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  return df
";{0: 0.7187484669575881}
464;"
  df = df[['age', 'thalachh', 'cp', 'oldpeak', 'exng']]
  df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column
  df.dropna(inplace=True)

  return df
";{0: 0.7455831582261827}
465;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
466;"
  return df.fillna(df.mean())
";{0: 0.8139566869562055}
467;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
468;"
  df.fillna(df.mean(), inplace=True)
  df.drop(['sex', 'trtbps', 'chol', 'fbs', 'restecg', 'slp', 'caa', 'thall'], axis=1, inplace=True)
  
  return df
";{0: 0.7453531445055825}
469;"
  df = df[['thalachh', 'oldpeak', 'slp', 'caa', 'exng']]  # Selecting columns
  df = pd.get_dummies(df, columns=['slp'])  # One-hot encoding 'slp' column
  df.dropna(inplace=True)  # Dropping rows with missing values
  return df
";{0: 0.7632135472517042}
470;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.7425483307062746}
471;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8345110087045571}
474;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
477;"
  df = df[['age', 'trtbps', 'chol', 'thalachh', 'exng']]
  df = pd.get_dummies(df, columns=['exng'], drop_first=True)
  df.dropna(inplace=True)

  return df
";{0: 0.7137964026023728}
478;"
  return df.dropna()[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].fillna(df.mean())
";{0: 0.752945205479452}
479;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
480;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
481;"
  df.dropna(inplace=True)
  df = df[['age', 'sex', 'thall', 'exng', 'chol']]
  
  return df
";{0: 0.7092623269655005}
482;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.7477982590885818}
483;"
  df.dropna(inplace=True)  # Dropping rows with missing values
  df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column
  df['age'] = np.log(df['age'])  # Log transformation of 'age'
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  # Standardization of 'thalachh'
  df['oldpeak'] = np.where(df['oldpeak'] > 2, 1, 0)  # Binary transformation of 'oldpeak'
  
  return df[['age', 'exng', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'oldpeak']]
";{0: 0.7740282919090429}
484;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8345110087045571}
485;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # One-hot encoding categorical columns and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.740397793071866}
486;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.809983295980123}
487;"
  df.dropna(subset=['age', 'sex', 'cp', 'thalachh', 'oldpeak'], inplace=True)
  return df
";{0: 0.8128072616688492}
488;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']] 
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) 
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)

  return df
";{0: 0.8074449564772145}
489;"
  df = df[['age', 'sex', 'thalachh', 'chol', 'exng']]
  df = pd.get_dummies(df, columns=['sex', 'exng'], drop_first=True)
  df.dropna(inplace=True)

  return df
";{0: 0.7390214853372747}
490;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Scaling 'thalachh' column to have mean 0 and standard deviation 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.8198255311290742}
491;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]  
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.809983295980123}
492;"
  return df.dropna()[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7187484669575881}
493;"
  df = df[['chol', 'thalachh', 'cp', 'oldpeak', 'restecg']]
  df = pd.get_dummies(df, columns=['cp', 'restecg'])
  df.dropna(inplace=True)

  return df
";{0: 0.777299858611334}
494;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
";{0: 0.752945205479452}
495;"
  df = df[['age', 'trtbps', 'chol', 'thalachh', 'exng']]
  df['exng'] = df['exng'].apply(lambda x: 1 if x == 1 else 0)  # Convert 'exng' to binary
  df.dropna(inplace=True)

  return df
";{0: 0.7137964026023728}
496;"
  # Selecting important columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' values
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8345110087045571}
497;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['cp'] = df['cp'].apply(lambda x: x % 2)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.650112890278387}
502;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
503;"
  df.fillna(0, inplace=True)
  return df[['age', 'exng', 'thalachh', 'oldpeak', 'cp']]
";{0: 0.7453531445055825}
504;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.7960589401094225}
505;"
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
  df['sex'] = df['sex'].astype('category')
  df = pd.get_dummies(df, drop_first=True)
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.7768419519077414}
506;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
507;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_high'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8345110087045571}
509;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
510;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning the 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating a binary column based on the mean of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8382808499743983}
511;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8345110087045571}
512;"
  # Keep only selected columns and drop rows with missing values
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'exng']].apply(pd.to_numeric, errors='coerce').dropna()
";{0: 0.7232400749289988}
513;"
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
  
  return df
";{0: 0.7716471467129361}
514;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
515;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' values into 4 categories
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  # One-hot encoding 'slp'
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8286040272679147}
516;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  
  return df[['age', 'chol', 'thalachh', 'oldpeak', 'slp']]
";{0: 0.7290477313248903}
517;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' values
  bins = [0, 1.25, 2.5, 3.75, 5]
  labels = [0, 1, 2, 3]
  df['cp'] = pd.cut(df['cp'], bins=bins, labels=labels, include_lowest=True)
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8007768773063546}
518;"
  df.fillna(df.mean(), inplace=True)
  
  return df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']]
";{0: 0.7409815598061289}
519;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.740397793071866}
520;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8370711725550436}
521;"
  return df.dropna().iloc[:, [0, 12, 7, 9, 11]]
";{0: 0.7495592635961488}
522;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
524;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']] # Selecting the columns of interest
    df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0) # Creating a binary feature from thalachh column
    df.drop(columns=['thalachh'], inplace=True) # Dropping the original thalachh column

    return df
";{0: 0.8408602150537634}
525;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.7454173067076293}
526;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encode the 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.7529003346458885}
527;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])  # One-hot encoding 'sex' and 'cp' columns
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  # Min-Max scaling of 'age'
  df['trtbps'] = np.log1p(df['trtbps'])  # Log transformation of 'trtbps'
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()  # Standardization of 'chol'
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8321883944834765}
528;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7990086709811723}
529;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  # Binning 'age' values into 3 categories
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  
  # Converting 'sex' values to binary
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  
  # One-hot encoding 'cp'
  df = pd.get_dummies(data=df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7734726183383527}
530;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])
  
  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7736671902189144}
531;"
  df = df[['age', 'thalachh', 'oldpeak', 'caa', 'chol']]
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['caa'], drop_first=True)

  return df
";{0: 0.6645942674216847}
532;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8271610258249134}
533;"
  df.dropna(inplace=True)  
  df = pd.get_dummies(df, columns=['sex', 'cp'])  
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  
  df['trtbps'] = np.log1p(df['trtbps'])  
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()  
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.825631017434296}
534;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.752083973374296}
535;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8370711725550436}
536;"
  df.fillna(df.mean(), inplace=True)
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  return df
";{0: 0.7444394583530153}
537;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])  # One-hot encoding 'sex' and 'cp' columns
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  # Min-Max scaling of 'age'
  df['trtbps'] = np.log1p(df['trtbps'])  # Log transformation of 'trtbps'
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()  # Standardization of 'chol'
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8230926779313876}
538;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.825631017434296}
539;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.8138965693804405}
540;"
  df = df[['age', 'thalachh', 'cp', 'oldpeak', 'caa']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)

  return df
";{0: 0.7483442379140797}
541;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
542;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df.dropna(inplace=True)
  
  return df
";{0: 0.7054151336242548}
543;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
544;"
  df.dropna(subset=['age', 'exng', 'thalachh', 'cp', 'oldpeak'], inplace=True)  # Dropping rows with missing values
  df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column
  
  return df[['age', 'exng', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'oldpeak']]  # Return processed columns
";{0: 0.7388034972092336}
545;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8222548209187084}
546;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
547;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
548;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8271610258249134}
549;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  return df
";{0: 0.8408131038419245}
550;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8408602150537634}
551;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
552;"
  df = df[['age', 'trtbps', 'chol', 'thalachh', 'exng']]
  df['exng'] = df['exng'].apply(lambda x: 'Yes' if x == 1 else 'No')
  df = pd.get_dummies(df, columns=['exng'])
  
  return df
";{0: 0.7199029987089689}
553;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7990086709811723}
554;"
  df.fillna(df.mean(), inplace=True)
  
  cols_to_keep = ['age', 'sex', 'cp', 'thalachh', 'oldpeak']
  df = df[cols_to_keep]

  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)
  df = pd.get_dummies(df, columns=['cp'])

  return df
";{0: 0.7413690321236176}
555;"
  # Selecting the FIVE most important columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Performing one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.740397793071866}
556;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
557;"
  df.fillna(df.mean(), inplace=True)
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  return df
";{0: 0.7200387895382333}
558;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning 'thalachh' column into binary based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Standardizing 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.7787474082572668}
559;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7947748000134304}
560;"
  # Selecting columns 'age', 'chol', 'thalachh', 'oldpeak', 'exng'
  df = df[['age', 'chol', 'thalachh', 'oldpeak', 'exng']]
  
  # One-hot encoding 'exng' column
  df = pd.get_dummies(df, columns=['exng'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.7277209492459387}
561;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.740397793071866}
562;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])
  
  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7757361557361558}
563;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])  # One-hot encoding 'sex' and 'cp' columns
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  # Min-Max scaling of 'age'
  df['trtbps'] = np.log1p(df['trtbps'])  # Log transformation of 'trtbps'
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()  # Standardization of 'chol'
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8295442908346133}
565;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['thalachh'] = np.log1p(df['thalachh'])
  df['oldpeak'] = np.where(df['oldpeak'] > 0.5, 1, 0)
  
  return df
";{0: 0.790586804499848}
566;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7425483307062746}
568;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
569;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
570;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning the 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Scaling 'thalachh' column between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Handling missing values in 'oldpeak' by filling with mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.8369376558132509}
571;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)

  return df
";{0: 0.8113364055299538}
572;"
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['sex', 'cp'])

  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8321883944834765}
573;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8345110087045571}
574;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' values into 4 categories
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  # Converting 'thalachh' values to binary based on median
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)

  # One-hot encoding 'slp'
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8193257607486018}
575;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  # Binning 'age' values into 3 categories
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  
  # Converting 'sex' values to binary
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  
  # One-hot encoding 'cp'
  df = pd.get_dummies(data=df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7711908723066065}
577;"
  df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
  
  # Process 'cp' column using one-hot-encoding
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7672579976106724}
578;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8379502934341645}
579;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'Male' else 0)
  df = pd.get_dummies(df, columns=['cp'])
  return df
";{0: 0.723236715899373}
580;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df['cp'] = pd.cut(df['cp'], bins=3, labels=[0, 1, 2])  # Binning 'cp' column into 3 categories
  return df
";{0: 0.7380418748661389}
581;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  return df
";{0: 0.752945205479452}
583;"
  df.dropna(subset=['age', 'exng', 'thalachh', 'cp', 'oldpeak'], inplace=True)
  df = pd.get_dummies(df, columns=['cp'])
  df['age'] = np.log(df['age'])
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['oldpeak'] = np.where(df['oldpeak'] > 2, 1, 0)
  
  return df[['age', 'exng', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'oldpeak']]
";{0: 0.774137641280284}
585;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8382808499743983}
586;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7146806703474187}
587;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
588;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.740397793071866}
589;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
  return df
";{0: 0.7408975326963299}
590;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])  
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()  
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8282539682539681}
591;"
  df.fillna(df.mean(), inplace=True)  # Fill missing values with the mean of each column

  df = pd.get_dummies(df, columns=['sex', 'cp'])  # One-hot encode 'sex' and 'cp' columns

  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  # Min-max scaling of 'age'
  df['trtbps'] = np.log1p(df['trtbps'])  # Log transformation of 'trtbps'
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()  # Standardization of 'chol'

  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8295442908346133}
592;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.fillna(df.mean(), inplace=True)

  return df
";{0: 0.7415719293930613}
594;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8321883944834765}
595;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'exng']]
  df = pd.get_dummies(df, columns=['cp'])
  df.dropna(inplace=True)

  return df
";{0: 0.7582064562290924}
596;"
  df = df[['age', 'cp', 'chol', 'thalachh', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df.dropna(inplace=True)

  return df
";{0: 0.7471364289360893}
597;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8295442908346133}
598;"
  df.dropna(subset=['age', 'exng', 'thalachh', 'cp', 'oldpeak'], inplace=True)
  
  df['sex'] = df['sex'].map({0: 1, 1: 0})
  df = pd.get_dummies(df, columns=['cp'])

  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
  
  return df[['age', 'sex', 'thalachh', 'oldpeak', 'cp_2']]
";{0: 0.7450126541598039}
599;"
  return df[['age', 'exng', 'thalachh', 'cp', 'oldpeak']].dropna()
";{0: 0.7409815598061289}
600;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna().fillna(df.mean())
";{0: 0.7444394583530153}
601;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
602;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7794495476775715}
603;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7794495476775715}
604;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df = pd.get_dummies(df, columns=['sex', 'cp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7435074132640289}
605;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
  
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8230926779313876}
606;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])

  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.778109037092088}
607;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = df['cp'].apply(lambda x: 1 if x >= 2 else 0) 
    df['slp'] = df['slp'].map({0: 'low', 1: 'medium', 2: 'high'})  
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.75126063000992}
608;"
# Improved version of `select_columns_and_return_dataframe_v2`.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
609;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8382808499743983}
610;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = df['cp'].apply(lambda x: x >= 2).astype(int) 
    df['slp'] = df['slp'].map({0: 'low', 1: 'medium', 2: 'high'})  
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df.dropna(inplace=True)
    
    return df
";{0: 0.7603449047058872}
611;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  
  df['cp'] = pd.Categorical(df['cp'])
  df = pd.get_dummies(df, columns=['cp'])
  
  return df
";{0: 0.7475847613581779}
612;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8391599708535192}
613;"
  # Drop NA values
  df.dropna(inplace=True)
  
  # One-hot encode 'sex' and 'cp' columns
  df = pd.get_dummies(df, columns=['sex', 'cp'])
  
  # Normalize 'age' column
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  
  # Log transformation of 'trtbps' column
  df['trtbps'] = np.log1p(df['trtbps'])
  
  # Standardize 'chol' column
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
  
  # Return dataframe with selected columns
  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8230926779313876}
615;"
  df.fillna(df.mean(), inplace=True)
  
  return df[['age', 'sex', 'cp', 'trtbps', 'thalachh']]
";{0: 0.7788452996697934}
616;"
  df = df[['age', 'sex', 'thalachh', 'oldpeak', 'exng']]
  df[['sex', 'exng']] = df[['sex', 'exng']].astype('category')
  df = pd.get_dummies(df)
  df.dropna(inplace=True)

  return df
";{0: 0.7290343049926657}
617;"
    df.dropna(subset=['age', 'sex', 'cp', 'trtbps', 'chol'], inplace=True)
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    return df
";{0: 0.7200387895382333}
618;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  df['sex'] = df['sex'].apply(lambda x: 1 if x == 'male' else 0)  # Convert categorical 'sex' to binary
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding 'cp' column
  df.dropna(inplace=True)
  
  return df
";{0: 0.7627933010331629}
619;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = df['cp'].apply(lambda x: x >= 2).astype(int) 
  df['slp'] = df['slp'].map({0: 'low', 1: 'medium', 2: 'high'})  
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.7563648052033995}
620;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])

  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8230926779313876}
621;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])  # One-hot encoding 'sex' and 'cp' columns
  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())  # Min-Max scaling of 'age'
  df['trtbps'] = np.log1p(df['trtbps'])  # Log transformation of 'trtbps'
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()  # Standardization of 'chol'

  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8282539682539681}
623;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Converting 'cp' column to categorical
    df['cp'] = df['cp'].astype('category')
    
    # Creating new feature by multiplying 'thalachh' and 'oldpeak'
    df['thalachh_oldpeak_prod'] = df['thalachh'] * df['oldpeak']
    
    return df
";{0: 0.7997921159751888}
624;"
# Improved version of select_columns_and_return_dataframe_v2
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binarizing 'thalachh' column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Standardizing 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # Dropping 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8391599708535192}
625;"
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['sex', 'cp'])

  df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
  df['trtbps'] = np.log1p(df['trtbps'])
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

  return df[['age', 'sex_0', 'sex_1', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'trtbps', 'chol']]
";{0: 0.8295442908346133}
626;"
    df = df[['sex', 'cp', 'thalachh', 'slp', 'exng']]
    df['sex'] = df['sex'].map({0: 'female', 1: 'male'})  # Map numeric values in 'sex' column to categorical
    df = pd.get_dummies(df, columns=['cp', 'slp', 'sex'], drop_first=True)  # One-hot encode selected columns
    df.dropna(inplace=True)  # Drop rows with missing values
    
    return df
";{0: 0.7745291447621956}
627;"
  df.dropna(inplace=True)  
  cols_to_keep = ['age', 'sex', 'cp', 'thalachh', 'oldpeak']
  df = df[cols_to_keep]
  
  df = pd.get_dummies(df, columns=['cp'])  
  df['age'] = np.log(df['age'])  
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()  
  df['oldpeak'] = np.where(df['oldpeak'] > 2, 1, 0)  
  
  return df[['age', 'sex', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7952316098032423}
628;"
  df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df = df.dropna()
  return df
";{0: 0.7513350976508871}
629;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8382808499743983}
631;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7569889213264466}
632;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  return df
";{0: 0.8074449564772145}
633;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8345110087045571}
634;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
635;"
  # Binarize 'thachh' column based on mean value
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  # Select the most important columns and drop 'thalachh'
  df = df[['cp', 'oldpeak', 'slp', 'caa', 'thalachh_binary']]

  return df
";{0: 0.8345110087045571}
637;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
639;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8382808499743983}
640;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  return df
";{0: 0.8408131038419245}
641;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
        
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df.drop(columns=['thalachh'], inplace=True)
    
    df['caa'] = df['caa'].fillna(df['caa'].mode()[0])

    return df
";{0: 0.8345110087045571}
642;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8370711725550436}
644;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8345110087045571}
645;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8382808499743983}
646;"
    df = df[['age', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = df['caa'].astype('category')
    df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
    
    return df
";{0: 0.7242218421879438}
647;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
648;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.qcut(df['cp'], q=4, labels=False, duplicates='drop')
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8049849427651505}
649;"
    return df[['cp', 'oldpeak', 'caa']]
";{0: 0.8277019934939027}
651;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
652;"
  # Selecting the five most important columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Creating a binary column based on mean value of 'thalachh'
  df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  
  # Dropping the original 'thalachh' column
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8370711725550436}
653;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
654;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
655;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8370711725550436}
656;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Creating a binary column based on mean value of 'thalachh'
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Dropping the original 'thalachh' column
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
657;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'age']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['cp', 'caa'], drop_first=True)
  
  return df
";{0: 0.6830839167886115}
658;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8345110087045571}
659;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
660;"
  # Select the relevant columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
  # Discretize 'cp' column
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  
  # Convert 'thalachh' column to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  return df
";{0: 0.8382808499743983}
661;"
    return df[['cp', 'oldpeak', 'caa']].dropna()
";{0: 0.8277019934939027}
662;"
  # Create a binary column based on 'oldpeak' values
  df['oldpeak_binary'] = df['oldpeak'].apply(lambda x: 1 if x > 1.0 else 0)
  
  # Drop the 'oldpeak' column
  df.drop('oldpeak', axis=1, inplace=True)
  
  return df
";{0: 0.8002570532565718}
663;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8370711725550436}
664;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
665;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df['thalachh'] = df['thalachh'].fillna(df['thalachh'].mean())
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  
  return df
";{0: 0.8111714442508224}
666;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = df['cp'].apply(lambda x: 3 if x == 3 else 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.7308196721311476}
667;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8345110087045571}
668;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.7831385169558642}
669;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7794495476775715}
670;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
671;"
  # One-hot encode 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.7464778602324874}
672;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning the 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating a binary column based on the mean of 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Normalizing the 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8417393359328843}
673;"
  # Fill missing values in 'chol' column with mean
  df['chol'].fillna(df['chol'].mean(), inplace=True)
  
  # One-hot encode 'cp', 'restecg', and 'slp' columns
  df = pd.get_dummies(df, columns=['cp', 'restecg', 'slp'], drop_first=True)
  
  # Drop rows with missing values in 'thalachh' and 'exng' columns
  df.dropna(subset=['thalachh', 'exng'], inplace=True)
  
  return df[['cp_1', 'cp_2', 'cp_3', 'thalachh', 'oldpeak']]
";{0: 0.7626782700959726}
674;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = df['oldpeak'] / df['oldpeak'].max()
  
  return df
";{0: 0.8370432625720833}
675;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning 'thalachh' column into binary based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Standardizing 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.7787474082572668}
676;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8219883311531075}
677;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
678;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = df['cp'].map({0: 0, 1: 0, 2: 0, 3: 1})
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.7231654295505365}
679;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]  # Selecting the columns of interest
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating a binary feature from thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping the original thalachh column
    
    return df
";{0: 0.8382808499743983}
680;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8002669285588375}
681;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  return df
";{0: 0.8408602150537634}
682;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.qcut(df['cp'], q=4, labels=False, duplicates='drop')
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8049849427651505}
683;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak_binary'] = df['oldpeak'].apply(lambda x: 1 if x > 1.0 else 0)
  df.drop(columns=['thalachh', 'oldpeak'], inplace=True)

  return df
";{0: 0.833991935483871}
684;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = df['cp'].map({0: 0, 1: 1, 2: 0, 3: 0})
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.7283776438615148}
685;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df.drop(columns=['thalachh'], inplace=True)
  df['cp'] = df['cp'].apply(lambda x: np.sqrt(x)) 
  df['slp'] = df['slp'].apply(lambda x: 1 if x > 1 else 0)

  return df
";{0: 0.8307867047753351}
686;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8345110087045571}
687;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df.fillna(df.mean(), inplace=True)
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  return df
";{0: 0.7792711649318919}
688;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)

  return df
";{0: 0.8182971972501323}
689;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = df['cp'].apply(lambda x: 1 if x == 1 else 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
      
  return df
";{0: 0.7283776438615148}
691;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
692;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  return df
";{0: 0.8408131038419245}
695;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8382808499743983}
696;"
    return df[['cp', 'oldpeak', 'caa', 'thalachh', 'exng']]
";{0: 0.7884403709471843}
697;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].dropna()
";{0: 0.7831385169558642}
698;"
  # Selecting only the specific columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Creating a binary column based on mean value of 'thalachh'
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  # Dropping the original 'thalachh' column
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8345110087045571}
699;"
    return df[['cp', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.8277019934939027}
700;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
701;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8002669285588375}
702;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
  
  return df
";{0: 0.8329186182669789}
703;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)

  return df
";{0: 0.814383923849815}
704;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8379502934341645}
705;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8391599708535192}
706;"
    return df[['cp', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.8196997706542248}
707;"
  df = df[['sex', 'cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['sex', 'slp'], drop_first=True)
  
  return df
";{0: 0.7761690546611645}
708;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3], include_lowest=True)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
709;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
710;"
    df = df[['thalachh', 'oldpeak', 'slp', 'caa', 'exng']]
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = pd.cut(df['caa'], bins=3, labels=False)
    df = pd.get_dummies(data=df, columns=['slp', 'caa'], drop_first=True)
    
    return df
";{0: 0.8056898986947203}
711;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7871904089371793}
713;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)

  return df
";{0: 0.8182971972501323}
714;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
715;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8367029480302881}
716;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
  
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
  
    return df
";{0: 0.852163338453661}
717;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
718;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].fillna(df.mean())
";{0: 0.787291522420345}
719;"
    # Selecting the desired columns from the dataframe
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Converting 'thalachh' column to a binary feature based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
720;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8235246621885496}
721;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
  
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
  
    return df
";{0: 0.8432539682539681}
722;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)

  return df
";{0: 0.814383923849815}
723;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].fillna(df.mean())
";{0: 0.7913105599666169}
724;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df.dropna(inplace=True)  # Drop rows with missing values
    return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
726;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarizing 'oldpeak' column based on a threshold
  df['oldpeak_binary'] = (df['oldpeak'] > 1.0).astype(int)
  
  # One-hot encoding 'cp' and 'slp' columns
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  return df
";{0: 0.773818165619411}
727;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].dropna()
";{0: 0.787291522420345}
728;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning 'cp' column into 4 categories
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating binary 'thalachh' column based on mean value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Standardizing 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # Dropping the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8417393359328843}
729;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
730;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Discretize 'cp' column
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  
  # Convert 'thalachh' column to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  return df
";{0: 0.8382808499743983}
731;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8482500650533437}
732;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].fillna(df.mean())
";{0: 0.787291522420345}
733;"
  df = df[['age', 'sex', 'thalachh', 'chol', 'exng']]
  df['sex'] = np.where(df['sex'] == 'Male', 1, 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['chol'] = df['chol'].fillna(df['chol'].mean())
  
  return df
";{0: 0.6927674709535578}
734;"
  # Select the five most important columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize the 'thalachh' column
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Drop the continuous 'thalachh' column
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8345110087045571}
735;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7794495476775715}
736;"
  # Selecting only the required columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp'
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8382808499743983}
737;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8002669285588375}
738;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8024174661932462}
739;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.7831385169558642}
740;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].assign(
    thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int)).drop(columns=['thalachh']).pipe(
    lambda x: pd.get_dummies(x, columns=['cp'], drop_first=True)
  )
";{0: 0.814383923849815}
741;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
742;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
743;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
  
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
  
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.847268410451956}
744;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
  
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
  
    df['caa'] = (df['caa'] > 0).astype(int)
  
    return df
";{0: 0.847268410451956}
745;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8432539682539681}
746;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8408602150537634}
747;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8508730158730158}
748;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    return df
";{0: 0.828765612802498}
750;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  # Feature engineering: create new feature based on 'slp' column
  df['slp_is_2'] = np.where(df['slp'] == 2, 1, 0)
  
  return df
";{0: 0.8022178559054687}
751;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = df['cp'].apply(lambda x: 1 if x == 0 else 0) # Binomial encoding of 'cp'
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) # Binarization of 'thalachh'
  
  return df
";{0: 0.8168409466730461}
752;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'slp']]
  
  # Binarizing 'thalachh' column based on the mean value
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # One-hot encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7455455295121304}
753;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['thalachh'] = np.log1p(df['thalachh'])
  df['oldpeak'] = np.where(df['oldpeak'] > 0.5, 1, 0)
  
  return df
";{0: 0.7793313932444367}
754;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'slp']]
  df['cp'] = df['cp'].astype('category')
  df['thalachh'] = np.log1p(df['thalachh'])
  df = pd.get_dummies(data=df, columns=['cp'], prefix='cp', drop_first=True)
  
  return df
";{0: 0.8170346902201742}
756;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8002669285588375}
757;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  
  return df
";{0: 0.7884403709471843}
758;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
  df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

  return df
";{0: 0.7990086709811723}
759;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8408602150537634}
760;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8469436034322337}
761;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8382808499743983}
762;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8559523809523808}
763;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.7922030209933435}
764;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
  # Normalize 'oldpeak' column
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  # One-hot encode 'slp' column
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)

  return df
";{0: 0.761241544995649}
765;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7871904089371793}
766;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  
  # Binarize 'cp', 'caa', 'slp' columns
  df = pd.get_dummies(df, columns=['cp', 'caa', 'slp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.6996401749473908}
767;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  # Fill missing values with mean in 'caa' column
  df['caa'].fillna(df['caa'].mean(), inplace=True)

  return df
";{0: 0.8345110087045571}
768;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
  
  return df
";{0: 0.7200387895382333}
769;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'].fillna(0, inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])

  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7757361557361558}
770;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'slp']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)  
  return df
";{0: 0.8370711725550436}
771;"
  return df[['cp', 'oldpeak', 'caa']]
";{0: 0.8196997706542248}
772;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  # Binning 'age' values into 3 categories
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  
  # Converting 'sex' values to binary
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  
  # One-hot encoding 'cp'
  df = pd.get_dummies(data=df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7734726183383527}
773;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.828329681952104}
774;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean()).astype({'cp': 'category'})
";{0: 0.7889108390447062}
775;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
776;"
  # Keep only the necessary columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.787291522420345}
777;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
    
  # Binarize 'cp' column
  df['cp'] = df['cp'].replace({0: 0, 1: 1, 2: 0, 3: 0})
    
  # Binarize 'caa' and 'slp' columns
  df = pd.get_dummies(df, columns=['caa', 'slp'], drop_first=True)
    
  # Standardize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.6305037677709253}
778;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df['cp'] = np.where(df['cp'] > df['cp'].median(), 1, 0)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.7896626984126984}
779;"
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7335164538228052}
780;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.847268410451956}
781;"
  # Selecting columns of interest
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Handling missing values by filling with mean
  df.fillna(df.mean(), inplace=True)

  return df
";{0: 0.787291522420345}
782;"
# Combine One-Hot-Encoding for 'cp' column and normalize 'thalachh' column
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.744864957006681}
783;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8002669285588375}
784;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'slp']]
  df['cp'] = df['cp'].astype('category')
  df['thalachh'] = np.log1p(df['thalachh'])
  df = pd.get_dummies(data=df, columns=['cp'], prefix='cp', drop_first=True)
  
  return df
";{0: 0.8170346902201742}
785;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8370711725550436}
786;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df['cp'] = np.where(df['cp'] > df['cp'].median(), 1, 0)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.7809195290137912}
787;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8002669285588375}
788;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8345110087045571}
789;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8496031746031745}
790;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Replace 'cp' column with categorized values
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  # Binarize 'thalachh' column
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8370711725550436}
791;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8024174661932462}
792;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8024174661932462}
793;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Create binary column based on whether thalachh is above its mean or not
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Remove the 'thalachh' column
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
794;"
# Retain 'cp', 'thalachh', 'oldpeak', 'slp', 'caa' columns
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binarize 'thalachh' column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Transform 'cp' using square root and adjust 'slp' to binary
    df['cp'] = df['cp'].apply(lambda x: np.sqrt(x)) 
    df['slp'] = df['slp'].apply(lambda x: 1 if x > 1 else 0)

    return df
";{0: 0.825663753955663}
795;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' values into 4 categories
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  # One-hot encoding 'slp'
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8286040272679147}
796;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].assign(cp=pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3]), thalachh=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0))
";{0: 0.8408602150537634}
797;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    # Binning 'thalachh' column into binary based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    # Convert 'caa' column into binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8446243068030931}
798;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'fbs']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['cp', 'caa'], drop_first=True)
  
  return df
";{0: 0.68042482401281}
799;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  df = pd.get_dummies(df, columns=['cp', 'caa'])
  
  return df
";{0: 0.7578353408886196}
800;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.qcut(df['cp'], q=4, labels=False, duplicates='drop', precision=0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8007768773063546}
801;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].assign(cp=pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3]), thalachh=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0))
";{0: 0.8382808499743983}
802;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8345110087045571}
803;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['slp'] = pd.Categorical(df['slp'], categories=[0, 1, 2], ordered=True)
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8257913424491955}
804;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)

  return df
";{0: 0.8182971972501323}
805;"
  # Select the required columns
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  
  # Convert 'cp' column to binary
  df['cp'] = np.where(df['cp'] == 3, 1, 0)
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.7233915460005083}
806;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8358588915792305}
807;"
  df['oldpeak_binary'] = df['oldpeak'].apply(lambda x: 1 if x > 1.0 else 0)
  
  # Drop the 'oldpeak' column
  df.drop('oldpeak', axis=1, inplace=True)
  
  return df
";{0: 0.8027570532565719}
808;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning the 'cp' column
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8370711725550436}
809;"
    return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].fillna(df.mean())
";{0: 0.7913105599666169}
810;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Handling missing values by filling with mean
  df.fillna(df.mean(), inplace=True)
  
  # Encoding 'thalachh' column with binary values based on mean
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8370711725550436}
811;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = np.where(df['cp'] == 1, 1, 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
      
  return df
";{0: 0.732893772893773}
812;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  # Normalize 'oldpeak' column
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8151127524898465}
813;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df['thalachh'] = df['thalachh'].fillna(df['thalachh'].mean())
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  
  return df
";{0: 0.8111714442508224}
814;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  # Binning 'cp' column
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  # Scaling 'thalachh' column based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  # Applying log transformation to 'oldpeak' column
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  return df
";{0: 0.8370240613432047}
815;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7871904089371793}
817;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].fillna(df.mean())
";{0: 0.7831385169558642}
818;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)

  return df
";{0: 0.8382808499743983}
819;"
    return df[['cp', 'oldpeak', 'caa']]
";{0: 0.8196997706542248}
820;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning the 'cp' column
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])

  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  # Normalizing 'oldpeak' column
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())

  return df
";{0: 0.8370432625720833}
821;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'slp']]
  # Using median instead of mean for binarization
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8241457341794465}
822;"
  # Feature extraction by selecting the important columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarizing 'oldpeak' column based on a threshold
  df['oldpeak_binary'] = (df['oldpeak'] > 1.0).astype(int)
  
  # One-hot encoding 'cp' and 'slp' columns
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  return df
";{0: 0.7778372031656827}
823;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['caa'] = np.where(df['caa'] > 0, 1, 0)
  
  return df
";{0: 0.8253840245775729}
824;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8322429553524213}
825;"
  # Select the needed columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Bin 'cp' column
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  
  # Normalize 'thalachh' column
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8382808499743983}
826;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7871904089371793}
827;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['sex'], drop_first=True)
  
  return df
";{0: 0.7920973234517943}
828;"
  df['oldpeak_binary'] = (df['oldpeak'] > 1.0).astype(int)
  df.drop('oldpeak', axis=1, inplace=True)
  
  df = pd.get_dummies(df, columns=['cp', 'slp'])
  
  return df
";{0: 0.8005434033862586}
829;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8149702017250234}
830;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7889108390447062}
831;"
    return df[['cp', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.8196997706542248}
832;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8002669285588375}
833;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8431545609335138}
834;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8333588915792305}
835;"
  return df[['age', 'sex', 'cp', 'chol', 'thalachh']].dropna()
";{0: 0.7652979403637298}
836;"
  # Binarize 'oldpeak' column based on a threshold
  df['oldpeak_binary'] = df['oldpeak'].apply(lambda x: 1 if x > 1.0 else 0)
  
  # Drop the 'oldpeak' column
  df.drop('oldpeak', axis=1, inplace=True)
  
  return df
";{0: 0.8027570532565719}
837;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7794495476775715}
838;"
    return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int)
    ).assign(
        cp_sqrt=df['cp'].apply(lambda x: np.sqrt(x)),
        slp_binary=df['slp'].apply(lambda x: 1 if x > 1 else 0)
    ).drop(columns=['thalachh', 'cp', 'slp'])
";{0: 0.825663753955663}
839;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df['cp'] = np.where(df['cp'] > df['cp'].median(), 1, 0)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  # Fill missing values with median
  for col in df.columns:
      df[col].fillna(df[col].median(), inplace=True)
  
  return df
";{0: 0.7960119047619048}
840;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].assign(thalachh=(df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std(), oldpeak=(df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min()))
";{0: 0.8151127524898465}
841;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarizing 'oldpeak' column based on a threshold
  df['oldpeak_binary'] = (df['oldpeak'] > 1.0).astype(int)
  
  # Converting 'thalachh' to binary based on mean
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.7550999081565427}
842;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    return df
";{0: 0.8496031746031745}
843;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8469436034322337}
844;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].assign(
    thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int)).drop(columns=['thalachh']).assign(
    cp=lambda x: pd.Categorical(x['cp'], categories=[0, 1, 2, 3], ordered=True)).pipe(
    lambda x: pd.get_dummies(x, columns=['cp'], drop_first=True)
  )
";{0: 0.814383923849815}
845;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binarize 'thalachh' column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Perform Min-Max scaling on 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.8344638974927182}
846;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  
  return df
";{0: 0.7951116351074272}
847;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  
  # Binomial encoding of 'cp'
  df['cp'] = df['cp'].apply(lambda x: 1 if x == 0 else 0)
  
  # Binarization of 'thalachh'
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8168409466730461}
849;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8382808499743983}
850;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Encoding 'slp' column with label encoding
    df['slp'] = df['slp'].astype('category').cat.codes
    
    # Filling missing values in 'oldpeak' column with median
    df['oldpeak'].fillna(df['oldpeak'].median(), inplace=True)
    
    return df
";{0: 0.7913105599666169}
851;"
  # Selecting relevant columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Normalizing 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  # Normalizing 'oldpeak' column
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8151127524898465}
852;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = df['caa'].astype('category')
    df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)
    
    return df
";{0: 0.822901242728715}
853;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8457117255504352}
854;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]  
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  return df
";{0: 0.7824132224090146}
855;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = df['cp'].apply(lambda x: 1 if x == 1 else 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7460884893354486}
856;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = pd.cut(df['caa'], bins=4, labels=False)
    df = pd.get_dummies(data=df, columns=['cp', 'slp', 'caa'], drop_first=True)

    return df
";{0: 0.6696884129996084}
857;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('int')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8358588915792305}
858;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['caa'], drop_first=True)

  return df
";{0: 0.6881633072809542}
859;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8369952552155941}
860;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['blood_pressure_high'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
861;"
# Improved version of `select_columns_and_return_dataframe_v2`.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    return df
";{0: 0.7488588126134398}
862;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  df['slp'] = df['slp'].apply(lambda x: 1 if x > 1 else 0)
  
  return df
";{0: 0.8343958013312852}
863;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8510759197063189}
864;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7889108390447062}
865;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
866;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)

  return df
";{0: 0.8085162137739467}
867;"
  return df[['thalachh', 'oldpeak', 'caa']]
";{0: 0.7516952054794521}
868;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  df['caa'] = np.where(df['caa'] > 0, 1, 0)
  
  return df
";{0: 0.8253840245775729}
869;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8286040272679147}
870;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
872;"
    return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].fillna(df.mean())
";{0: 0.7831385169558642}
873;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df[['thalachh', 'oldpeak']] = np.log1p(df[['thalachh', 'oldpeak']])
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)

  return df
";{0: 0.8203508368797898}
874;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Normalizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Normalizing 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.8191066080966053}
875;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)

  return df
";{0: 0.8182971972501323}
877;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7889108390447062}
878;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8382808499743983}
879;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].assign(
    thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int), 
    oldpeak_binary=(df['oldpeak'] > 1.0).astype(int),
    cp_1=pd.get_dummies(df['cp'])[1], 
    cp_2=pd.get_dummies(df['cp'])[2], 
    cp_3=pd.get_dummies(df['cp'])[3],
    slp_1=pd.get_dummies(df['slp'])[1], 
    slp_2=pd.get_dummies(df['slp'])[2]
  ).drop(columns=['cp', 'slp'])
";{0: 0.7572504457909512}
880;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8391599708535192}
881;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  # Feature engineering: create new feature based on 'slp' column
  df['slp_is_2'] = np.where(df['slp'] == 2, 1, 0)
  
  return df
";{0: 0.7817832995938024}
882;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['cp'] = np.where(df['cp'].isin([1, 2]), 1, 0)
    df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
    df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
    
    return df
";{0: 0.7794495476775715}
883;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize the 'thalachh' column
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Drop the continuous 'thalachh' column
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
884;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  # Feature engineering: create new feature based on 'slp' column
  df['slp_is_2'] = np.where(df['slp'] == 2, 1, 0)
  
  return df
";{0: 0.8063426575976951}
885;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    return df
";{0: 0.8571300563236047}
886;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.828329681952104}
888;"
    # Selecting specific columns
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7990086709811723}
889;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8382808499743983}
890;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8358588915792305}
892;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalize 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Fill missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7968581333467637}
893;"
  df = df[['sex', 'cp', 'thalachh', 'restecg', 'oldpeak']]
  df['cp'] = np.where(df['cp'].isin([1, 2]), 1, 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['sex', 'restecg'], drop_first=True)
  
  return df
";{0: 0.799758128645152}
894;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7968581333467637}
895;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.qcut(df['cp'], q=4, labels=False, duplicates='drop')
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.795009409520071}
896;"
  df = df[['age', 'thalachh', 'oldpeak', 'caa', 'chol']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['caa'], drop_first=True)

  return df
";{0: 0.6116546457085463}
897;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8408602150537634}
899;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalize 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  return df
";{0: 0.8002669285588375}
900;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].fillna(df.mean())
  
  return df
";{0: 0.7831385169558642}
901;"
  df['oldpeak_binary'] = (df['oldpeak'] > 1.0).astype(int)
  df.drop('oldpeak', axis=1, inplace=True)
  df = pd.get_dummies(df, columns=['cp', 'slp'])

  return df
";{0: 0.7968727684656238}
902;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
  # Normalize 'oldpeak' column
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  # One-hot encode 'slp' column
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)

  return df
";{0: 0.7694135880064017}
903;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)

  return df
";{0: 0.8000357793390581}
904;"
  # Fill missing values with mean for 'thalachh' and 'oldpeak'
  df['thalachh'] = df['thalachh'].fillna(df['thalachh'].mean())
  df['oldpeak'] = df['oldpeak'].fillna(df['oldpeak'].mean())

  return df
";{0: 0.8167815457132676}
905;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['caa'], drop_first=True)

  return df
";{0: 0.6881633072809542}
906;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = df['cp'].apply(lambda x: 1 if x == 1 else 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7460884893354486}
908;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = df['thalachh'].fillna(df['thalachh'].mean())
  df['slp'] = df['slp'].astype('category')
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.748321853313727}
910;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].assign(
    thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int), 
    oldpeak_binary=(df['oldpeak'] > 1.0).astype(int),
    cp_1=pd.get_dummies(df['cp'])[1], 
    cp_2=pd.get_dummies(df['cp'])[2], 
    cp_3=pd.get_dummies(df['cp'])[3],
    slp_1=pd.get_dummies(df['slp'])[1], 
    slp_2=pd.get_dummies(df['slp'])[2]
  ).drop(columns=['cp', 'slp'])
";{0: 0.7550999081565427}
911;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize the 'thalachh' column
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Drop the continuous 'thalachh' column
  df.drop(columns=['thalachh'], inplace=True)

  return df
";{0: 0.8345110087045571}
912;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Replace 'cp' column with categorized values
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  # Binarize 'thalachh' column
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8370711725550436}
913;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'slp']]
  df['cp'] = df['cp'].apply(lambda x: 1 if x == 1 else 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df = pd.get_dummies(df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7460884893354486}
914;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7871904089371793}
915;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.830952632771776}
916;"
  # Selecting columns and handling missing values
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
     
  # One-hot encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Min-Max scaling 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
  
  # Handling missing values in 'oldpeak' column
  df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

  return df
";{0: 0.7968581333467637}
917;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8333019812851241}
918;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  # Normalizing continuous features
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  # One-hot encoding categorical feature 'cp'
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.8244860785844391}
919;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    # Dropping rows with missing values
    df.dropna(inplace=True) 

    return df
";{0: 0.7968581333467637}
920;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8257913424491955}
921;"
  df = df[['cp', 'oldpeak', 'thalachh', 'exng', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.log1p(df['thalachh'])
  df = pd.get_dummies(data=df, columns=['caa'], drop_first=True)
  
  return df
";{0: 0.6752324019793594}
922;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8370711725550436}
923;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8333019812851241}
924;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  return df
";{0: 0.8408602150537634}
925;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8382808499743983}
926;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Dropping rows with missing values in any column
    df.dropna(inplace=True)

    return df
";{0: 0.7947748000134304}
927;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
  
    return df
";{0: 0.8345110087045571}
928;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
929;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)  # Renamed and improved column name
    
    return df
";{0: 0.8387969748096665}
930;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8257913424491955}
931;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa_has_vessels'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8134578866400656}
932;"
  # One-hot encode 'cp' column and drop first category
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Fill missing values in 'thalachh' with mean
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  
  # Log transform 'oldpeak' column
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  # Convert 'caa' to categorical
  df['caa'] = df['caa'].astype('category')
  
  # Cut 'age' into bins and labels
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])
  
  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7736671902189144}
933;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8149702017250234}
934;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    # Dropping 'caa' column
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.7865641971577985}
935;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8370711725550436}
936;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
937;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  
  return df
";{0: 0.8160317018909901}
939;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8382808499743983}
940;"
    df = df[['age', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Scaling 'age' column
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    
    # Normalizing 'thalachh' and 'oldpeak' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.7411424731182796}
941;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8333019812851241}
942;"
  df = df[['age', 'thalachh', 'chol', 'exng', 'caa']]
  df['exng'] = np.where(df['exng'] == 1, 1, 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['chol'] = df['chol'].fillna(df['chol'].mean())
  
  return df
";{0: 0.7117658353664046}
943;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalize 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Fill missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7968581333467637}
944;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    return df
";{0: 0.8408602150537634}
945;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.8113364055299538}
946;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8320794194623955}
947;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  return df
";{0: 0.8408602150537634}
948;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.8244860785844391}
949;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7871904089371793}
950;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    return df
";{0: 0.8370711725550436}
951;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8235246621885496}
952;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8370711725550436}
953;"
  df = df[['age', 'sex', 'cp', 'trtbps', 'restecg']]
  
  df['age'] = np.log1p(df['age'])
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  df['cp'] = df['cp'].astype('category')
  df['trtbps'].fillna(df['trtbps'].mean(), inplace=True)
  
  return df
";{0: 0.7159547386173959}
954;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  return df
";{0: 0.8345110087045571}
955;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8408602150537634}
956;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    df['thall_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
957;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['slp'] = np.where(df['slp'] > df['slp'].mean(), 1, 0)
  
  return df
";{0: 0.7740704587518927}
958;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'] = df['thalachh'].fillna(df['thalachh'].mean())
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  
  return df[['thalachh', 'oldpeak', 'caa']]
";{0: 0.7517746287443592}
960;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8345110087045571}
961;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7529003346458885}
962;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  return df
";{0: 0.8408602150537634}
963;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  # Binarizing feature 'thalachh' based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  # Normalizing feature 'oldpeak'
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8344638974927182}
964;"
    # Keep only selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Return the preprocessed dataframe
    return df
";{0: 0.7507497970114799}
965;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8446243068030931}
966;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.7831385169558642}
967;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8197369639714734}
968;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = df['cp'].astype(str)  # Convert cp to string before one-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
969;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['slp'] = np.where(df['slp'] > df['slp'].mean(), 1, 0)
  df['caa'] = np.where(df['caa'] >= 1, 1, 0)

  return df
";{0: 0.7861877124426221}
970;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.log1p(df['thalachh'])
  df['caa'] = df['caa'].astype('category')
  
  return df
";{0: 0.8381505334374186}
971;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8345110087045571}
972;"
  # Keep only the selected five columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Normalize 'cp' column using binning
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  # Convert 'thalachh' to binary based on whether it's above the mean
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8408602150537634}
973;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  
  # Convert 'thalachh' to binary feature based on mean
  df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  df.drop(columns=['thalachh'], inplace=True)
  
  # Log transform 'oldpeak'
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  # Perform one-hot encoding on 'cp' and 'caa'
  df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
  
  return df
";{0: 0.6666728285518939}
974;"
  # One-hot encode the 'cp', 'slp', and 'caa' columns
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Select the five most important columns
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.851474358974359}
976;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8320794194623955}
977;"
  df = df[['age', 'thalachh', 'oldpeak', 'caa', 'chol']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['caa'], drop_first=True)

  return df
";{0: 0.6186721895681954}
978;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8345110087045571}
979;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
981;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  # Creating binary feature based on the presence of exercise-induced angina
  df['exng'] = np.where(df.index % 2 == 0, 1, 0)
  
  return df
";{0: 0.7829955655430325}
982;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8333019812851241}
983;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # One-hot encoding 'cp' and 'slp' columns
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  
  # Min-Max scaling 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
  
  # Handling missing values in 'oldpeak' column
  df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

  return df
";{0: 0.7810928961748633}
984;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  return df
";{0: 0.8074449564772145}
985;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
986;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['slp'] = np.where(df['slp'] > df['slp'].mean(), 1, 0)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)
  
  return df
";{0: 0.7918685812813857}
988;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.8244860785844391}
989;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']].dropna()
";{0: 0.7884403709471843}
990;"
  # Selecting relevant columns from the dataset
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' values into 4 categories
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  
  # Converting 'thalachh' to a binary indicator based on its relation to the mean
  df['blood_pressure_high'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  # Dropping the original 'thalachh' column
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8345110087045571}
991;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
992;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])

  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7760870329291383}
993;"
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Select the most important columns
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
994;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['slp'] = np.where(df['slp'] > df['slp'].mean(), 1, 0)
  df['caa'] = np.where(df['caa'] >= 1, 1, 0)

  return df
";{0: 0.794989377622521}
995;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['slp'] = np.where(df['slp'] > df['slp'].mean(), 1, 0)
  df['caa'] = np.where(df['caa'] >= 1, 1, 0)
  
  return df
";{0: 0.7858368352496397}
996;"
  df = df[['thalachh', 'oldpeak', 'restecg', 'slp', 'caa']]
  df['thalachh'] = np.log1p(df['thalachh'])
  df['oldpeak'] = df['oldpeak'].fillna(df['oldpeak'].median())
  df = pd.get_dummies(df, columns=['restecg', 'caa'], drop_first=True)

  return df
";{0: 0.5693825718873157}
997;"
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Convert 'thalachh' to binary based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Select the most important columns
  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
998;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1000;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'thall']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['cp', 'caa'], drop_first=True)
  
  return df
";{0: 0.6995219759347049}
1002;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  return df
";{0: 0.8299960861290622}
1003;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' values into 4 categories
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  # Transforming 'oldpeak' using log transformation
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  # One-hot encoding 'slp'
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8369952552155941}
1005;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1006;"
# Function to preprocess the dataset and select the most important columns
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    # Normalizing continuous features
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    return df
";{0: 0.8408602150537634}
1007;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.7810928961748633}
1008;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
1009;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)
  
  return df
";{0: 0.8397604175579705}
1010;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])
  
  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.7757361557361558}
1011;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  return df
";{0: 0.8408602150537634}
1012;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.8206970360857193}
1013;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  
  return df
";{0: 0.8320794194623955}
1014;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
1016;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  # Creating binary feature based on the frequency of 'caa'
  df['caa_binary'] = np.where(df['caa'] > df['caa'].median(), 1, 0)

  return df
";{0: 0.8281894500264411}
1017;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' column into binary based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Normalizing 'oldpeak' column using Min-Max scaling
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.7974841877390225}
1018;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
  
  # Filling missing values in 'thalachh' with mean
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  
  # Normalizing 'chol' values
  df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
  
  return df
";{0: 0.7556466706809173}
1021;"
# Improved version of `select_columns_and_return_dataframe_v2` with additional column processing
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    # Normalizing continuous features
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    # Feature scaling
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.8344638974927182}
1022;"
  df = df[['age', 'thalachh', 'oldpeak', 'caa', 'chol']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['caa'], drop_first=True)
  
  return df
";{0: 0.6186721895681954}
1023;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.7913105599666169}
1024;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.7717516152312515}
1025;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)
  
  return df
";{0: 0.8409098428453268}
1026;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
1027;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thall_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
  df.drop(columns=['thalachh'], inplace=True)
  
  return df
";{0: 0.8345110087045571}
1028;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Dropping rows with missing values in any column
    df.dropna(inplace=True)

    return df
";{0: 0.7968581333467637}
1029;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
    
    return df
";{0: 0.6693044074992623}
1031;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8197369639714734}
1032;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8370432625720833}
1034;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8369952552155941}
1035;"
# Only keep the columns 'cp', 'thalachh', 'oldpeak', 'slp' and 'caa'

# One-hot encode 'cp' and 'slp'
# Normalize 'thalachh' column
# Fill missing values in 'oldpeak' with mean

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7810928961748633}
1037;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = df['cp'].apply(lambda x: 0 if x < 1 else 1)
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8434084699453551}
1038;"
    df = df[['age', 'thalachh', 'chol', 'exng', 'oldpeak']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['exng'] = df['exng'].astype('category')
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.7446904501714307}
1039;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df = pd.get_dummies(data=df, columns=['cp', 'slp'], drop_first=True)
  
  return df
";{0: 0.809983295980123}
1040;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8438130686517784}
1041;"
# Include 'cp', 'thalachh', 'oldpeak', 'caa' columns and create new features for data preprocessing
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binning 'thalachh' column into binary based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    # Normalizing 'oldpeak' column using Z-score normalization
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8025600890672958}
1042;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  return df
";{0: 0.8370711725550436}
1043;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8345110087045571}
1044;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8408602150537634}
1045;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

  return df
";{0: 0.8320794194623955}
1046;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7871904089371793}
1047;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp', 'caa'], drop_first=True)
  
  return df
";{0: 0.6766254807007549}
1048;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' values into 4 categories
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  # Converting 'thalachh' values to binary based on mean
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  # Transforming 'oldpeak' using log transformation
  df['oldpeak'] = np.log1p(df['oldpeak'])
  
  # One-hot encoding 'slp'
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8358588915792305}
1049;"
  # Keep only the columns 'cp', 'thalachh', 'oldpeak', 'slp', 'caa'
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize the column 'thalachh' based on if it is greater than its mean or not
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8408602150537634}
1050;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['age'] = pd.qcut(df['age'], q=3, labels=False)
  df['sex'] = df['sex'].map({0: 0, 1: 1})
  df = pd.get_dummies(data=df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7677503183993191}
1051;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp', 'caa'], drop_first=True)

  return df
";{0: 0.6806932773109243}
1052;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].dropna()
";{0: 0.7831385169558642}
1054;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df['slp'] = pd.Categorical(df['slp'], categories=[0, 1, 2], ordered=True).codes
  
  return df
";{0: 0.8192974238875876}
1055;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
1056;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  # Creating binary feature based on the presence of exercise-induced angina
  df['exng'] = np.where(df.index % 2 == 0, 1, 0)
  
  return df
";{0: 0.7871203672352589}
1057;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.7794495476775715}
1058;"
  return df[['oldpeak', 'thalachh', 'caa']]
";{0: 0.7515927464630586}
1059;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.851474358974359}
1060;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.7831385169558642}
1061;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  
  return df
";{0: 0.8241457341794465}
1062;"
  # Selecting the important columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' column
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  # Converting 'thalachh' to a binary feature
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  # One-hot encoding for 'slp' column
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8235246621885496}
1064;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8344638974927182}
1065;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)

  return df
";{0: 0.8409098428453268}
1066;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalize 'thalachh' column using Z-score
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Fill missing values in 'oldpeak' column with median
    df['oldpeak'].fillna(df['oldpeak'].median(), inplace=True)
    
    return df
";{0: 0.8126824116743471}
1067;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binarize the column 'thalachh' based on if it is greater than its mean or not
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  return df
";{0: 0.8370711725550436}
1068;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['slp'] = np.where(df['slp'] > df['slp'].median(), 1, 0)
  df['caa_binary'] = np.where(df['caa'] > df['caa'].median(), 1, 0)
  
  return df
";{0: 0.8246245792517607}
1069;"
  # Keep only the specified columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Binning 'cp' column into categories
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  
  # Creating a binary feature based on 'thalachh' values
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  # Normalizing 'oldpeak' column
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  
  # Converting 'slp' column to binary based on median
  df['slp'] = np.where(df['slp'] > df['slp'].median(), 1, 0)
  
  # Creating a binary feature based on 'caa'
  df['caa_binary'] = np.where(df['caa'] > df['caa'].median(), 1, 0)
  
  return df
";{0: 0.8235493104345564}
1070;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7871904089371793}
1071;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.8079788446982399}
1072;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    df.dropna(inplace=True) 

    return df
";{0: 0.7968581333467637}
1073;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7968581333467637}
1074;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    return df
";{0: 0.8282450076804915}
1075;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['caa_binary'] = np.where(df['caa'] > df['caa'].median(), 1, 0)

  return df
";{0: 0.8281894500264411}
1076;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df = df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]

  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df
";{0: 0.8438130686517784}
1077;"
    df = df[['age', 'cp', 'trtbps', 'chol', 'thalachh']]
    
    # Normalizing 'age' column to be between 0 and 1
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Dropping rows with any missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.7333798474121527}
1078;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['slp'] = np.where(df['slp'] > df['slp'].mean(), 1, 0)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)

  return df
";{0: 0.7906644214565363}
1079;"
    return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].dropna().reset_index(drop=True)
";{0: 0.7913105599666169}
1080;"
  # Selecting specific columns
  df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]

  # Feature engineering and data preprocessing
  df['chol'] = np.log1p(df['chol'])
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  df = pd.get_dummies(data=df, columns=['cp', 'sex'], drop_first=True)

  return df
";{0: 0.6999857665934092}
1081;"
    return df[['age', 'chol', 'thalachh', 'caa', 'sex']].dropna()
";{0: 0.7657967744076457}
1082;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)
  
  return df
";{0: 0.8397604175579705}
1083;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1084;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  
  return df
";{0: 0.8241457341794465}
1085;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1086;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8650382768415554}
1087;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)

  return df
";{0: 0.8215016305305834}
1088;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  
  # Binning 'slp' column into binary
  df['slp'] = np.where(df['slp'] > df['slp'].median(), 1, 0)
  
  # Converting 'caa' column to categorical
  df['caa'] = pd.cut(df['caa'], bins=[-0.1, 0.5, 1.5, 2.5, np.inf], labels=[0, 1, 2, 3])

  return df
";{0: 0.8397049083802572}
1089;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['slp'] = pd.Categorical(df['slp'], categories=[0, 1, 2], ordered=True)
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.828329681952104}
1090;"
  df = df[['age', 'thalachh', 'chol', 'exng', 'caa']]
  df['exng'] = np.where(df['exng'] == 1, 1, 0)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['chol'] = df['chol'].fillna(df['chol'].mean())
  
  return df
";{0: 0.7202975813981507}
1092;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1094;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  
  df = pd.get_dummies(data=df, columns=['slp', 'caa'], drop_first=True)
  
  return df
";{0: 0.6715118443371185}
1095;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]

  # Preprocessing for cp column
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])

  # Preprocessing for oldpeak column
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

  # Preprocessing for thalachh column
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)

  return df
";{0: 0.7913105599666169}
1096;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1098;"
  df = df[['cp', 'thalachh', 'oldpeak', 'exng', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  df['oldpeak'] = np.sqrt(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['cp', 'exng'], drop_first=True)
  
  return df
";{0: 0.834748243559719}
1099;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    return df
";{0: 0.8408602150537634}
1101;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1102;"
  # Selecting important columns
  df = df[['age', 'sex', 'thalachh', 'oldpeak', 'caa']]
  
  # Binning 'age' values into 3 categories
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  
  # Converting 'sex' values to binary
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  
  return df
";{0: 0.7501514362304589}
1103;"
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' column based on if it is greater than its mean or not
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1104;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
    return df
";{0: 0.8382808499743983}
1105;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())

  return df
";{0: 0.8197369639714734}
1106;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8370711725550436}
1107;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df
";{0: 0.8408602150537634}
1108;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8382808499743983}
1109;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  return df
";{0: 0.8382808499743983}
1110;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.7542936175405768}
1111;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  selected_columns = ['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']
  return df[selected_columns]
";{0: 0.8438130686517784}
1112;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  # Scaling feature 'oldpeak' using Min-Max scaling
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8185144021487449}
1113;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  
  df = pd.get_dummies(data=df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7693763561775743}
1115;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Perform one-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7529003346458885}
1116;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8395127377330768}
1117;"
  # Selecting columns: 'age', 'sex', 'thalachh', 'oldpeak', 'caa'
  df = df[['age', 'sex', 'thalachh', 'oldpeak', 'caa']]
  
  # Binning 'age' values into 3 categories
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  
  # Converting 'sex' values to binary
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  
  return df
";{0: 0.750338003394638}
1118;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7990086709811723}
1119;"
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Select and arrange selected columns
  df = df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df
";{0: 0.8438130686517784}
1120;"
  df = df[['thalachh', 'oldpeak', 'cp', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  return df
";{0: 0.8345110087045571}
1121;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8408602150537634}
1122;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8438130686517784}
1123;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8408602150537634}
1124;"
  # Selecting the most critical columns from the dataset
  df = df[['age', 'sex', 'thalachh', 'oldpeak', 'cp']]
  
  # Discretizing age into bins
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  
  # One-hot encode sex column
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  
  # One-hot encoding Chest Pain type column
  df = pd.get_dummies(data=df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7671234119891462}
1125;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binarize thalachh column based on its mean
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Map cp column values to binary: 0 for 0 and 3, 1 for 1 and 2
    df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
    
    # Quantile-based discretization of caa column into 2 categories
    df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
    
    # Perform one-hot-encoding on slp column
    df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
    
    return df
";{0: 0.7794495476775715}
1126;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['sex'], drop_first=True)

  return df
";{0: 0.801497021337681}
1127;"
  return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
";{0: 0.7569889213264466}
1128;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8551282051282051}
1129;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['cp'] = np.where(df['cp'].isin([1, 2]), 1, 0)
    df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
    df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
    
    return df
";{0: 0.7794495476775715}
1130;"
    df = df[['age', 'cp', 'trtbps', 'chol', 'thalachh']]
    
    # Normalizing 'age', 'trtbps', and 'chol' columns to be between 0 and 1
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Dropping rows with any missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.7373871582485088}
1131;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8358588915792305}
1132;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8320794194623955}
1133;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.851474358974359}
1134;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7889108390447062}
1136;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['slp'] = np.where(df['slp'] > df['slp'].mean(), 1, 0)
  
  return df
";{0: 0.7825172495271081}
1137;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8484133493018129}
1138;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8408602150537634}
1139;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = df['caa'].apply(lambda x: x if x < 4 else 4)
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
    
    return df
";{0: 0.7823343238229542}
1140;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)

  return df
";{0: 0.8443642383528687}
1141;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8332542200733635}
1142;"
  # One-hot encode categorical columns 'cp', 'slp', 'caa'
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Select top 5 important columns
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2']]
";{0: 0.8546148091434975}
1143;"
  df = df[['age', 'cp', 'chol', 'thalachh', 'oldpeak']]
  
  # One-hot encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Normalizing 'chol' column
  df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
  
  # Min-Max scaling 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
  
  # Handling missing values in 'oldpeak' column
  df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
  
  return df
";{0: 0.7318182828245419}
1144;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['slp'], drop_first=True)
  
  return df
";{0: 0.8333588915792305}
1145;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8348870590012842}
1146;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Create a new feature based on 'thalachh' column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert 'caa' and 'exng' columns to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8650382768415554}
1147;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8438130686517784}
1149;"
# Use Gaussian Mixture Model (GMM) to cluster data and extract the most important features
from sklearn.mixture import GaussianMixture

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    gmm = GaussianMixture(n_components=5)
    gmm.fit(df)
    cluster_labels = gmm.predict(df)
    df['cluster'] = cluster_labels
    
    return df[['thalachh', 'oldpeak', 'caa', 'cp', 'cluster']]
";{0: 0.7815269860177543}
1150;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])  
  df = df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.851474358974359}
1151;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.830952632771776}
1152;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    return df
";{0: 0.8457117255504352}
1153;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    return df
";{0: 0.8370711725550436}
1154;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['0-30', '30-50', '50-70', '70+'])

  return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']]
";{0: 0.778109037092088}
1155;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  
  return df
";{0: 0.7891156521527452}
1156;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
    return df
";{0: 0.8320794194623955}
1157;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  df = df.dropna()
  df['thalachh'] = np.log1p(df['thalachh'])
  df['cp'] = df['cp'].astype('category')
  df['caa'] = pd.qcut(df['caa'], q=2, labels=False, duplicates='drop')
  df = pd.get_dummies(data=df, columns=['cp'], prefix='cp', drop_first=True)
  
  return df
";{0: 0.7915118883554897}
1158;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
  
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
  
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8446243068030931}
1159;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8233335851527285}
1160;"
  df = df[['age', 'sex', 'thalachh', 'oldpeak', 'caa']]
  
  # Binning 'age' values into 3 categories
  df['age'] = pd.cut(df['age'], bins=3, labels=False)
  
  # Converting 'sex' values to binary
  df['sex'] = pd.get_dummies(df['sex'], drop_first=True)
  
  return df
";{0: 0.750338003394638}
1161;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  df['caa'] = df['caa'].apply(lambda x: x if x < 3 else 3)
  
  return df
";{0: 0.8241457341794465}
1162;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Return the five most important columns after processing
  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
1163;"
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'].fillna(df['thalachh'].mean(), inplace=True)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df['caa'] = df['caa'].astype('category')
  
  return df
";{0: 0.7823514635254455}
1164;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8320794194623955}
1165;"
    # One-hot encode 'cp', 'slp', 'caa' columns
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

    # Binarize 'thalachh' column based on mean value
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2']]
";{0: 0.8469124932444604}
1166;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  
  return df
";{0: 0.8320794194623955}
1167;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
  df['caa'] = df['caa'].apply(lambda x: x if x < 3 else 3)
  
  return df
";{0: 0.8241457341794465}
1168;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Filter dataset to keep only the selected columns
  df = df[['thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]

  return df
";{0: 0.8169482846902202}
1171;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8382808499743983}
1172;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'chol']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['caa'], drop_first=True)
  
  return df
";{0: 0.6557258555289289}
1173;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)

  return df
";{0: 0.8367029480302881}
1174;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8185144021487449}
1175;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.828329681952104}
1176;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['caa_binary'] = np.where(df['caa'] > df['caa'].median(), 1, 0)
  
  return df
";{0: 0.8281894500264411}
1177;"
    df = df[['cp', 'thalachh', 'oldpeak', 'exng', 'slp']]
    
    # One-hot encoding 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    # Standardizing 'thalachh' and 'oldpeak' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # Filling missing values in 'exng' column with the mode
    df['exng'].fillna(df['exng'].mode()[0], inplace=True)

    return df
";{0: 0.7886977861319966}
1178;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])  
  df = df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8438130686517784}
1179;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  # Transform 'thalachh' to binary based on the 25th percentile
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  # Feature engineering - ratio between 'oldpeak' and 'caa' columns
  df['oldpeak_caa_ratio'] = df['oldpeak'] / (df['caa'] + 1)
  
  return df
";{0: 0.836894499178982}
1180;"
  df = df[['thalachh', 'oldpeak', 'caa', 'exng', 'cp']]
  df['thalachh'] = np.log1p(df['thalachh'])
  df['oldpeak'] = np.sqrt(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['cp', 'exng'], prefix=['cp', 'exng'], drop_first=True)
  
  return df
";{0: 0.838108558108558}
1181;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.787291522420345}
1182;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  df['slp'] = np.where(df['slp'] >= 2, 1, 0)
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)

  return df
";{0: 0.8274731486715657}
1183;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8370711725550436}
1184;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # One-hot encode 'cp' column
  df = pd.get_dummies(df, columns=['cp'])

  return df
";{0: 0.8382756285875981}
1185;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = df['caa'].apply(lambda x: x if x < 4 else 4)
    df = pd.get_dummies(df, columns=['cp', 'caa'])
    
    return df
";{0: 0.7148789916822704}
1186;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'chol']]
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df['oldpeak'] = np.log1p(df['oldpeak'])
  df = pd.get_dummies(data=df, columns=['caa'], drop_first=True)

  return df
";{0: 0.658020937496142}
1187;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    return df
";{0: 0.8482500650533437}
1188;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=[-0.1, 0.5, 1.5, 2.5, 4], labels=[0, 1, 2, 3])
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
  df['caa_binary'] = np.where(df['caa'] > df['caa'].median(), 1, 0)
  
  return df
";{0: 0.8281894500264411}
1189;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  # Binarizing the 'thalachh' column
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  # Normalizing the 'oldpeak' column
  df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
  
  return df
";{0: 0.8370432625720833}
1190;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.851474358974359}
1191;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1192;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df = pd.get_dummies(df, columns=['slp', 'caa'], drop_first=True)

  return df
";{0: 0.6782915053540677}
1194;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

  return df
";{0: 0.8408602150537634}
1195;"
    return df[['age', 'chol', 'thalachh', 'caa', 'sex']].fillna(df.mean())
";{0: 0.7706807792916506}
1197;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Standardization
    for col in ['age', 'cp', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7994497731989328}
1198;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
  df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
  
  return df
";{0: 0.7990086709811723}
1199;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1200;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1201;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Filter dataset to keep only the selected columns
  df = df[['thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
  
  return df
";{0: 0.8207181259600616}
1202;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1203;"
    return pd.get_dummies(df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna(), columns=['cp', 'caa'])
";{0: 0.7274797885434469}
1204;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1205;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    return df
";{0: 0.7947748000134304}
1206;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1208;"
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

    # Binarize 'thalachh' column based on mean value
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    # Select top 5 columns based on importance and features analysis
    return df[['thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_2']]
";{0: 0.8047968160871386}
1209;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df = df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1', 'caa_2']]

  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df
";{0: 0.8371783819628646}
1210;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1211;"
# Binarize 'thalachh' column based on mean value
# Perform one-hot-encoding on categorical columns 'cp', 'slp', 'caa'
# Keep only the selected columns and drop the rest
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
    df = df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1', 'caa_2']]
    return df
";{0: 0.8371783819628646}
1212;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' column to a binary feature based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Drop the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' column to a binary feature based on presence of vessels
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1213;"
    df = df[['age', 'cp', 'trtbps', 'chol', 'thalachh']]
    
    # Normalizing 'age' column to be between 0 and 1
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Dropping rows with any missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.7316542218728946}
1214;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1215;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1216;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1217;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'cp' column into 4 categories
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Creating binary 'thalachh' column based on mean value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Standardizing 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # Drop 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8405943970830274}
1218;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalize 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Fill missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7990086709811723}
1219;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1220;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8650382768415554}
1221;"
# Dropping 'thalachh' column, converting it to binary, applying log transformation, creating dummies for 'cp', and processing 'caa' column.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1222;"
# Improved version of select_columns_and_return_dataframe_v2
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Normalize 'cp' column using binning
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
    
    # Convert 'thalachh' to binary based on whether it's above the mean
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    return df
";{0: 0.8345110087045571}
1223;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1224;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1226;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  

    return df
";{0: 0.8739972527472528}
1227;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1228;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.830952632771776}
1229;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1230;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df.drop(columns=['cp'], inplace=True)
    
    return df
";{0: 0.7697107493654283}
1231;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.831975806451613}
1233;"
    df = df[['sex', 'chol', 'thalachh', 'slp', 'thall']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    
    df = pd.concat([df, pd.get_dummies(df['slp'], prefix='slp')], axis=1)
    df.drop(columns=['slp'], inplace=True)
    
    df = pd.concat([df, pd.get_dummies(df['thall'], prefix='thall')], axis=1)
    df.drop(columns=['thall'], inplace=True)
    
    return df
";{0: 0.7719818979611606}
1234;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1235;"
    df = df[['chol', 'thalachh', 'cp', 'caa']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8302091293808292}
1236;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa_has_vessels'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8323453619064407}
1237;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.851474358974359}
1238;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'caa', 'exng'], drop_first=True)
    
    return df
";{0: 0.667224020908098}
1239;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['caa'] = (df['caa'] > 0).astype(int)

  return df
";{0: 0.8579067706487061}
1240;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1241;"
    df = df[['sex', 'chol', 'thalachh', 'slp', 'thall']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    
    df = pd.concat([df, pd.get_dummies(df['slp'], prefix='slp')], axis=1)
    df.drop(columns=['slp'], inplace=True)
    
    df = pd.concat([df, pd.get_dummies(df['thall'], prefix='thall')], axis=1)
    df.drop(columns=['thall'], inplace=True)
    
    return df
";{0: 0.761862850342113}
1242;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  
    
    df['caa'] = (df['caa'] > 0).astype(int)  

    return df
";{0: 0.8416933885786344}
1243;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8496031746031745}
1244;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1246;"
    return df[['cp', 'thalachh', 'oldpeak']].fillna(df.mean())
";{0: 0.7884277728796054}
1247;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['sex'] = df['sex'].map({0: 0, 1: 1})  # Binary encoding of 'sex' column

  return df
";{0: 0.7544568547302282}
1248;"
	return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].dropna()
";{0: 0.787291522420345}
1249;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df.drop(columns=['thalachh'], inplace=True)
    
    return df
";{0: 0.8382808499743983}
1250;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1251;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1252;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Discretize 'cp' column into 4 bins
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    
    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=False)
    
    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.847268410451956}
1253;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8096884336764397}
1254;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Select and arrange selected columns
  df = df[['thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df
";{0: 0.8207181259600616}
1255;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization based on 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1256;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1257;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1258;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1259;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1260;"
    # Selecting specific columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1261;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
1262;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7871904089371793}
1263;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = df['cp'].astype(str)  # Convert cp to string before one-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1264;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1265;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
1266;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
   
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Dropping rows with missing values in any column
    df.dropna(inplace=True)

    return df
";{0: 0.783243433809272}
1267;"
    # Choose relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on mean value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1269;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization based on 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1270;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)

  return df
";{0: 0.8504126254496429}
1271;"
  df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3])
  df = pd.get_dummies(df, columns=['cp'])

  return df
";{0: 0.746651255269871}
1272;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)

  return df
";{0: 0.8579067706487061}
1273;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]

    # One-hot encode 'cp' column and drop the first encoded column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7529003346458885}
1274;"
    df = df[['thalachh', 'oldpeak', 'slp', 'caa', 'age']]
    
    # One-hot encoding 'slp' column
    df = pd.get_dummies(df, columns=['slp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.7275865774812573}
1276;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1277;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Handling missing data by dropping rows with any missing values
    df.dropna(inplace=True)

    return df
";{0: 0.7968581333467637}
1278;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1279;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7913434144016601}
1280;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1281;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8272026327717761}
1282;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1283;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8345110087045571}
1284;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    return df
";{0: 0.8236111111111111}
1285;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.7133165445665446}
1287;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8048608474695431}
1288;"
  # One-hot encode 'cp', 'slp', 'caa' columns
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Select and rearrange columns accordingly
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1289;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1290;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization based on 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1291;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1292;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7793100012454851}
1293;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['age', 'sex', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.7712433050213259}
1294;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1295;"
    df = df[['thalachh', 'oldpeak', 'caa']]
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7315896296489354}
1296;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8739972527472528}
1297;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Reduce to only the selected features
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1298;"
# Continue the implementation
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8169482846902202}
1299;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.830952632771776}
1300;"
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'slp_0', 'slp_2', 'caa_0']]
";{0: 0.861538811825697}
1301;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)

  return df
";{0: 0.8579067706487061}
1302;"
  df = df[['thalachh', 'cp', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)

  return df
";{0: 0.8579067706487061}
1303;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int) 
    df.drop(columns=['thalachh'], inplace=True) 
    df['oldpeak'] = np.log1p(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp']) 
    df['caa'] = (df['caa'] > 0).astype(int) 
    
    return df
";{0: 0.8665031075481895}
1304;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.851474358974359}
1305;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1306;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1307;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.830952632771776}
1308;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalize 'thalachh' column using Min-Max scaling
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Fill missing values in 'oldpeak' column with median
    df['oldpeak'].fillna(df['oldpeak'].median(), inplace=True)
    
    return df
";{0: 0.8217511520737327}
1309;"
    df = df[['sex', 'chol', 'oldpeak', 'caa']]
    
    df['chol'] = np.log1p(df['chol'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7532286535303776}
1310;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1311;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df
";{0: 0.8408602150537634}
1312;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8438130686517784}
1313;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1314;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.8217511520737327}
1315;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7871904089371793}
1316;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binarization based on 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1317;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8091231425515103}
1318;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    return df
";{0: 0.8382808499743983}
1320;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    # Dropping rows with missing values
    df.dropna(inplace=True)

    return df
";{0: 0.7990086709811723}
1321;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1322;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' column to a binary feature based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Drop the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' column to a binary feature based on presence of vessels
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1323;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary column based on whether thalachh is higher than mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column and drop the first encoded column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert caa to binary based on whether it is greater than 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1324;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2']]
";{0: 0.8546148091434975}
1325;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
1326;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1327;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1328;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # One-hot encoding 'cp' column
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  # Standard scaling 'thalachh' column
  df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
  
  # Handling missing values in 'oldpeak' column
  df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
  
  return df
";{0: 0.8024174661932462}
1329;"
    # Keep only relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Encode 'cp' as ordered categories and create dummy variables
    df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binarize 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1330;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8367029480302881}
1331;"
    return df[['cp', 'oldpeak', 'caa']].dropna()
";{0: 0.8277019934939027}
1332;"
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Normalize 'cp' column using binning
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  # Convert 'thalachh' to binary based on whether it's above the mean
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8408602150537634}
1333;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1334;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1335;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    df['age_category'] = pd.cut(df['age'], bins=[0, 18, 35, 50, 70, np.inf], labels=['0-18', '19-35', '36-50', '51-70', '71+'], right=False)
    df = pd.get_dummies(df, columns=['age_category'])
    
    df = pd.get_dummies(df, columns=['sex'], drop_first=True)
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['trtbps'] = (df['trtbps'] - df['trtbps'].mean()) / df['trtbps'].std()
    
    df['chol'] = np.log1p(df['chol'])
    
    return df
";{0: -1}
1336;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1337;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7871904089371793}
1338;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1339;"
  # Selecting relevant columns and one-hot encoding
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarizing 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Returning modified DataFrame with selected columns
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2']]
";{0: 0.8469124932444604}
1340;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False, right=False)
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = np.sqrt(df['caa'])

    df = pd.get_dummies(df, columns=['cp', 'slp'])

    return df
";{0: 0.8528904358353511}
1341;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1342;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' and 'caa' columns
    df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
   
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.6379686337811961}
1343;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)

  return df
";{0: 0.8504126254496429}
1344;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on mean value for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1345;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
1346;"
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  return df[['thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8169482846902202}
1347;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  return df
";{0: 0.8367029480302881}
1348;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1349;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7770570570570571}
1350;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh_normalized'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df.drop(columns=['thalachh'], inplace=True)
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    return df
";{0: 0.769211574486158}
1351;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['age', 'sex', 'cp_0', 'cp_2', 'thalachh', 'oldpeak']]
";{0: 0.7511308696860239}
1352;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1353;"
    return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']].fillna(df.mean())
";{0: 0.7831385169558642}
1354;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1355;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1356;"
    df = df[['age', 'cp', 'slp', 'caa', 'thalachh']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['slp'] = df['slp'].astype('category')
    
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['thalachh_normalized'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df.drop(columns=['thalachh'], inplace=True)
    
    df['age_bin'] = pd.cut(df['age'], bins=[0, 30, 60, 100], labels=['young', 'adult', 'senior'])
    df = pd.get_dummies(df, columns=['age_bin'])
    
    return df
";{0: 0.7142212737819075}
1357;"
  df = pd.get_dummies(df, columns=['cp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'caa_0', 'caa_1']]
";{0: 0.8379039777426873}
1358;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization based on 0
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8665031075481895}
1359;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak_log'] = np.log1p(df['oldpeak'])
    df.drop(columns=['oldpeak'], inplace=True)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
1360;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7816368124564846}
1361;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1362;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1363;"
  # Perform one-hot-encoding on categorical columns
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Convert thalachh to binary based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  # Select the most important columns
  df = df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]

  return df
";{0: 0.8395913518650511}
1364;"
  return df[['age', 'sex', 'cp', 'trtbps', 'chol']]
";{0: 0.7135871766350075}
1365;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1366;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binarizing 'thalachh' column based on the mean value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    # Binarizing 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.847268410451956}
1367;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1369;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  df['caa'] = np.where(df['caa'] > 0, 1, 0)

  return df
";{0: 0.8504126254496429}
1370;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
   
    # Normalizing 'thalachh' column to be between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Dropping rows with missing values in any column
    df.dropna(inplace=True)

    return df
";{0: 0.7968581333467637}
1371;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1372;"
  # Keep only relevant columns
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Discretize 'cp' column into 4 bins
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  # Convert 'caa' to binary (0 or 1)
  df['caa'] = (df['caa'] > 0).astype(int)

  return df
";{0: 0.8579067706487061}
1373;"
# Filling missing values using mean and selecting relevant columns
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7871904089371793}
1374;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7871904089371793}
1375;"
  # Select only necessary columns
  df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
  
  # Discretize 'cp' column into 4 bins
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df
";{0: 0.8408602150537634}
1376;"
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'slp_0', 'slp_2', 'caa_0']]
";{0: 0.861538811825697}
1377;"
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
    
    # Binarize 'thalachh' column based on mean value
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8438130686517784}
1378;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'slp']]
    
    # One-hot encode 'cp', 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    # Replace missing values with median of the column values
    df.fillna(df.median(), inplace=True)
    
    return df
";{0: 0.7425483307062746}
1379;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1380;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' and min-max scaling
    df['oldpeak'] = (np.log1p(df['oldpeak']) - np.log1p(df['oldpeak']).min()) / (np.log1p(df['oldpeak']).max() - np.log1p(df['oldpeak']).min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1381;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1382;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
    return df
";{0: 0.8408602150537634}
1383;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8444396093339364}
1384;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7793100012454851}
1385;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.7831385169558642}
1386;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1387;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1388;"
    df = df[['thalachh', 'chol', 'cp', 'age', 'sex']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_bin'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7312329062552079}
1389;"
    # Selecting five columns of interest
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binarizing 'thalachh' column based on mean value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    # Converting 'caa' column to a binary indicator
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8484133493018129}
1390;"
  return df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
";{0: 0.7913105599666169}
1391;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1392;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7793100012454851}
1393;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  return df
";{0: 0.8513696876600102}
1394;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
1395;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1396;"
  # Keep selected columns and apply one-hot encoding
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.851474358974359}
1397;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'], drop_first=True)
    
    df['caa_has_vessels'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8323453619064407}
1398;"
    # Select relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Perform one-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7732295021701008}
1399;"
    df = df[['sex', 'thalachh', 'slp', 'exng', 'oldpeak']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    
    df = pd.concat([df, pd.get_dummies(df['slp'], prefix='slp')], axis=1)
    df.drop(columns=['slp'], inplace=True)
    
    return df
";{0: 0.778438560406849}
1400;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df = df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]

  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df
";{0: 0.8479029304029304}
1401;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    return df
";{0: 0.7968581333467637}
1402;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1403;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # One-hot encoding 'cp' column and 'caa' column
    df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
    
    # Normalize 'thalachh' column using Min-Max scaling
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Fill missing values in 'oldpeak' column with mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    return df
";{0: 0.6436575540128993}
1404;"
    df = df[['chol', 'thalachh', 'cp', 'caa']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8104270017543419}
1405;"
  # Keep columns: 'cp', 'thalachh', 'oldpeak', 'caa'
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  
  # Binarize 'thalachh' based on whether it is greater than the mean
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # Convert 'cp' to numerical values by binning into 4 categories 
  df['cp'] = pd.cut(df['cp'], bins=4, labels=False, include_lowest=True)
  
  return df
";{0: 0.8367029480302881}
1406;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Normalizing 'thalachh' column using min-max scaling
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    return df
";{0: 0.7715493886299336}
1407;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  # New feature engineering based on ratios
  df['thalachh_oldpeak_ratio'] = df['thalachh'] / (df['oldpeak'] + 1e-6)
  df['cp_0_slp_0'] = df['cp_0'] * df['slp_0']

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1', 'thalachh_oldpeak_ratio', 'cp_0_slp_0']]
";{0: 0.6939584330118438}
1408;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7793100012454851}
1409;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  return df[['cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8395913518650511}
1410;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1411;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1413;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8438130686517784}
1414;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    return df
";{0: 0.8436673717609731}
1415;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]

    # Binarizing 'thalachh' column based on median value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding 'cp' and 'slp' columns
    df = pd.get_dummies(df, columns=['cp', 'slp'])

    # Converting 'caa' column to a binary indicator
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8420132418917028}
1416;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8072337288254753}
1417;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].dropna()
";{0: 0.7913434144016601}
1418;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])

  # Binarize 'thalachh' column based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1419;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8207181259600616}
1420;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df.drop(columns=['cp'], inplace=True)
    
    return df
";{0: 0.7736790033336822}
1421;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1422;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    return df
";{0: 0.7968581333467637}
1423;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization based on median
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8739972527472528}
1424;"
  df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
  
  # Encode 'cp' column and drop the first category for each one-hot encoding
  df = pd.get_dummies(df, columns=['cp'], drop_first=True)
  
  return df
";{0: 0.7707969268131467}
1425;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak_log'] = np.log1p(df['oldpeak'])
    df.drop(columns=['oldpeak'], inplace=True)

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8739972527472528}
1426;"
  # One-hot encode 'cp', 'slp', 'caa' columns
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Convert 'thalachh' column to binary based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['age', 'sex', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.7760009618753253}
1427;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  # Binarize 'thalachh' based on mean value
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

  return df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.8477045177045177}
1428;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7871904089371793}
1429;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df = df.drop(columns=['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1430;"
    df = df[['sex', 'thalachh', 'slp', 'exng', 'oldpeak']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['sex', 'slp', 'exng'])
    
    return df
";{0: 0.7599781061850027}
1431;"
# Improved version with filling missing values with mean
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].fillna(df.mean())
";{0: 0.7913434144016601}
1434;"
  df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
  
  df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
  
  return df[['age', 'sex', 'thalachh', 'oldpeak', 'cp_0', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1']]
";{0: 0.7785072275394856}
1435;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8072337288254753}
1436;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8416933885786344}
1437;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]

    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Filling missing values in 'oldpeak' column with the mean
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)

    return df
";{0: 0.8024174661932462}
1438;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df['cp'] = pd.cut(df['cp'], bins=4, labels=[0, 1, 2, 3])
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    return df
";{0: 0.8496031746031745}
1439;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binarization
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1440;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['oldpeak'].fillna(df['oldpeak'].mean(), inplace=True)
    
    return df
";{0: 0.7968581333467637}
1441;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7507497970114799}
1442;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1443;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning 'thalachh' column into binary based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Standardizing 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # Creating one-hot encoding for 'cp' and 'caa'
    df = pd.get_dummies(df, columns=['cp', 'caa'], drop_first=True)
    
    return df
";{0: 0.6870826689754888}
1444;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # Binning 'thalachh' column into binary based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Standardizing 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # One-hot encoding the 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7556823454325284}
1445;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # To avoid multicollinearity
    
    # Binarization based on 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1446;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1447;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak_log'] = np.log1p(df['oldpeak'])
    df.drop(columns=['oldpeak'], inplace=True)

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
1448;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' column to a binary feature based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Drop the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp' column with dropping the first column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert 'caa' column to a binary feature based on presence of vessels
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1449;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    # Log transformation for 'chol'
    df['chol'] = np.log1p(df['chol'])
    
    # Create bins for 'thalachh' and one-hot encode the category
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    
    # One-hot encode 'cp' column
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df.drop(columns=['cp'], inplace=True)
    
    return df
";{0: 0.7775251571798361}
1450;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1451;"
    df = df[['age', 'thalachh', 'chol', 'sex', 'cp']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['age_category'] = pd.cut(df['age'], bins=[0, 30, 50, 70, np.inf], labels=['young', 'middle-aged', 'senior', 'elderly'], right=False)
    df = pd.get_dummies(df, columns=['age_category'])
    
    df['sex'] = np.where(df['sex'] == 1, 'male', 'female')
    df = pd.get_dummies(df, columns=['sex'])
    
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: -1}
1452;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1453;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7816368124564846}
1454;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa_binary'] = (df['caa'] > 0).astype(int)

    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8416933885786344}
1455;"
    df = pd.get_dummies(df, columns=['cp', 'slp', 'caa'])
    df = df[['thall', 'thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'slp_0', 'slp_2', 'caa_0', 'caa_1', 'caa_2']]
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    return df
";{0: 0.8408322281167109}
1456;"
    df = df[['cp', 'thalachh', 'oldpeak', 'slp', 'caa']]
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7507497970114799}
1457;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
1458;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1459;"
    df = df[['sex', 'chol', 'thalachh', 'slp', 'thall']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    
    df = pd.concat([df, pd.get_dummies(df['slp'], prefix='slp')], axis=1)
    df.drop(columns=['slp'], inplace=True)
    
    df = pd.concat([df, pd.get_dummies(df['thall'], prefix='thall')], axis=1)
    df.drop(columns=['thall'], inplace=True)
    
    return df
";{0: 0.7745612630405256}
1460;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1461;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    return df
";{0: 0.8665031075481895}
1462;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot-encoding
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting boolean column to integer
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1463;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1464;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
1465;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
1466;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7429581912340533}
1467;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1468;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
1469;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1470;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df = df.drop(columns=['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])    
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1471;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1472;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
1473;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1475;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1476;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1477;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Scaling numerical features if needed (not shown here)
    
    return df
";{0: 0.8665031075481895}
1478;"
# Retaining the same functionality, but with an optimized or alternate implementation.
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1479;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1480;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Scaling numerical features if needed (not shown here)
    
    return df
";{0: 0.8739972527472528}
1481;"
    # Select the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1482;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1483;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    df['chol'] = np.log1p(df['chol'])
    
    df['thalachh_category'] = pd.cut(df['thalachh'], bins=[0, 100, 150, np.inf], labels=['low', 'mid', 'high'], right=False)
    df = pd.get_dummies(df, columns=['thalachh_category'])
    
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df.drop(columns=['cp'], inplace=True)
    
    return df
";{0: 0.7697107493654283}
1484;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1485;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df = df.drop(columns=['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])    
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1486;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1488;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1489;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1491;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1492;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
1493;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1494;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8096884336764397}
1495;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1496;"
    # Select relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
1497;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8796237835747946}
1498;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1499;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8096884336764397}
1500;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1501;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8796237835747946}
1502;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
1503;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1504;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
1505;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8796478801767009}
1506;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1507;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    df['range_oldpeak'] = pd.cut(df['oldpeak'], bins=3, labels=False)
    
    return df
";{0: 0.8691252531621384}
1508;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.7062990007068954}
1509;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Encode 'cp' as ordered categories and create dummy variables
    df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binarize 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1510;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1511;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
1512;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1513;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7421562976851185}
1514;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8096884336764397}
1515;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
1516;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1517;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1518;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7793100012454851}
1519;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1520;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1521;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1522;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
1523;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1524;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization based on whether 'caa' is greater than 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1525;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
1526;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8096884336764397}
1527;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1528;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    df['chol'] = np.log1p(df['chol'])
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.712105371088422}
1529;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    df['range_oldpeak'] = pd.cut(df['oldpeak'], bins=3, labels=False)
    
    return df
";{0: 0.8616655757427836}
1530;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
1531;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    df['exng'] = (df['exng'] == 1).astype(int)

    return df
";{0: 0.8721641061554399}
1532;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1533;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1534;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8796237835747946}
1535;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1536;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1537;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting required columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Dropping 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding 'cp' column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' to binary

    df = (df - df.mean()) / df.std()  # Normalizing the dataset

    return df
";{0: 0.8536957304990092}
1538;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1539;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1540;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' and min-max scaling
    df['oldpeak'] = (np.log1p(df['oldpeak']) - np.log1p(df['oldpeak']).min()) / (np.log1p(df['oldpeak']).max() - np.log1p(df['oldpeak']).min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1541;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8665031075481895}
1542;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1544;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8796237835747946}
1545;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1547;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1548;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
1549;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    df['range_oldpeak'] = pd.cut(df['oldpeak'], bins=3, labels=False)
    
    return df
";{0: 0.8691252531621384}
1550;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1551;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1552;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8721641061554399}
1553;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  
    df['caa'] = (df['caa'] > 0).astype(int)  

    return df
";{0: 0.7816368124564846}
1554;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.7133165445665446}
1555;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on mean value for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1556;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
      
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    return df
";{0: 0.8665031075481895}
1557;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.7793100012454851}
1558;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
1559;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1560;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    return df
";{0: 0.8416933885786344}
1561;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1562;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1563;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1564;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1566;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1567;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binarization based on presence of vessels
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1568;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7793100012454851}
1569;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' column to a binary feature based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Drop the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp' column with dropping the first column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert 'caa' column to a binary feature based on presence of vessels
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1570;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary feature based on mean value for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarizing 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1571;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1572;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
1573;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1574;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1575;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1576;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1577;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create a binary feature based on 'thalachh' column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary feature
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1578;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
1579;"
    # Selecting columns ['cp', 'thalachh', 'oldpeak', 'caa', 'exng']
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Creating a binary column based on 'thalachh' mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping 'thalachh' column after creating 'thalachh_binary'
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting 'caa' to binary based on greater than 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1580;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    df['chol'] = np.log1p(df['chol'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7449433920855633}
1581;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1582;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1583;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1585;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(['thalachh'], axis=1, inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1586;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    return df
";{0: 0.8721641061554399}
1587;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create a binary feature based on 'thalachh' column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary feature
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1588;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1589;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the required columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarize thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Drop original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log-transform the oldpeak column

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary

    df = (df - df.mean()) / df.std()  # Standardize the dataset

    return df
";{0: 0.8536957304990092}
1590;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
1591;"
    # Selecting specific columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1592;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1593;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Creating a binary column based on 'thalachh' mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Dropping 'thalachh' column after creating 'thalachh_binary'
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting 'caa' to binary based on greater than 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1594;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1595;"
    df = df[['sex', 'thalachh', 'cp', 'chol', 'age']]
    df['chol'] = np.log1p(df['chol'])
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df.drop(columns=['cp'], inplace=True)
    
    return df
";{0: 0.7472704714640199}
1596;"
    # Select the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
1597;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1599;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
1600;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Feature scaling
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8706349206349205}
1601;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1602;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1603;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7793100012454851}
1604;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1605;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
1606;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting boolean column to integer
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1607;"
# Data preprocessing function
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8721641061554399}
1608;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1609;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1610;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1611;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' and min-max scaling
    df['oldpeak'] = (np.log1p(df['oldpeak']) - np.log1p(df['oldpeak']).min()) / (np.log1p(df['oldpeak']).max() - np.log1p(df['oldpeak']).min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa' -- assuming no major vessels are marked as '0' and any other value means vessels are present
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8392894915766412}
1612;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8072337288254753}
1613;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
1614;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1615;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1616;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply squared transformation to oldpeak
    df['oldpeak'] = df['oldpeak']**2
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8434872822965674}
1617;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], dtype=int)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1618;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1619;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
1620;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
1621;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
1622;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8665031075481895}
1623;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1624;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the required columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarize thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Drop original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log-transform the oldpeak column

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary

    df = (df - df.mean()) / df.std()  # Standardize the dataset

    return df
";{0: 0.8536957304990092}
1625;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
1627;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1628;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1630;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1631;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the required columns

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  # Binarize thalachh column using median
    df.drop(columns=['thalachh'], inplace=True)  # Drop original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log-transform the oldpeak column

    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  # One-hot encode cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary

    df = (df - df.mean()) / df.std()  # Standardize the dataset

    return df
";{0: 0.8352045951588052}
1632;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1633;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.772853630387877}
1634;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df.drop(columns=['thalachh'], inplace=True)
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1635;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binarization based on 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1636;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8721641061554399}
1637;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1638;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8796237835747946}
1639;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1640;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
1641;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1642;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1643;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Encode 'cp' as ordered categories and create dummy variables
    df['cp'] = pd.Categorical(df['cp'], categories=[0, 1, 2, 3], ordered=True)
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binarize 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1644;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8528171372868745}
1645;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1646;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1647;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1648;"

    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8273111445234189}
1649;"
    # Keeping columns 'cp', 'thalachh', 'oldpeak', 'caa'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary column for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8096884336764397}
1650;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(['thalachh'], axis=1, inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1651;"
# Dropping 'exng' column for better generalization
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    # As no longer using 'exng', dropping it
    if 'exng' in df.columns:
        df.drop(columns='exng', inplace=True)
    
    return df
";{0: 0.8469779488368449}
1652;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
1653;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7816368124564846}
1654;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7770570570570571}
1655;"
    df = df[['sex', 'thalachh', 'cp', 'chol', 'age']]
    df['chol'] = np.log1p(df['chol'])
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df.drop(columns=['cp'], inplace=True)
    
    return df
";{0: 0.7472704714640199}
1656;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on the mean of 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1657;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1658;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
1659;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
1660;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1661;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1662;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1663;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1664;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.7770570570570571}
1665;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    return df
";{0: 0.8796237835747946}
1666;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1667;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1668;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
1669;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
1670;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binarize 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1671;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
1672;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary feature based on mean value for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarizing 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1673;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
1675;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8796237835747946}
1676;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)
    
    return df
";{0: 0.8721641061554399}
1677;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8796237835747946}
1678;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
1679;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8701373906662113}
1680;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1681;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8721641061554399}
1682;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1683;"
    df = df[['thall', 'age', 'thalachh', 'chol', 'exng']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'thall'
    df = pd.get_dummies(df, columns=['thall'])
    
    # Binarization for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.6891712801060672}
1684;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1685;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    return df
";{0: 0.8739972527472528}
1688;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1689;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1690;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1691;"
    # Selecting the relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Creating a binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1692;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1693;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=np.number).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8483489461358313}
1694;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
1697;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1698;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1700;"
    # Select specified columns from the dataset
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' by checking if it's more than 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1701;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
1702;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on mean value for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1703;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1704;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1705;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
1706;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1707;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1708;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1709;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
1710;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1711;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1712;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting boolean column to integer
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1713;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
1716;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    return df
";{0: 0.8665031075481895}
1717;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  df['oldpeak'] = np.log1p(df['oldpeak'])

  df = pd.get_dummies(df, columns=['cp'])

  df['caa'] = (df['caa'] > 0).astype(int)

  for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
      df[col] = (df[col] - df[col].mean()) / df[col].std()

  return df
";{0: 0.892156009413472}
1718;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1719;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1720;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1721;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1723;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting relevant columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping 'thalachh' column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation for 'oldpeak'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding 'cp' column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' to binary
    
    return df
";{0: 0.8416933885786344}
1724;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1725;"
    # Select important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1726;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
1727;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1728;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on the distribution of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Standardize selected columns
    selected_cols = ['age', 'oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8439080511777808}
1729;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
1731;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
1732;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1733;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1734;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.892156009413472}
1735;"
    df = df[['thalachh', 'age', 'chol', 'restecg', 'exng']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Normalizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])
    
    # Binarization for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7456657002353724}
1736;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
1737;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
1738;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    selected_cols = ['age', 'oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8397550457132998}
1739;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1741;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1742;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    selected_cols = ['age', 'oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.850465428226961}
1743;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1745;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
1746;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8403679653679654}
1747;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8351731601731602}
1748;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8739972527472528}
1749;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create categorical feature based on quartile ranges of 'thalachh'
    df['thalachh_category'] = pd.qcut(df['thalachh'], q=4, labels=False)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8646708306676578}
1750;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
1751;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create categorical feature based on quartile ranges of 'thalachh'
    df['thalachh_category'] = pd.qcut(df['thalachh'], q=4, labels=False)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.872373146566695}
1752;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
1753;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1754;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].median() else 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    selected_cols = ['age', 'oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()
    
    return df
";{0: 0.8414754758208268}
1756;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = 1 - df['sex']
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8327922077922079}
1757;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8739972527472528}
1758;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Normalizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])

    # Binarization for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7437762865093374}
1759;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'chol']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing 'thalachh' and 'chol' columns
    for col in ['thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7458821441594434}
1760;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1761;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1762;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8567516113212834}
1763;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1764;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1765;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1766;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1767;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'chol']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing 'thalachh' and 'chol' columns
    for col in ['thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7349531824108094}
1768;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
1769;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1770;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.892156009413472}
1771;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1772;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
1773;"
    df = df[['thalachh', 'oldpeak', 'age', 'chol', 'exng']]

    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Normalizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.7370606609015613}
1774;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])
    
    # Binarization for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7414034051534053}
1775;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
1776;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
1777;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1778;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1779;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
1780;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1781;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    df['caa'] = (df['caa'] > 0).astype(int)  
    
    df = (df - df.mean()) / df.std()  

    return df
";{0: 0.8536957304990092}
1782;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: x > 0).astype(int)

    return df
";{0: 0.8665031075481895}
1783;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
1784;"
# Continuing with improvements in select_columns_and_return_dataframe_v2 function

    # Selecting and renaming most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarizing 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting 'caa' to binary feature
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1785;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]
    
    df.fillna(df.mean(), inplace=True)
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df = pd.get_dummies(df, columns=['restecg'])
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7456657002353724}
1787;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
1788;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1789;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
  
  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  df['oldpeak'] = np.log1p(df['oldpeak'])

  df = pd.get_dummies(df, columns=['cp'])

  df['caa'] = (df['caa'] > 0).astype(int)

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.877353896103896}
1790;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1791;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1792;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1793;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1794;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1795;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1796;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1797;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
1798;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1799;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Standardization
    for col in ['age', 'cp', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7963289768577976}
1801;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1802;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8327922077922079}
1803;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
1804;"
    # Keep only relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
1805;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except one-hot encoded
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8698597509048328}
1806;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1807;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
1808;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'chol']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing 'thalachh' and 'chol' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7458821441594434}
1809;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
1810;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create categorical feature based on quartile ranges of 'thalachh'
    df['thalachh_category'] = pd.qcut(df['thalachh'], q=4, labels=False)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.872373146566695}
1811;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
1812;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1813;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
1814;"
    df = df[['age', 'sex', 'thalachh', 'chol', 'caa']]
    
    # Map binary values
    df['sex'] = 1 - df['sex']
    
    # Normalize 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Binarize 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.7414099379943784}
1815;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1816;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1817;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on median value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
1818;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1819;"
    df = df[['thalachh', 'chol', 'cp', 'age', 'sex']]
    
    # Binning 'chol' based on quartiles
    df['chol'] = pd.qcut(df['chol'], q=4, labels=False, duplicates='drop')
    
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Min-Max scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8337773224043715}
1821;"
    # Keep only the selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1822;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
1823;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on median value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8792095044118824}
1824;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1825;"
    # Select specific columns
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on the distribution of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Standardize selected columns
    selected_cols = ['age', 'oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8530883790466331}
1826;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating binary column based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1827;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1828;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_category'] = pd.qcut(df['thalachh'], q=4, labels=False)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8685841040679751}
1829;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 
    
    # Convert 'thalachh' column to binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Logarithmically transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1830;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1831;"
    df = df[['age', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Normalizing 'age' and 'oldpeak' columns
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'caa' and 'exng'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7650607935441831}
1832;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1833;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary feature based on median value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on > 0 condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8869894432837911}
1834;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1835;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Applying z-score normalization for 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Applying z-score normalization for 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8236213170004024}
1836;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
1837;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.871867941304792}
1838;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
1839;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1840;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8869894432837911}
1841;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding of 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization of 'caa' column based on whether it is greater than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1842;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1843;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1844;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
1845;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()
    
    return df
";{0: 0.8846618642144086}
1846;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding of 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization of 'caa' column based on whether it is greater than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1847;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
1848;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1849;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1850;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
1851;"
    df = df[['thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['caa'])

    selected_cols = ['oldpeak', 'caa_0', 'caa_1']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.579125875179006}
1852;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1853;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create a binary feature based on the distribution of 'thalachh' and drop the original column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary indicating presence of any major vessels
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1854;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1855;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1856;"
    # Select specific columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1857;"
    # Choose relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' column to binary format
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1858;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarize 'caa' column based on whether greater than 0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1859;"
    df = df[['age', 'sex', 'thalachh', 'chol', 'caa']]
    
    # Map binary values
    df['sex'] = 1 - df['sex']
    
    # Normalize 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Binarize 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.7454773983118386}
1860;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
1861;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])

    return df
";{0: 0.8674475384584086}
1862;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binarization
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1863;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8665031075481895}
1864;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1865;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
1866;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1867;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on the mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding for the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary feature
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()

    return df
";{0: 0.8846618642144086}
1868;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1869;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1870;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
1871;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
1873;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()
    
    return df
";{0: 0.8846618642144086}
1874;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and categorical columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
1875;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
1876;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1877;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8665031075481895}
1878;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1879;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1880;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1881;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1882;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding of 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization of 'caa' column based on whether it is greater than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1883;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.8431300085424887}
1884;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
1885;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1886;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
1888;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
1889;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1890;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' column to binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Logarithmically transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns except for one-hot encoded columns
    df[['thalachh_binary', 'oldpeak', 'caa']] = (df[['thalachh_binary', 'oldpeak', 'caa']] - df[['thalachh_binary', 'oldpeak', 'caa']].mean()) / df[['thalachh_binary', 'oldpeak', 'caa']].std()

    return df
";{0: 0.8591298356587886}
1891;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
1892;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1893;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1894;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: int(x > 0))
    
    df = df.assign(
        oldpeak=lambda x: (x['oldpeak'] - x['oldpeak'].mean()) / x['oldpeak'].std(),
        cp_0=lambda x: (x['cp_0'] - x['cp_0'].mean()) / x['cp_0'].std(),
        cp_1=lambda x: (x['cp_1'] - x['cp_1'].mean()) / x['cp_1'].std(),
        cp_2=lambda x: (x['cp_2'] - x['cp_2'].mean()) / x['cp_2'].std(),
        cp_3=lambda x: (x['cp_3'] - x['cp_3'].mean()) / x['cp_3'].std(),
        thalachh_binary=lambda x: (x['thalachh_binary'] - x['thalachh_binary'].mean()) / x['thalachh_binary'].std(),
        caa=lambda x: (x['caa'] - x['caa'].mean()) / x['caa'].std()
    )
    
    return df
";{0: 0.8701373906662113}
1895;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1896;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
1897;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1898;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
1899;"
  return df[['cp', 'oldpeak', 'caa']].assign(
      thalachh_binary = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
      oldpeak = np.log1p(df['oldpeak']),
      cp_0 = pd.get_dummies(df['cp'])[0],
      cp_1 = pd.get_dummies(df['cp'])[1],
      cp_2 = pd.get_dummies(df['cp'])[2],
      cp_3 = pd.get_dummies(df['cp'])[3],
      caa = (df['caa'] > 0).astype(int),
  ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8685986682808717}
1900;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1902;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
1903;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1904;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1905;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
1906;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
1907;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8623574517943025}
1908;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1909;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1911;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
1912;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8501942342721029}
1913;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
1914;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
1915;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1916;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8591559829059829}
1917;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: int(x > 0))

    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8701373906662113}
1918;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
1919;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1920;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1921;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
1922;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
1923;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1924;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.818617395100446}
1925;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1926;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
1927;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Binarization for 'sex' column
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 0 else 0)
    
    # Applying log transformation to 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization for 'exng' column
    df['exng'] = df['exng'].apply(lambda x: 1 if x == 1 else 0)
    
    # Feature scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8344798985167838}
1928;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.854424800110284}
1929;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1930;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
1931;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1932;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8562015762015761}
1933;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8548621975952484}
1934;"
    # Choose the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Drop original thalachh column
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log-transform the oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
1935;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1936;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1937;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
1939;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1940;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
1943;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in df.columns:
        if np.isnan(df[col]).any():
            df[col].fillna(df[col].mean(), inplace=True)

    return df
";{0: 0.8846618642144086}
1944;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1945;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1946;"
    columns = ['cp', 'thalachh', 'oldpeak', 'caa']
    
    df = df[columns]
    
    # Binarization of 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1947;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])

    return df
";{0: 0.8646825614998834}
1948;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1949;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1950;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for numerical columns
    for col in ['oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8709536569987388}
1951;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8621292124399537}
1952;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1953;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8543822553897179}
1954;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8517593045700458}
1955;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
1956;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    # Handling missing values by dropping
    df.dropna(inplace=True)

    # Normalizing 'age', 'chol', 'thalachh' columns
    for col in ['age', 'chol', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.7986847158218126}
1957;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1959;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1960;"
    # Selecting specific columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
1961;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
1962;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1963;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1964;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
1965;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
1966;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1967;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1969;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1970;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
1971;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1972;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8524893162393162}
1974;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
1975;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1976;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
1977;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
1978;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8528171372868745}
1979;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
1980;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1981;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1982;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
1983;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
1984;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1985;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1986;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1987;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
1988;"
    df = df[['chol', 'thalachh', 'exng', 'cp', 'oldpeak']]
    
    # Imputing missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Standardizing 'chol' and 'thalachh' columns
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8104183066655258}
1990;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
1991;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
1993;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
1994;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8210720999514102}
1995;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8623574517943025}
1996;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp']).drop(columns=['cp_0'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8480755937610776}
1997;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
1998;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
1999;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8524893162393162}
2000;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.820506808826481}
2001;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2002;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2003;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2004;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp_0=pd.get_dummies(df['cp'])[0],
        cp_1=pd.get_dummies(df['cp'])[1],
        cp_2=pd.get_dummies(df['cp'])[2],
        cp_3=pd.get_dummies(df['cp'])[3],
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8489050868486352}
2005;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2006;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2007;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])

    return df
";{0: 0.8674475384584086}
2008;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on quantiles for 'thalachh'
    df['thalachh_binary'] = pd.qcut(df['thalachh'], q=2, labels=[0, 1])
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8623574517943025}
2009;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8352045951588052}
2010;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8785470085470084}
2011;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2012;"
    df = df[['age', 'sex', 'cp', 'fbs', 'thalachh']]

    # Normalizing 'age', 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # Binarization for 'sex' and 'fbs'
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 0 else 0)
    df['fbs'] = df['fbs'].apply(lambda x: 1 if x == 1 else 0)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.8248657796451914}
2013;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2014;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2015;"
    # Select the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    # Binarize thalachh column using median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    
    # Drop original thalachh column
    df.drop(columns=['thalachh'], inplace=True)  
    
    # Log-transform the oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8352045951588052}
2016;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
2017;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2018;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2019;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
2021;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2022;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df = df.drop(columns=['thalachh'])
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2023;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]

    df['sex'] = 1 - df['sex']

    df['thalachh'] = np.sqrt(df['thalachh'])

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8351731601731602}
2024;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2025;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    df[['cp_1', 'cp_2', 'cp_3']] = (df[['cp_1', 'cp_2', 'cp_3']] - df[['cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_1', 'cp_2', 'cp_3']].std()
    
    return df
";{0: 0.875840370922338}
2026;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
2027;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2028;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8393853861192572}
2029;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2030;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns='thalachh', inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], dtype=int)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2031;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'trtbps']]

    # Binning 'oldpeak' based on quartiles
    df['oldpeak'] = pd.qcut(df['oldpeak'], q=4, labels=False, duplicates='drop')

    # Standard Scaling for 'thalachh' and 'trtbps'
    for col in ['thalachh', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Min-Max scaling for 'age'
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())

    return df
";{0: 0.8078828389279209}
2033;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7924237376999198}
2034;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2035;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
2036;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
2037;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2038;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2039;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2040;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2041;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2042;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        mean_val = df[col].mean()
        std_val = df[col].std()
        df[col] = (df[col] - mean_val) / std_val
    
    return df
";{0: 0.8569979282473265}
2044;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2045;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2046;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all numeric features
    numeric_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in numeric_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2047;"
    columns = ['cp', 'thalachh', 'oldpeak', 'caa']
    
    # Select relevant columns
    df = df[columns]
    
    # Binarize 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2048;"
    # Select relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2049;"
    df = df[['age', 'sex', 'thalachh', 'chol', 'caa']]
    
    df['sex'] = 1 - df['sex']
    
    # Normalize 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.7525470704429862}
2050;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2051;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on quantiles for 'thalachh'
    df['thalachh_binary'] = pd.qcut(df['thalachh'], q=2, labels=[0, 1])
    df.drop(columns=['thalachh'], inplace=True)

    # Power transformation for 'oldpeak'
    df['oldpeak'] = np.power(df['oldpeak'], 1/3)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.850139151556436}
2052;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2053;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True) 
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8352045951588052}
2054;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2055;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2056;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2057;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2058;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2059;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2060;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2061;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8452244604483411}
2062;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2063;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2064;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2065;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    # Filling missing values with mean
    df = df.fillna(df.mean())

    # Normalizing age and chol columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # One-hot encoding for restecg
    df = pd.get_dummies(df, columns=['restecg'])

    # Binarization for exng
    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7369966254923883}
2066;"
    return df[['cp', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp_0=pd.get_dummies(df['cp'])[0],
        cp_1=pd.get_dummies(df['cp'])[1],
        cp_2=pd.get_dummies(df['cp'])[2],
        cp_3=pd.get_dummies(df['cp'])[3],
        caa=(df['caa'] > 0).astype(int),
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8611045230818085}
2067;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2068;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
2069;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2070;"
    selected_cols = ['cp', 'thalachh', 'oldpeak', 'caa']
    
    df = df[selected_cols]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8210720999514102}
2071;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = df['oldpeak']**2
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8434872822965674}
2072;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8543822553897179}
2073;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2074;"
    df = df[['restecg', 'thalachh', 'exng', 'oldpeak', 'age']]
    
    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.7446169400114457}
2075;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp_0=pd.get_dummies(df['cp'])[0],
        cp_1=pd.get_dummies(df['cp'])[1],
        cp_2=pd.get_dummies(df['cp'])[2],
        cp_3=pd.get_dummies(df['cp'])[3],
        caa=(df['caa'] > 0).astype(int),
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.850840570719603}
2076;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
2078;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
2079;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2080;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2081;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2082;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2083;"
    df = df[['age', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    df.fillna(df.median(), inplace=True)
    
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7608302277060023}
2084;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2085;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2086;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
2087;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2088;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
2089;"
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7627890631936559}
2090;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    return df
";{0: 0.8617241021690173}
2091;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2092;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]

    # Normalizing 'age' and 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # Binarization for 'sex' and 'exng'
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 0 else 0)
    df['exng'] = df['exng'].apply(lambda x: 1 if x == 1 else 0)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.8149583045193832}
2093;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2094;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
2095;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2097;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns (z-score normalization)
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8698597509048328}
2098;"
    df = df[['thalachh', 'exng', 'caa', 'cp', 'oldpeak']]
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalize 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binarize 'caa' based on presence
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize all selected columns
    for col in ['thalachh', 'exng', 'caa', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8636660188898994}
2099;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2100;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8756242010677495}
2101;"
    # Selecting relevant columns
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
2102;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2103;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8416933885786344}
2104;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing the numeric columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2105;"
    df = df[['age', 'sex', 'thalachh', 'chol', 'caa']]
    
    df['sex'] = 1 - df['sex']
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.754108350692791}
2106;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2107;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2108;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2109;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':  # Skipping target column
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2110;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2111;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2112;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7881299523891853}
2113;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2114;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on threshold
    threshold = df['thalachh'].mean()
    df['thalachh_binary'] = (df['thalachh'] > threshold).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
2115;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]

    # Target column preprocessing for 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'age'
    df['age'] = np.log1p(df['age'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization on mean for 'age'
    df['age_binary'] = np.where(df['age'] > df['age'].mean(), 1, 0)
    df.drop(columns=['age'], inplace=True)

    # Standard Scaling for 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8080539718461729}
2116;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2117;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > np.mean(df['thalachh']), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2118;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2119;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
2120;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2121;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    return df
";{0: 0.8617241021690173}
2122;"
    def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
        df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
        
        df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
        df.drop(columns=['thalachh'], inplace=True)
        
        df['oldpeak'] = np.log1p(df['oldpeak'])
        
        df = pd.get_dummies(df, columns=['cp'], prefix='cp')
        
        df['caa'] = (df['caa'] > 0).astype(int)
        
        df = (df - df.mean()) / df.std()
        
        return df
";{0: 0.8701373906662113}
2123;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2125;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
2126;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2127;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2128;"
    df = df[['thalachh', 'oldpeak', 'caa', 'exng', 'age']]

    # Binning for 'age'
    bins = [0, 30, 50, 70, np.inf]
    labels = ['0-30', '31-50', '51-70', '70+']
    df['age_group'] = pd.cut(df['age'], bins=bins, labels=labels)

    # One-hot encoding for 'age_group'
    df = pd.get_dummies(df, columns=['age_group'])

    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: -1}
2130;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2131;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2132;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2133;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2134;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2135;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2136;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: int(x > 0))
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binary', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
2137;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and categorical columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
2138;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2139;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = (df['caa'] > 0).astype(int)

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8588919178749688}
2140;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2141;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2142;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2143;"
    df = df[['thalachh', 'chol', 'exng', 'oldpeak', 'cp']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'thalachh' and 'chol' columns
    for col in ['thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.8032498169046904}
2144;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2145;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Target column preprocessing for 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'age'
    df['age'] = np.log1p(df['age'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization on mean for 'age'
    df['age_binary'] = np.where(df['age'] > df['age'].mean(), 1, 0)
    df.drop(columns=['age'], inplace=True)
    
    # Standard Scaling for 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8080539718461729}
2146;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2147;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns only
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2148;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2149;"
    df = df[['age', 'sex', 'cp', 'restecg', 'thalachh']]
    
    # Standardizing 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # One-hot encoding for 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    return df
";{0: 0.7743253288592168}
2150;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True) 

    df['oldpeak'] = np.log1p(df['oldpeak']) 

    df = pd.get_dummies(df, columns=['cp']) 

    df['caa'] = (df['caa'] > 0).astype(int) 

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std() 

    return df
";{0: 0.892156009413472}
2151;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2152;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2154;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7881299523891853}
2155;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2156;"
    # Keep columns 'cp', 'thalachh', 'oldpeak', 'caa'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2157;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode the cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa to binary based on whether it is greater than zero
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize numerical columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2158;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df.drop('cp', axis=1, inplace=True)
    
    return df
";{0: 0.7071293272855097}
2159;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2160;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2161;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2163;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2164;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2166;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2167;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
2168;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':  # Skipping target column
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2169;"
# Improved version of `select_columns_and_return_dataframe_v2`.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
2170;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on quantiles for 'thalachh'
    df['thalachh_binary'] = pd.qcut(df['thalachh'], q=2, labels=[0, 1])
    df.drop(columns=['thalachh'], inplace=True)

    # Power transformation for 'oldpeak'
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.850139151556436}
2171;"

    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df

";{0: 0.892156009413472}
2172;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.818617395100446}
2173;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2175;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2176;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on quantiles for 'thalachh'
    df['thalachh_binary'] = pd.qcut(df['thalachh'], q=2, labels=[0, 1])
    df.drop(columns=['thalachh'], inplace=True)

    # Power transformation for 'oldpeak'
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.850139151556436}
2177;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2178;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except target
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2179;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2180;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2182;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8709536569987388}
2183;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2185;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
2186;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode the cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa to binary based on whether it is greater than zero
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize numerical columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2187;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
2188;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2189;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.872859224109224}
2190;"
    # Keep only selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Encode 'thalachh' column as binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log scaling on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Convert 'caa' column to binary based on condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Normalize the dataset 
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8701373906662113}
2191;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8327922077922079}
2193;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2194;"
    # Selecting the most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarizing thalachh column based on its mean value
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting caa to binary feature based on whether it is greater than zero
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected numerical columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2195;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2196;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2197;"
    df = df[['chol', 'thalachh', 'oldpeak', 'trtbps', 'sex']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)

    # Min-max scaling for 'chol', 'thalachh', 'oldpeak', and 'trtbps'
    for col in ['chol', 'thalachh', 'oldpeak', 'trtbps']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.7579924242424243}
2198;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2199;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])

    return df
";{0: 0.8674475384584086}
2200;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  # Binarize thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transform oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode the cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary based on whether it is greater than zero

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize numerical columns

    return df
";{0: 0.818617395100446}
2201;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.872859224109224}
2202;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    return df
";{0: 0.8695040410409263}
2203;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2204;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2205;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting relevant columns

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  # Binarizing 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of 'oldpeak' column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' to binary based on a condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2206;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting relevant columns

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  # Binarizing 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of 'oldpeak' column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' to binary based on a condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2207;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2208;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2209;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2210;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])

    return df
";{0: 0.8646825614998834}
2211;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8698597509048328}
2212;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2213;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2214;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2215;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2216;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
2217;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=['float64']).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8709536569987388}
2218;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting relevant columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarizing 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of 'oldpeak' column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' to binary based on a condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2219;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2220;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2221;"
    # Selecting specific columns
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Normalizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # One-hot encoding
    df = pd.get_dummies(df, columns=['restecg'])

    # Binarization
    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7480700718200719}
2222;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2223;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.872859224109224}
2224;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2225;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2226;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2227;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2228;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2229;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8701373906662113}
2230;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7840411840411841}
2231;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
2232;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2233;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2234;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2235;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2237;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2240;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2241;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating binary thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding the cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa to binary based on condition

    # Standardizing numerical columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2242;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2243;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2244;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select specified columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarize thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Drop thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transform oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode the cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa column to binary based on whether it is greater than zero

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize numerical columns

    return df
";{0: 0.8846618642144086}
2245;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2246;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Custom feature engineering
    df['resting_rate'] = df['thalachh'] / (df['oldpeak'] + 1)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Normalize 'caa' between [0, 1]
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.806037812727244}
2247;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
2248;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8594616204690831}
2249;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on threshold
    threshold = df['thalachh'].mean()
    df['thalachh_binary'] = (df['thalachh'] > threshold).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2250;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
2251;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8701373906662113}
2252;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2253;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the relevant columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarize thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transform oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode the cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary based on whether it is greater than zero

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize numerical columns

    return df
";{0: 0.8162445137445136}
2254;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  
        
    return df
";{0: 0.818617395100446}
2255;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2256;"
    df = df[['thalachh', 'chol', 'cp', 'oldpeak', 'age']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)

    # Normalizing 'thalachh' and 'chol' columns
    for col in ['thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.739324767110263}
2257;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2259;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2260;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8480755937610776}
2262;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2263;"
    df = df[['thalachh', 'exng', 'caa', 'cp', 'oldpeak']]
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalize 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binarize 'caa' based on presence
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize all selected columns
    for col in ['thalachh', 'exng', 'caa', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8636660188898994}
2264;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2265;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all features
    for col in df.columns:
        if col != 'target':  # Assuming target column is already removed
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2266;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2267;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2268;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2269;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns only
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2270;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
2271;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
2272;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2273;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2274;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2275;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa'] + [col for col in df.columns if col.startswith('cp')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2276;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) 
    df.drop(columns=['thalachh'], inplace=True) 
    
    df['oldpeak'] = np.log1p(df['oldpeak']) 
    
    df = pd.get_dummies(df, columns=['cp']) 
    
    df['caa'] = (df['caa'] > 0).astype(int) 
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2277;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2278;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8709536569987388}
2280;"
    # Selecting only necessary columns
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
2281;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2282;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2283;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
2284;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2285;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8517593045700458}
2286;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    # Normalize 'cp' column
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    
    return df
";{0: 0.8467585954806701}
2287;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2288;"
    # Select the most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for caa column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for oldpeak column and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2289;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)

    return df
";{0: 0.8749741265110117}
2290;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2291;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2292;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2293;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
2294;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization with mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2295;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2296;"
    return df[['cp', 'oldpeak', 'caa']]

    df['caa'] = (df['caa'] > 0).astype(int)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.8196997706542248}
2298;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2299;"
    # Select the most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    # Standard Scaling for each column
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2300;"
    # Selecting 'cp', 'thalachh', 'oldpeak', 'caa' columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2301;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8714065303978641}
2302;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2303;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
2305;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2306;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2307;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all remaining columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2308;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
2310;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
2311;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2312;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8393853861192572}
2313;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
2314;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2315;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2316;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2318;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2319;"
    df = df[['thalachh', 'age', 'chol', 'restecg', 'exng']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Normalizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])
    
    # Binarization for 'exng'
    df['exng'] = df['exng'].astype(int)
    
    return df
";{0: 0.7414034051534053}
2320;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
2321;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2322;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.871867941304792}
2323;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2324;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2325;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8181799976154813}
2326;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
2327;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization with mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2328;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2329;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp', 'chol']]
    
    # Impute missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Standard scaling for 'thalachh', 'oldpeak' and 'chol'
    for col in ['thalachh', 'oldpeak', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Binarize 'caa' to indicate presence
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8453642478211443}
2330;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
2331;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8714065303978641}
2332;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2333;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'], _ = pd.cut(df['thalachh'], bins=bins, labels=labels, retbins=True)
    
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8543822553897179}
2334;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2335;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all remaining columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2336;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Convert 'thalachh' to binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to boolean
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Convert 'exng' to binary
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    # Standardization for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8714065303978641}
2337;"
    # Copying the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa', 'thalachh'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
2338;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8393853861192572}
2339;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selection of specific columns
    
    # Binarization with mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  # Creating a binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping the original column
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of a column
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding of a categorical column
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding of a numerical column
    
    # Standard Scaling for each column
    df = (df - df.mean()) / df.std()  # Standard scaling of the dataset
    
    return df
";{0: 0.8698597509048328}
2340;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8621292124399537}
2341;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2342;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Convert 'thalachh' to binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to boolean
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Convert 'exng' to binary
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    # Standardization for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8714065303978641}
2343;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2344;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2345;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2346;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8536957304990092}
2350;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2351;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2352;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization for thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for caa column
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for oldpeak column and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2354;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
2355;"
    # Selecting columns 'oldpeak', 'caa', 'cp'
    df = df[['oldpeak', 'caa', 'cp']]
    
    # Binarize 'caa' to indicate presence
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Create new feature for high chest pain type
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2356;"
    df = df[['thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['caa'], drop_first=True)
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.5705215364834457}
2357;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels, include_lowest=True)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
2358;"
    df = df[['thalachh', 'age', 'chol', 'restecg', 'exng']]
    
    df.fillna(df.median(), inplace=True)
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df = pd.get_dummies(df, columns=['restecg'])
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7414034051534053}
2359;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all remaining columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2360;"
    df = df[['cp', 'oldpeak', 'thalachh', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8623574517943025}
2361;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Extracting features from 'thalachh'
    df['thalachh_square'] = df['thalachh'] ** 2
    df['thalachh_log'] = np.log1p(df['thalachh'])
    
    # Normalizing 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Custom feature scaling for 'caa'
    df['caa_scaled'] = (df['caa'] - df['caa'].mean()) / df['caa'].std()
    
    return df
";{0: 0.8032385272152898}
2362;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization with mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2363;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all remaining columns except one-hot encoded ones
    for col in df.columns:
        if 'cp_' not in col and col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8591298356587886}
2364;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2365;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['thalachh_binned'])

    return df
";{0: 0.8646825614998834}
2366;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8536957304990092}
2367;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    # Standard Scaling for each column
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2368;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2369;"
    df = df[['age', 'sex', 'thalachh', 'chol', 'caa']]
    
    # Map binary values
    df['sex'] = 1 - df['sex']
    
    # Normalize 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Binarize 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.7414099379943784}
2370;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8710774863882278}
2371;"
    return df[['cp', 'oldpeak', 'caa']].assign(caa=(df['caa'] > 0).astype(int), oldpeak=np.log1p(df['oldpeak']), cp_high=(df['cp'] == 3).astype(int))
";{0: 0.8671941876391027}
2372;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8020976104515289}
2373;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8699504372078998}
2374;"
    df = df[['thalachh', 'exng', 'oldpeak', 'caa', 'cp']]
    
    # Handling missing values by dropping rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8488691943570906}
2375;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2376;"
  df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

  df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
  df.drop(columns=['thalachh'], inplace=True)

  df['oldpeak'] = np.log1p(df['oldpeak'])

  df = pd.get_dummies(df, columns=['cp'])

  df['caa'] = (df['caa'] > 0).astype(int)

  for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
      df[col] = (df[col] - df[col].mean()) / df[col].std()

  return df
";{0: 0.892156009413472}
2377;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7774721629945511}
2378;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2379;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    # Binarize the 'oldpeak' column based on a threshold
    threshold = 1.2
    df['oldpeak_high'] = (df['oldpeak'] > threshold).astype(int)
    
    return df
";{0: 0.8104204644921404}
2380;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8588919178749688}
2381;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2382;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8623574517943025}
2383;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on thresholds for 'thalachh'
    threshold = df['thalachh'].mean()
    df['thalachh_binary'] = (df['thalachh'] > threshold).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2384;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8536957304990092}
2385;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
2386;"
    df = df[['chol', 'thalachh', 'cp', 'restecg', 'sex']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Standardizing 'chol' and 'thalachh'
    for col in ['chol', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Mapping 'cp' to binary values
    df['cp'] = df['cp'].map({0: 0, 1: 1, 2: 1, 3: 1})
    
    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])
    
    return df
";{0: 0.8058432059450039}
2387;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8569979282473265}
2389;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' into a binary feature
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all remaining columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2390;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8536957304990092}
2391;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8536957304990092}
2392;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2393;"
    df = df[['thalachh', 'exng', 'caa', 'cp', 'oldpeak']]
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalize 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binarize 'caa' based on presence
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize all selected columns
    for col in ['thalachh', 'exng', 'caa', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8661237761863664}
2394;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8536957304990092}
2395;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2396;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
2397;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']] \
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0)) \
        .drop(columns=['thalachh']) \
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak'])) \
        .join(pd.get_dummies(df['cp'], prefix='cp')) \
        .assign(caa=lambda x: (x['caa'] > 0).astype(int)) \
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name and x.name != 'target' else x)
";{0: 0.8580909640601849}
2398;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.8543822553897179}
2399;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2400;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2401;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
2402;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
2403;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2404;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2405;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8714065303978641}
2406;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8714065303978641}
2407;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2408;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Convert 'thalachh' to binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to boolean
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Convert 'exng' to binary
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    # Standardization for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8788662078172189}
2409;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Standard scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8621241908735889}
2410;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8210720999514102}
2411;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    df = df.fillna(df.mean())  # Fill missing values with mean

    # Normalize 'age' and 'chol'
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())

    df = pd.get_dummies(df, columns=['restecg'])  # One-hot encoding for 'restecg'

    df['exng'] = np.where(df['exng'] == 1, 1, 0)  # Binarization for 'exng'

    return df
";{0: 0.7414034051534053}
2412;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8504024049720771}
2413;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    # Binarize thalachh column using median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    
    # Drop original thalachh column
    df.drop(columns=['thalachh'], inplace=True)  
    
    # Log-transform the oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
     # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8393853861192572}
2414;"
    df = df[['thalachh', 'cp', 'age', 'sex', 'exng']]
    
    # Standardizing 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Mapping binary values for 'sex' and 'exng'
    df['sex'] = 1 - df['sex']
    df['exng'] = 1 - df['exng']

    return df
";{0: 0.796006144393241}
2415;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2416;"
	df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
	df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
	df.drop(columns=['thalachh'], inplace=True)
    
	df['oldpeak'] = np.log1p(df['oldpeak'])
    
	df = pd.get_dummies(df, columns=['cp'])
    
	df['caa'] = (df['caa'] > 0).astype(int)
    
	for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
	    df[col] = (df[col] - df[col].mean()) / df[col].std()
    
	return df
";{0: 0.8846618642144086}
2417;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0))\
        .drop(columns=['thalachh'])\
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak']))\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(caa=lambda x: (x['caa'] > 0).astype(int))\
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name and x.name != 'target' else x)
";{0: 0.8655851092592481}
2418;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8162445137445136}
2419;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0))\
        .drop(columns=['thalachh'])\
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak']))\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(caa=lambda x: (x['caa'] > 0).astype(int))\
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name and x.name != 'target' else x)
";{0: 0.8655851092592481}
2420;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2421;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8536957304990092}
2422;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0))\
        .drop(columns=['thalachh'])\
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak']))\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(caa=lambda x: (x['caa'] > 0).astype(int))\
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name and x.name != 'target' else x)
";{0: 0.8580909640601849}
2423;"
    df = df[['age', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Normalizing 'age' and 'oldpeak' columns
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'caa' and 'exng'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7673876047551825}
2425;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0))\
        .drop(columns=['thalachh'])\
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak']))\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(caa=lambda x: (x['caa'] > 0).astype(int))\
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name and x.name != 'target' else x)
";{0: 0.8580909640601849}
2426;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
2427;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Converting 'thalachh' to binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting 'caa' to boolean
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardization for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2428;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2430;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2431;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0))\
        .drop(columns=['thalachh'])\
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak']))\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(collapsed_caa=lambda x: (x['caa'] > 0).astype(int))\
        .drop(columns=['caa'])\
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name else x)
";{0: 0.8580909640601849}
2432;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2433;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
2434;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
2435;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.8617241021690173}
2436;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2437;"
    df = df[['sex', 'thalachh', 'cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'sex'
    df['sex'] = 1 - df['sex']
    
    # Standard Scaling for 'thalachh' and applying sqrt transformation
    df['thalachh'] = (np.sqrt(df['thalachh']) - np.mean(np.sqrt(df['thalachh']))) / np.std(np.sqrt(df['thalachh']))
    
    # One-hot encoding and standard scaling for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    # Log transformation and binary encoding for 'oldpeak' (using mean)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8739429221792377}
2438;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2439;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2440;"
    # Keep columns: cp, thalachh, oldpeak, caa, exng
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Convert thalachh to binary based on its mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa to a binary flag
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Convert exng to binary encoding
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    # Standardize numerical columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8714065303978641}
2441;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True, prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2442;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2443;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    # Rescaling 'age' and 'chol'
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    return df
";{0: 0.7219656878882761}
2444;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8210720999514102}
2445;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2446;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0))\
        .drop(columns=['thalachh'])\
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak']))\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(caa_flag=lambda x: (x['caa'] > 0).astype(int))\
        .drop(columns=['caa'])\
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name else x)
";{0: 0.8655851092592481}
2447;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2448;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' column
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard scaling for selected columns except dummy columns
    for col in ['oldpeak', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8590008084376592}
2449;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2450;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0))\
        .drop(columns=['thalachh'])\
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak']))\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(caa=lambda x: (x['caa'] > 0).astype(int))\
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name and x.name != 'target' else x)
";{0: 0.8580909640601849}
2451;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2452;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
2453;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2454;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2455;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except the target
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2456;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8637799112375383}
2457;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
2458;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8701373906662113}
2459;"
    # Keep columns 'cp', 'thalachh', 'oldpeak', 'caa'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'caa' to binary values
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Bin 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Perform one-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.872859224109224}
2460;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization for thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for caa column
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for oldpeak column and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2461;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2462;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2463;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8841922404865883}
2464;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2465;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2466;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = (df['exng'] == 1).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8710774863882278}
2467;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization with mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2468;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2469;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2470;"
    # Selecting the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Converting 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Scaling the values of each column (excluding the target column if exists)
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8536957304990092}
2471;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2472;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8710774863882278}
2473;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8045019820362285}
2474;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all remaining columns except one-hot encoded ones
    for col in df.columns:
        if 'cp_' not in col and col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8591298356587886}
2475;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2477;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop('thalachh', axis=1, inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8393853861192572}
2478;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2479;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2480;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2481;"
    return df[['cp', 'oldpeak', 'caa']]
";{0: 0.8196997706542248}
2482;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=np.number).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8405690072639225}
2483;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(thalachh_binary=lambda x: np.where(x['thalachh'] > x['thalachh'].mean(), 1, 0))\
        .drop(columns=['thalachh'])\
        .assign(oldpeak=lambda x: np.log1p(x['oldpeak']))\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(caa=lambda x: (x['caa'] > 0).astype(int))\
        .apply(lambda x: (x - x.mean()) / x.std() if 'cp' not in x.name and x.name != 'target' else x)
";{0: 0.8655851092592481}
2484;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature for 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2485;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2487;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.8695040410409263}
2488;"
    # Keeping only the selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2489;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8548621975952484}
2490;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2491;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2492;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2494;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = np.where(df['cp'] == 3, 1, 0)
    df.drop('cp', axis=1, inplace=True)
    
    return df
";{0: 0.7071293272855097}
2495;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8352045951588052}
2496;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2497;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2498;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2499;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' with n>0
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2500;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7881299523891853}
2501;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
2502;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
2503;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2504;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2505;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7881299523891853}
2506;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation for 'oldpeak'
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standard Scaling for selected columns
    
    return df
";{0: 0.8846618642144086}
2507;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2508;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
2509;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: int(x > 0))
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binary', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
2510;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2511;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2512;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned' columns
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
2513;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8416933885786344}
2514;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2515;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2516;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2517;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop('thalachh', axis=1, inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8393853861192572}
2518;"
    df = df[['age', 'thalachh', 'chol', 'exng', 'oldpeak']]

    # Filling missing values with median for 'age' column
    df['age'].fillna(df['age'].median(), inplace=True)

    # Normalizing 'chol' column
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    # Label encoding for 'exng'
    df['exng'] = df['exng'].map({0: 'No', 1: 'Yes'})

    # One-hot encoding for 'exng'
    df = pd.get_dummies(df, columns=['exng'])

    return df
";{0: 0.7052035027377493}
2519;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2521;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
2522;"
    df = df[['sex', 'thalachh', 'restecg']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df = pd.get_dummies(df, columns=['sex', 'restecg'])
    
    return df
";{0: 0.716566429743029}
2523;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2524;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2526;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Creating new feature based on 'cp'
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
2527;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2528;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
2529;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
2530;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2531;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
2534;"
    df = df[['thalachh', 'cp', 'age', 'trtbps', 'sex']]

    # Binning 'trtbps' based on quartiles
    df['trtbps'] = pd.qcut(df['trtbps'], q=4, labels=False, duplicates='drop')

    # Standard Scaling for 'thalachh' and 'age'
    for col in ['thalachh', 'age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # One-hot encoding for 'cp' and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'sex'])

    return df
";{0: 0.8520570614213113}
2535;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877958319003401}
2536;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
2537;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binned_low', 'thalachh_binned_medium', 'thalachh_binned_high']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8832137017211643}
2539;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
2540;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2541;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2542;"
    df = df[['oldpeak', 'thalachh', 'sex', 'cp', 'exng']]
    
    # Binarize 'sex' and 'exng'
    df['sex'] = 1 - df['sex']
    df['exng'] = 1 - df['exng']
    
    # Handling missing values by dropping
    df.dropna(inplace=True)
    
    # Normalizing 'oldpeak' and 'thalachh'
    for col in ['oldpeak', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.8087968282706963}
2544;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
2545;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Log transformation for 'thalachh' and 'oldpeak'
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7341236976274843}
2546;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
2547;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns
    
    return df
";{0: 0.8846618642144086}
2548;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8631857031857031}
2549;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2550;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and all one-hot encoded columns ('cp_0', 'cp_1', 'cp_2', 'cp_3')
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2551;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8623574517943025}
2552;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing each column except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877958319003401}
2553;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'], _ = pd.cut(df['thalachh'], bins=bins, labels=labels, retbins=True)

    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8517593045700458}
2554;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.8594616204690831}
2556;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2557;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2558;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2559;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]

    # Filling missing values with mean for 'age' column
    df['age'].fillna(df['age'].mean(), inplace=True)

    # Min-Max Scaling for 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # One-hot encoding for 'sex', 'cp', and 'exng'
    df = pd.get_dummies(df, columns=['sex', 'cp', 'exng'])

    return df
";{0: 0.7443614852889047}
2560;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8621292124399537}
2561;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) 
    df.drop(columns=['thalachh'], inplace=True) 

    df['oldpeak'] = np.log1p(df['oldpeak']) 

    df = pd.get_dummies(df, columns=['cp']) 

    df['caa'] = (df['caa'] > 0).astype(int) 

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std() 

    return df
";{0: 0.892156009413472}
2563;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.8622151899989685}
2564;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.8846618642144086}
2565;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.854424800110284}
2566;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'thalachh' and 'oldpeak' columns
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'sex'
    df['sex'] = np.where(df['sex'] == 1, 1, 0)
    
    return df
";{0: 0.7506510088272383}
2567;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2568;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2569;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2570;"
    df = df[['age', 'cp', 'chol', 'thalachh', 'exng']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column

    df['chol'].fillna(df['chol'].median(), inplace=True)  # Filling missing values in chol with median

    df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, 100], labels=['Young', 'Adult', 'Senior', 'Old'])  # Binning age column

    df = pd.get_dummies(df, columns=['age', 'cp'])  # One-hot encoding age and cp columns

    for col in ['chol', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())  # Min-Max scaling selected columns

    return df
";{0: 0.6665794657469939}
2572;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]

    df['age'].fillna(df['age'].mean(), inplace=True)

    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    df = pd.get_dummies(df, columns=['sex', 'cp', 'exng'])

    return df
";{0: 0.7459743885147112}
2573;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2574;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2575;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
2576;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp_low'] = (df['cp'] == 0).astype(int)

    return df
";{0: 0.8700347760113274}
2577;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing each column except 'caa' and 'cp'
    for col in df.columns:
        if col not in ['caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8673959646910466}
2578;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  
    
    # New feature combining 'oldpeak' and 'caa'
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.8906911883921994}
2579;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2580;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2581;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation for 'oldpeak'
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standard Scaling for selected columns
    
    return df
";{0: 0.892156009413472}
2582;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2583;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns
    
    return df
";{0: 0.8846618642144086}
2584;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2585;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2586;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.sqrt(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8805379615830435}
2587;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
2589;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'trtbps']]
    
    # Binning oldpeak based on quantiles
    df['oldpeak'] = pd.qcut(df['oldpeak'], q=4, labels=False, duplicates='drop')
    
    # Standard Scaling for thalachh and trtbps
    for col in ['thalachh', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])
    
    # Min-Max scaling for age
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    return df
";{0: 0.8037865767671425}
2590;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8288239538239539}
2591;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2592;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + ['cp_' + str(i) for i in range(4)]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2593;"
    # Selecting required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2594;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2595;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values for 'sex'
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation on 'thalachh'
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8327922077922079}
2597;"
    # Select necessary columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + ['cp_' + str(i) for i in range(4)]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2598;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8846618642144086}
2599;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: int(x > 0))
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2600;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.8906911883921994}
2601;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2602;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
2603;"
    df = df[['thalachh', 'trtbps', 'sex', 'age', 'cp']]
    
    df['sex'] = 1 - df['sex']
    
    df['thalachh'] = np.log(df['thalachh'])
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    
    for col in ['age', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8323216272048308}
2604;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2605;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.887274531024531}
2606;"
    return df[['cp', 'oldpeak', 'caa']].assign(
        cp_normalized=(df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min()),
        oldpeak=np.log1p(df['oldpeak']),
        cp_high=(df['cp'] == 3).astype(int)
    )
";{0: 0.8503018599653629}
2607;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8504024049720771}
2608;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
2609;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2610;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
2611;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8480755937610776}
2612;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.887274531024531}
2613;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.select_dtypes(include=[np.number]).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8666239808578519}
2614;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation for 'oldpeak'
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standard Scaling for selected columns
    
    return df
";{0: 0.892156009413472}
2615;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) 
    df.drop(columns=['thalachh'], inplace=True) 

    df['oldpeak'] = np.log1p(df['oldpeak']) 

    df = pd.get_dummies(df, columns=['cp']) 

    df['caa'] = (df['caa'] > 0).astype(int) 

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std() 

    return df
";{0: 0.8846618642144086}
2616;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'thalachh']]  # Selecting necessary columns

    df.dropna(inplace=True)  # Dropping rows with missing values

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column

    df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, 100], labels=['Young', 'Adult', 'Senior', 'Old'])  # Binning age column
    df = pd.get_dummies(df, columns=['age', 'cp'])  # One-hot encoding age and cp columns

    for col in ['trtbps', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())  # Min-Max scaling selected columns

    return df
";{0: 0.6910730666423668}
2617;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2618;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
2619;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2620;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2621;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2622;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
2623;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
2624;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2625;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # New feature combining 'oldpeak' and 'caa'
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.8906911883921994}
2626;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2627;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
2628;"
    df = df[['cp', 'oldpeak', 'thalachh', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8623574517943025}
2629;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df['thalachh_high'] = np.where(df['thalachh'] > 140, 1, 0)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df.drop(columns=['caa', 'thalachh'], inplace=True)

    return df
";{0: 0.8504476127320956}
2630;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2631;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh', 'exng']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column

    df['chol'].fillna(df['chol'].median(), inplace=True)  # Filling missing values in chol with median

    df['age'] = pd.cut(df['age'], bins=[0, 30, 50, 70, 100], labels=['Young', 'Adult', 'Senior', 'Old'])  # Binning age column

    df = pd.get_dummies(df, columns=['age', 'cp'])  # One-hot encoding age and cp columns

    for col in ['chol', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())  # Min-Max scaling selected columns

    return df
";{0: 0.701655982905983}
2632;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    return df
";{0: 0.8008610161283134}
2633;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
2634;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.sqrt(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8880321067821069}
2635;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.select_dtypes(include=[np.number]).columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8673959646910466}
2636;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.887274531024531}
2637;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2638;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2639;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.select_dtypes(include=[np.number]).columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8748901098901098}
2640;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Standardizing 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7726221290932249}
2641;"
    df = df[['age', 'thalachh', 'chol', 'trtbps', 'exng']]
    
    df.fillna(df.median(), inplace=True)
    
    for col in ['age', 'chol', 'trtbps']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7167531874438022}
2642;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.887274531024531}
2643;"
    # Selecting the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    # Binarize thalachh column based on median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    
    # Drop the original thalachh column
    df.drop(columns=['thalachh'], inplace=True)  
    
    # Log transformation of the oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    # One-hot encode the cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()  

    return df
";{0: 0.8393853861192572}
2644;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.892156009413472}
2646;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.8906911883921994}
2647;"
# Improved version v3

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for relevant columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2648;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8528171372868745}
2649;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing columns
    df = (df - df.min()) / (df.max() - df.min())
    
    return df
";{0: 0.8302054531490015}
2650;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'thalachh' and 'oldpeak' columns
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'sex'
    df['sex'] = np.where(df['sex'] == 1, 1, 0)
    
    return df
";{0: 0.7506510088272383}
2651;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    
    return df
";{0: 0.8545385343525789}
2652;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8701373906662113}
2653;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2654;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2655;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
2656;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column into a binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.8846618642144086}
2657;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + list(df.filter(like='cp').columns):
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2659;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    # Binarize thalachh column based on median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    
    # Drop the original thalachh column
    df.drop(columns=['thalachh'], inplace=True)  
    
    # Log transformation of the oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    # One-hot encode the cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()  

    return df
";{0: 0.8352045951588052}
2661;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8665031075481895}
2663;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + list(df.filter(like='cp').columns):
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2664;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
2665;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa to binary

    for col in df.select_dtypes(include=[np.number]).columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing numeric columns

    return df
";{0: 0.8673959646910466}
2666;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a new feature by binarizing 'thalachh' feature
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Encoding 'caa' as binary feature
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2667;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
2668;"
    # Select and keep only required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2669;"
    return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
";{0: 0.7419847535020508}
2670;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2671;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7774721629945511}
2672;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in df.select_dtypes(include=[np.number]).columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    return df
";{0: 0.8673959646910466}
2673;"
    df = df[['cp', 'thalachh', 'oldpeak']]  
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8145185817007852}
2674;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8846618642144086}
2675;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8846618642144086}
2676;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation for 'oldpeak'
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standard Scaling for selected columns
    
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']  # Combining 'oldpeak' and 'caa' features
    
    return df
";{0: 0.8906911883921994}
2677;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and selected one-hot encoded columns
    for col in ['oldpeak'] + ['cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
2678;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and all one-hot encoded columns ('cp_0', 'cp_1', 'cp_2', 'cp_3')
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2679;"
    return df[['cp', 'oldpeak', 'caa']].assign(
        cp_normalized=(df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min()),
        oldpeak=np.log1p(df['oldpeak']),
        cp_high=(df['cp'] == 3).astype(int)
    )
";{0: 0.8422996371256852}
2681;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2682;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Creating new feature based on 'cp'
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2683;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting necessary columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating thalachh_binary column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation on oldpeak

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
2684;"
# Improved version of select_columns_and_return_dataframe_v2

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to 'oldpeak' column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding 'cp' column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' values to binary

    # Standardizing each column except 'caa' and one-hot encoded 'cp' columns
    for col in df.columns:
        if col not in ['caa'] + [f'cp_{i}' for i in range(4)]:
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8673959646910466}
2685;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  
    
    # New feature combining 'oldpeak' and 'caa'
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    # New feature combining 'thalachh_binary' and 'caa'
    df['thalachh_binary_caa_combined'] = df['thalachh_binary'] + df['caa']
    
    return df
";{0: 0.8880223652798278}
2686;"
    df = df[['age', 'chol', 'thalachh', 'cp', 'exng']]

    # Filling missing values with median
    df.fillna(df.median(), inplace=True)

    # Standardizing 'chol' and 'thalachh'
    for col in ['chol', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7501991633139174}
2687;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) 
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    return df
";{0: 0.8846618642144086}
2688;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['oldpeak_caa_combined'] = df['oldpeak'] + df['caa']
    
    return df
";{0: 0.887274531024531}
2689;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8846618642144086}
2690;"
    df = df[['age', 'cp', 'thalachh', 'caa', 'oldpeak']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['age', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8603787588862215}
2691;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert thalachh to binary feature
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Transform oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa column to binary feature
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the features
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2692;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
2693;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to a binary feature
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Transform 'caa' to binary based on condition
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize all columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
2695;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2696;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8665031075481895}
2697;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2698;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2699;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2700;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
2702;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2703;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] # Selecting specific columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) # Creating a binary feature based on threshold
    df.drop(columns=['thalachh'], inplace=True)  # Dropping the original column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to a column

    df = pd.get_dummies(df, columns=['cp'])  # Performing one-hot encoding

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting a column to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing numerical columns

    return df
";{0: 0.8846618642144086}
2704;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8393853861192572}
2705;"
    # Select the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create a binary feature based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2707;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp', drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8374660842858888}
2708;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2709;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # Add additional data preprocessing or feature engineering steps here

    return df
";{0: 0.8682830585937997}
2710;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the required columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarize thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Drop original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log-transform the oldpeak column

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary

    df = (df - df.mean()) / df.std()  # Standardize the dataset

    return df
";{0: 0.8536957304990092}
2711;"
    df = df[['age', 'cp', 'thalachh', 'caa', 'oldpeak']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['age', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8609848194922822}
2712;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
2713;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2714;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2715;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2716;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating a binary feature 
    df.drop(columns=['thalachh'], inplace=True)  # Dropping the original column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to a column

    df = pd.get_dummies(df, columns=['cp'])  # Performing one-hot encoding

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing numerical columns

    return df
";{0: 0.892156009413472}
2717;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2718;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], dtype=int)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2719;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2720;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Standardizing 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7765868011769651}
2721;"
    return df[['cp', 'oldpeak', 'caa']]  # Returning specific columns
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Creating new feature based on 'cp'
    df['cp_high'] = (df['cp'] == 3).astype(int)
";{0: 0.8277019934939027}
2722;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2723;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2724;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2725;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2726;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8308092635961488}
2727;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2728;"
    # Keeping important features
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8327922077922079}
2729;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7863429682784522}
2730;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2731;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2732;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2733;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2734;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2736;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']  # Columns to standard scale
    
    for col in cols_to_scale:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2738;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2740;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
2741;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2742;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2743;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # Add additional data preprocessing or feature engineering steps here

    return df
";{0: 0.8682830585937997}
2744;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2745;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2746;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating a binary feature based on threshold
    df.drop(columns=['thalachh'], inplace=True)  # Dropping the original column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to a column

    df = pd.get_dummies(df, columns=['cp'])  # Performing one-hot encoding

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting a column to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing numerical columns

    return df
";{0: 0.892156009413472}
2747;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2748;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    # Dropping rows with any missing values
    df.dropna(inplace=True)

    # Standard scaling for 'age', 'chol', and 'thalachh'
    for col in ['age', 'chol', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8236805801725158}
2750;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2751;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2752;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating a binary feature 
    df.drop(columns=['thalachh'], inplace=True)  # Dropping the original column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to a column

    df = pd.get_dummies(df, columns=['cp'])  # Performing one-hot encoding

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing numerical columns

    return df
";{0: 0.8846618642144086}
2753;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8846618642144086}
2754;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2755;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2756;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2757;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2758;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']  # Columns to standard scale
    
    for col in cols_to_scale:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2759;"
    df = df[['age', 'chol', 'thalachh', 'cp', 'exng']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Min-Max scaling for 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Mapping binary values to 0 and 1 for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7865681288632108}
2760;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2761;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
2762;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2763;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)

    return df
";{0: 0.8671941876391027}
2764;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2765;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select specific columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature based on mean
    
    df.drop(columns=['thalachh'], inplace=True)  # Drop original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation
    
    df = pd.get_dummies(df, columns=['cp'])  # Perform one-hot encoding
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Convert column to binary based on condition
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize numerical columns

    return df
";{0: 0.892156009413472}
2766;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2767;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=np.number).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8483489461358313}
2768;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7935283635283635}
2769;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2770;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8709232520578333}
2771;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating a binary feature 
    df.drop(columns=['thalachh'], inplace=True)  # Dropping the original column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to a column

    df = pd.get_dummies(df, columns=['cp'])  # Performing one-hot encoding

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing numerical columns

    return df
";{0: 0.892156009413472}
2772;"
    df = df[['age', 'cp', 'thalachh', 'caa', 'oldpeak']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['age', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8620374510712295}
2773;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
2774;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
2775;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'age']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['age', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8707274379849006}
2776;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
2777;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2778;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2779;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8436401098901098}
2780;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2781;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2782;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
    
    # Replacing binary values for 'exng'
    df['exng'] = df['exng'].replace({0: 'No', 1: 'Yes'})
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels, include_lowest=True)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp', 'caa', 'exng', and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'caa', 'exng', 'thalachh_binned'])

    return df
";{0: 0.7594591146829953}
2783;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2784;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2785;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
2786;"
    return df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
";{0: 0.7884403709471843}
2787;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2788;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8846618642144086}
2789;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    df['caa'] = (df['caa'] > 0).astype(int)  
    df = (df - df.mean()) / df.std()  
    return df
";{0: 0.8352045951588052}
2790;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2791;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2792;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2793;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8846618642144086}
2794;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2795;"
    def preprocess(df):
        df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
        df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
        df.drop(columns=['thalachh'], inplace=True)
        df['oldpeak'] = np.log1p(df['oldpeak'])
        df = pd.get_dummies(df, columns=['cp'])
        df['caa'] = (df['caa'] > 0).astype(int)
        for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
        return df

    return preprocess(df)
";{0: 0.8846618642144086}
2796;"
    df = df[['age', 'thalachh', 'chol', 'sex', 'cp']]

    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    
    # Normalizing 'age', 'thalachh', and 'chol'
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'

    return df
";{0: 0.8273580586080586}
2797;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2798;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
2799;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2801;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    # Scaling 'cp' and 'oldpeak' columns using Min-Max scaler
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.8617017633966786}
2802;"
    df = df[['age', 'sex', 'thalachh', 'oldpeak', 'cp']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.cbrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.7450797153666006}
2803;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8869894432837911}
2804;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
2805;"
    df = df[['age', 'cp', 'thalachh', 'caa', 'oldpeak']]

    # Binarize 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['age', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8603787588862215}
2806;"
    # Selecting specific columns from the dataset
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol', 'fbs', 'restecg', 'thalachh', 'oldpeak', 'slp', 'caa', 'thall', 'exng']]
    
    # Filling missing values if any
    df.fillna(df.mean(), inplace=True)
    
    # One-hot encoding for categorical variables
    df = pd.get_dummies(df, columns=['cp', 'restecg', 'slp', 'thall'])
    
    # Normalizing numerical columns
    for col in ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.814247311827957}
2807;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8567516113212834}
2809;"
    df = df[['thalachh', 'trtbps', 'sex', 'age', 'cp']]
    
    df['sex'] = 1 - df['sex']
    
    df['thalachh'] = np.log(df['thalachh'])
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    
    for col in ['age', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8435770384602421}
2810;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating binary feature based on threshold of 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp' column with drop_first
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Creating binary feature based on presence of 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8416933885786344}
2811;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8698597509048328}
2812;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp_low'] = (df['cp'] == 0).astype(int)

    return df
";{0: 0.8700347760113274}
2813;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8846618642144086}
2814;"
    # Selecting important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary feature based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp' column and dropping the first encoded column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Converting 'caa' to a binary feature
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardizing selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2815;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8785470085470084}
2816;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standardize numerical columns and features
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2817;"
    df = df[['cp', 'oldpeak', 'thalachh', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8623574517943025}
2818;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2820;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2821;"
# Continue from previous code snippet

    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2822;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8846618642144086}
2823;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the required columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Convert 'thalachh' into binary feature
    df.drop(columns=['thalachh'], inplace=True)  # Remove the original 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' into binary feature

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize these columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2824;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8846618642144086}
2825;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
2826;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2827;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standardize numerical columns and features
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2828;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
2829;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2830;"
    # Selecting specific columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary column based on mean threshold
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting 'caa' values to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2831;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Binarizing column 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    # Applying log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Creating binary feature for 'cp' column
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2833;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create a binary feature based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2834;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create a binary feature based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot-encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2835;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
2836;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Normalizing 'age' and 'chol' columns
    df[['age', 'chol']] = (df[['age', 'chol']] - df[['age', 'chol']].min()) / (df[['age', 'chol']].max() - df[['age', 'chol']].min())

    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])

    # Binarization for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7414034051534053}
2837;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'age']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['age', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8661819834394461}
2840;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8887906247980876}
2842;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2843;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2844;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
2845;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8480755937610776}
2846;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)

    return df
";{0: 0.8671941876391027}
2847;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2849;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    df_normalized = (df - df.mean()) / df.std()  # Normalizing all columns
    
    return df_normalized
";{0: 0.8698597509048328}
2850;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Transform 'caa' based on condition
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
2851;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Normalizing 'thalachh' feature
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels, include_lowest=True)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8734001606267119}
2852;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize numerical columns and features
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2853;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2854;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Standardization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8517593045700458}
2855;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2856;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting relevant columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating binary column based on mean value
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding 'cp' column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' to binary values

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2857;"
# Improved version of `select_columns_and_return_dataframe_v2` function
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2858;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2859;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
2860;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.892156009413472}
2861;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8712889440308796}
2862;"
    df = df[['age', 'cp', 'thalachh', 'chol', 'exng']]
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard scaling for 'age', 'thalachh', and 'chol'
    for col in ['age', 'thalachh', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8087966949723739}
2863;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2864;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
2865;"
    return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7462785388127854}
2866;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2867;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2868;"
    df = df[['age', 'cp', 'thalachh', 'caa', 'oldpeak']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['age', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8593756240899832}
2870;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
2871;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
2872;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2873;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2874;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2876;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
2877;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2878;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2879;"
    # Keeping only selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2881;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
2882;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize numerical columns and features
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # Additional preprocessing
    # Uncomment to add more processing
    # df['processed_col'] = some_preprocessing_function(df['desired_col'])

    return df
";{0: 0.8846618642144086}
2883;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.892156009413472}
2884;"
# Continuing from the previous code

    df = df[['thalachh', 'chol', 'exng']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Scaling 'chol' and 'thalachh'
    for col in ['chol', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.7546865299110488}
2885;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2886;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2887;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2888;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
2889;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
2890;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = 1 - df['sex']
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7888259625884252}
2891;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for column 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for column 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for column 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for column 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for columns 'oldpeak', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2892;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting specific columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating a binary feature based on threshold
    df.drop(columns=['thalachh'], inplace=True)  # Dropping the original column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to a column

    df = pd.get_dummies(df, columns=['cp'])  # Performing one-hot encoding

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting a column to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing numerical columns

    return df
";{0: 0.892156009413472}
2893;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak'])
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8591559829059829}
2894;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
2895;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2896;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2897;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2898;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7871904089371793}
2899;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
2900;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
2901;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2902;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2903;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    # Scaling 'trtbps' and 'chol' columns
    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = np.log1p(df['chol'])

    return df
";{0: 0.7351382506536716}
2904;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2905;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create new feature thalachh_binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak feature
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2906;"
    df = df[['sex', 'cp', 'thalachh', 'oldpeak', 'caa']]

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8865352498139384}
2907;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8604972690455372}
2908;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Custom feature engineering
    df['resting_rate'] = df['thalachh'] / (df['oldpeak'] + 1)

    return df
";{0: 0.812724300800264}
2909;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2910;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns 'cp', 'thalachh', 'oldpeak', 'caa'

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating binary feature based on mean of 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Dropping 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding of column 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2912;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2913;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]

    # Scaling 'trtbps' and 'chol' columns
    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = np.log1p(df['chol'])

    return df
";{0: 0.7260425341015828}
2914;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2915;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns 'cp', 'thalachh', 'oldpeak', 'caa'

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating binary feature based on mean of 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Dropping 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding of column 'cp' with drop_first

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' to binary

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2916;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2917;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2918;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    return df
";{0: 0.7987322258361444}
2919;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
2920;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2921;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2922;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8416933885786344}
2923;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.872859224109224}
2924;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2925;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
2926;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2927;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak']) 
    
    df = pd.get_dummies(df, columns=['cp']) 
    
    df['caa'] = (df['caa'] > 0).astype(int) 
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']: 
        df[col] = (df[col] - df[col].mean()) / df[col].std() 
    
    return df
";{0: 0.892156009413472}
2928;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selection of columns 'cp', 'thalachh', 'oldpeak', 'caa'

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creation of binary feature based on mean of 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for column 'cp' with drop_first

    df['caa'] = (df['caa'] > 0).astype(int)  # Conversion of 'caa' to binary

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:  # Standardization of selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2929;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
2930;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2932;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2933;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2934;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selection of columns 'cp', 'thalachh', 'oldpeak', 'caa'

    # Creation of binary feature based on mean of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  # Drop 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of 'oldpeak'

    # One-hot encoding for column 'cp' with drop_first
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)  # Conversion of 'caa' to binary

    # Standardization of selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2935;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
2936;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2937;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2938;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2939;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8543822553897179}
2940;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2941;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binaries based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping unnecessary column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation on 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
2942;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binned_low', 'thalachh_binned_medium', 'thalachh_binned_high']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8784517969592596}
2943;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8308092635961488}
2944;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
2945;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2946;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
2947;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)  # Binaries based on median
    df.drop(columns=['thalachh'], inplace=True)  # Dropping unnecessary column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation on 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for 'cp' with drop_first

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting to binary based on condition

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.8569979282473265}
2948;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
2949;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    # Scaling 'trtbps' and 'chol' columns
    df['trtbps'] = (df['trtbps'] - df['trtbps'].min()) / (df['trtbps'].max() - df['trtbps'].min())
    df['chol'] = np.log1p(df['chol'])
    
    return df
";{0: 0.7245371577574967}
2950;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2951;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Standardizing 'age' and 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8267280670149523}
2952;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2953;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8393853861192572}
2954;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2955;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
2956;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    df['caa'] = (df['caa'] > 0).astype(int)  
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2957;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8569979282473265}
2958;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2960;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2961;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
2962;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
2964;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
2965;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2967;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
2968;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df = df.drop(columns=['thalachh'])  # Drop column after creating thalachh_binary
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
2969;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
2970;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True, prefix='cp')
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    return df
";{0: 0.801136597420844}
2971;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=[""cp""], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int) 
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
2972;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
2973;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    
    return df
";{0: 0.8545385343525789}
2974;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # Add additional preprocessing steps here
    
    return df
";{0: 0.8846618642144086}
2975;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
";{0: 0.7871904089371793}
2976;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2977;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2978;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
2979;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'thalachh' and 'oldpeak' columns
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'sex'
    df['sex'] = np.where(df['sex'] == 1, 1, 0)
    
    return df
";{0: 0.7424265020197918}
2980;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
2981;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2982;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
2983;"
    df = df[['sex', 'cp', 'thalachh', 'exng', 'oldpeak']]
    
    # Binarization for 'thalachh' and 'oldpeak'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak_binary'] = np.where(df['oldpeak'] > df['oldpeak'].mean(), 1, 0)
    df.drop(columns=['thalachh', 'oldpeak'], inplace=True)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization for 'sex' and 'exng'
    for col in ['sex', 'exng']:
        df[col] = np.where(df[col] == 1, 1, 0)

    return df
";{0: 0.817408274785324}
2984;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)  # Binaries based on median
    df.drop(columns=['thalachh'], inplace=True)  # Dropping unnecessary column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation on 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for 'cp' with drop_first

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting to binary based on condition

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.8569979282473265}
2985;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2986;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8846618642144086}
2987;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
2988;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8288239538239539}
2989;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
2990;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]
    
    # Imputing missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Normalizing 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.8703243907248357}
2993;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
2996;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binaries based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping unnecessary column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation on 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    # Add additional preprocessing steps here
    
    return df
";{0: 0.892156009413472}
2998;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
2999;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3001;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7841388296612177}
3002;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.892156009413472}
3003;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3004;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8427922077922079}
3005;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp_low'] = (df['cp'] == 0).astype(int)

    df.drop(columns=['cp'], inplace=True)

    return df
";{0: 0.8660905518824972}
3006;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3007;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7924237376999198}
3008;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7943480356595111}
3009;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Custom feature engineering
    df['resting_rate'] = df['thalachh'] / (df['oldpeak'] + 1)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Normalize 'caa' between [0, 1]
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.8036568603462916}
3010;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    features = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in features:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8020976104515289}
3011;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3012;"
    return df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
";{0: 0.7884403709471843}
3013;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3014;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3015;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.872859224109224}
3016;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3018;"
    df = df[['cp', 'thalachh', 'oldpeak']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.813498980195936}
3019;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
3020;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3021;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binaries based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping unnecessary column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation on 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting to binary based on condition

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']: 
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing selected columns

    return df
";{0: 0.892156009413472}
3022;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3023;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3024;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3025;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except one-hot encoded columns
    numeric_cols = ['oldpeak', 'thalachh_binary', 'caa']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.8591298356587886}
3026;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8528171372868745}
3027;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3028;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3029;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3030;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    features = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in features:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7997707992405296}
3031;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_columns = ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3033;"
    def preprocess(df):
        df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
        df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
        df.drop(columns=['thalachh'], inplace=True)
        df['oldpeak'] = np.log1p(df['oldpeak'])
        df = pd.get_dummies(df, columns=['cp'])
        df['caa'] = (df['caa'] > 0).astype(int)
        for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
        return df

    return preprocess(df)
";{0: 0.8846618642144086}
3034;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
3035;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3036;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.8549292154998792}
3037;"
    df = df[['thalachh', 'age', 'chol', 'restecg', 'exng']]
    
    df.fillna(df.median(), inplace=True)
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df = pd.get_dummies(df, columns=['restecg'])
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7497905019275988}
3040;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3041;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3042;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
    
    # Binarization based on the median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
3043;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8045019820362285}
3044;"
    df = df[['age', 'sex', 'cp', 'exng', 'thalachh']]

    # Removing rows with any missing values
    df.dropna(inplace=True)

    # Standard scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    return df
";{0: 0.8249135508859199}
3045;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3046;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'], drop_first=True)
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.8217253269533581}
3047;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
3048;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3049;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3050;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3051;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3052;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3053;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
3054;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
3055;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3056;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3057;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3058;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Scaling 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8557415405709612}
3059;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3061;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7924237376999198}
3062;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8569979282473265}
3063;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8020976104515289}
3064;"
    df = df[['age', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Normalizing 'age' and 'oldpeak' columns
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'caa' and 'exng'
    df['caa'] = (df['caa'] > 0).astype(int)
    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7586091806409573}
3065;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = 1 - df['sex']
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8285275175644028}
3066;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  
    df = (df - df.mean()) / df.std()  
    return df
";{0: 0.8698597509048328}
3068;"
    df = df[['cp', 'oldpeak', 'thalachh', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8314919354838709}
3069;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # Further preprocessing steps can be added here

    return df
";{0: 0.7997707992405296}
3070;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3071;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3072;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3073;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'thalachh_binary' and col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3074;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
3075;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
3076;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
3077;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8709536569987388}
3078;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3079;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_cols = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3080;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
3081;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Power transformation for 'thalachh'
    df['thalachh_power'] = df['thalachh'] ** 3
    
    # Standardization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # Target encoding for 'cp'
    cp_map = df.groupby('cp')['cp'].mean().to_dict()
    df['cp_encoded'] = df['cp'].map(cp_map)
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['cp', 'caa'], inplace=True)
    
    return df
";{0: 0.7689375614127395}
3082;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3083;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + list(df.filter(like='cp').columns):
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3084;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3085;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3086;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.7975178550521016}
3087;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.8695040410409263}
3088;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3089;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3090;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Standard Scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8236213170004024}
3091;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on threshold
    threshold = df['thalachh'].mean()
    df['thalachh_binary'] = (df['thalachh'] > threshold).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
3092;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3093;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    features = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in features:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7997707992405296}
3095;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3097;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selection of columns 'cp', 'thalachh', 'oldpeak', 'caa'

    # Creation of binary feature based on mean of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  # Drop 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of 'oldpeak'

    # One-hot encoding for column 'cp' with drop_first
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)  # Conversion of 'caa' to binary

    # Standardization of selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3098;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on comparison
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3099;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3100;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
3101;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7421745199458372}
3102;"
    df = df[['oldpeak', 'thalachh', 'cp', 'age', 'trtbps']]
    
    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard Scaling for oldpeak, thalachh, and trtbps
    for col in ['oldpeak', 'thalachh', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Min-Max scaling for age
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    return df
";{0: 0.7987728400631626}
3103;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on comparison
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3104;"
    df = df[['age', 'sex', 'cp', 'fbs', 'thalachh']]
    
    # Normalizing 'age', 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'sex' and 'fbs'
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 0 else 0)
    df['fbs'] = df['fbs'].apply(lambda x: 1 if x == 1 else 0)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8248657796451914}
3105;"
    df = df[['thalachh', 'cp', 'caa']]
    
    # Binarization based on the median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.813652018184323}
3107;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]
    
    df.fillna(df.mean(), inplace=True)
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df = pd.get_dummies(df, columns=['restecg'])
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7522230772845526}
3108;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3109;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3110;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
3111;"
    # Selecting specific columns
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
3112;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3113;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3114;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
3115;"
# Only output code, in a simple and concise way.
# Implement the improved version of the function here
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns, except the one-hot encoded columns
    for col in ['oldpeak', 'caa', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8591298356587886}
3117;"
    df = df[['age', 'cp', 'thalachh', 'exng', 'chol']]

    # Filling missing values with median
    df.fillna(df.median(), inplace=True)

    # Standardizing 'chol' and 'thalachh'
    for col in ['chol', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7541152472300012}
3118;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Square transformation for 'oldpeak'
    df['oldpeak_square'] = df['oldpeak'] ** 2

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Custom feature scaling for 'caa'
    df['caa_scaled'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.7936180066150794}
3119;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3120;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3121;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3122;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3123;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3124;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp', drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8374660842858888}
3125;"
    df = df[['age', 'sex', 'cp', 'exng', 'thalachh']]
    
    # Removing rows with any missing values
    df.dropna(inplace=True)
    
    # Standard scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    return df
";{0: 0.8249135508859199}
3126;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df  
";{0: 0.8792095044118824}
3127;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'caa'])
    
    return df
";{0: 0.7530853656625184}
3129;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
3130;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
3131;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.8594616204690831}
3132;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature from 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Create binary feature from 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize all columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
3133;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh'] = np.log1p(df['thalachh'])

    df['oldpeak'] = np.clip(df['oldpeak'], a_min=0, a_max=4)

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = np.where(df['caa'] > 0, 1, 0)

    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.829066429743029}
3134;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3135;"
    df = df[['age', 'thalachh', 'caa']]
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['caa'] = (df['caa'] > 0).astype(int)
    df['thalachh_log'] = np.log1p(df['thalachh'])

    return df
";{0: 0.7314410256632441}
3136;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Cube root transformation for 'oldpeak'
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7817424297966123}
3137;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3138;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on comparison
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3139;"
    # Selecting specific columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
3140;"
    df = df[['cp', 'thalachh', 'oldpeak', 'age', 'trtbps']]
    
    df = pd.get_dummies(df, columns=['cp'])
    
    # Min-Max scaling for age and Standard Scaling for thalachh, oldpeak, and trtbps
    for col in ['age', 'thalachh', 'oldpeak', 'trtbps']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min()) if col == 'age' else ((df[col] - df[col].mean()) / df[col].std())
    
    return df
";{0: 0.7885805323708549}
3141;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8517593045700458}
3142;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all features
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
3143;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3144;"
    df = df[['sex', 'cp', 'oldpeak', 'caa', 'exng']]
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'sex', 'caa'])
    
    return df
";{0: 0.6993992969396196}
3145;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3146;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3147;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on comparison
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3148;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8739972527472528}
3149;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3150;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Min-Max Scaling for all columns
    for col in ['oldpeak', 'caa', 'thalachh_binary']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8665031075481895}
3151;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
3152;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.8543822553897179}
3153;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8796478801767009}
3154;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3155;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median instead of mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Square root transformation instead of log transformation
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    # One-hot encoding for 'cp' and dropping 'cp_0'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa' handled properly with no changes needed
    
    # Standard Scaling for 'oldpeak', 'cp_1', 'cp_2', 'cp_3' (dropping cp_0)
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8455868124813719}
3156;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3157;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardize 'chol' column
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    return df
";{0: 0.7882775652962711}
3158;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Normalizing age and chol columns
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())

    # One-hot encoding for restecg
    df = pd.get_dummies(df, columns=['restecg'])

    # Binarization for exng
    df['exng'] = df['exng'].apply(lambda x: 1 if x == 1 else 0)

    return df
";{0: 0.7414034051534053}
3159;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
3161;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3162;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8308092635961488}
3163;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3164;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['scaled_sum'] = df[['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].sum(axis=1)
    
    return df
";{0: 0.8772552157626784}
3165;"
    df = df[['thalachh', 'chol', 'oldpeak', 'sex', 'age']]
    
    # Binning 'chol' based on quartiles
    df['chol'] = pd.qcut(df['chol'], q=4, labels=False, duplicates='drop')
    
    # Log transformation for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = np.log1p(df[col])
    
    # One-hot encoding for 'sex'
    df = pd.get_dummies(df, columns=['sex'])
    
    # Standardization for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7750401836969001}
3166;"
    df = df[['thalachh', 'trtbps', 'sex', 'age', 'cp']]
    
    df['sex'] = 1 - df['sex']
    
    df['thalachh'] = np.log(df['thalachh'])
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    
    for col in ['age', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8361906748238784}
3167;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except the binary columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
3168;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on comparison
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3169;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = 1 - df['sex']  # Mapping binary values
    
    df['thalachh'] = np.sqrt(df['thalachh'])  # Applying square root transformation
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for 'cp'
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardizing 'age' and 'chol'
    
    return df
";{0: 0.782046301571476}
3170;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' as binary flag
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3171;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8623574517943025}
3172;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3173;"
  # Retain only selected columns and preprocesses them
  return df[['cp', 'thalachh', 'oldpeak', 'caa']] \
         .assign(thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
                 oldpeak=np.log1p(df['oldpeak']),
                 cp=df['cp'].astype('category'),
                 caa=(df['caa'] > 0).astype(int)) \
         .pipe(pd.get_dummies, columns=['cp']) \
         .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3174;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3176;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
3177;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3178;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3179;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardize 'chol' column
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    # Standardize the selected columns
    for col in ['chol', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7903928482153615}
3180;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8756242010677495}
3181;"
    df = df[['sex', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.7784760134520126}
3182;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median instead of mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
3183;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    
    return df
";{0: 0.8467585954806701}
3185;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3186;"
    return df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
";{0: 0.7884403709471843}
3187;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
3188;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
3189;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3190;"
    df = df[['sex', 'thalachh', 'cp', 'restecg', 'oldpeak']]

    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Drop 'restecg' column
    df.drop(columns=['restecg'], inplace=True)

    # Apply Min-Max scaling to 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())

    return df
";{0: 0.8183634220979931}
3191;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3192;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
3193;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    df.drop(columns=['cp'], inplace=True)

    return df
";{0: 0.7071293272855097}
3194;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardize 'chol' column
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    return df
";{0: 0.7859119738984217}
3195;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels, include_lowest=True)
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['cp', 'caa', 'exng', 'thalachh_binned'])

    return df
";{0: 0.7619449903892099}
3196;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8528171372868745}
3197;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create a binary feature based on the mean of 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on whether it is greater than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3198;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Standardize 'chol' column
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    return df
";{0: 0.7882775652962711}
3199;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8594616204690831}
3200;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardize 'chol' column
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    # Standardize the selected columns
    for col in ['chol', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7859119738984217}
3201;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8493732948162414}
3202;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa' as binary flag
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns using z-score normalization
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3203;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3204;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7924237376999198}
3205;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
3206;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
    
    for col in ['chol', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7838354711661812}
3207;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3208;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median instead of mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Square root transformation instead of log transformation
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    # One-hot encoding for 'cp' and dropping 'cp_0'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa' handled properly with no changes needed
    
    # Standard Scaling for 'oldpeak', 'cp_1', 'cp_2', 'cp_3' (dropping cp_0)
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8455868124813719}
3209;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
3210;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3211;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on comparison
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3212;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.82903981264637}
3213;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all features
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
3214;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp', drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8416966501240694}
3215;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on threshold
    threshold = df['thalachh'].mean()
    df['thalachh_binary'] = (df['thalachh'] > threshold).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
3216;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8785470085470084}
3217;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3218;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Binarizing column 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    # Applying log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Creating binary feature for 'cp' column
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
3219;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on comparison
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3220;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
3221;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for selected columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8796478801767009}
3222;"
    # Selecting important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary feature based on thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Converting caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing numerical columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8701373906662113}
3223;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
3224;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
3225;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df = df.drop(columns=['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3226;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3228;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
3229;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardize 'chol' column
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    return df
";{0: 0.7838354711661812}
3230;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3231;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on comparison
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3232;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'age' and 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.850316433143196}
3233;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
3234;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3235;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8543822553897179}
3237;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8701373906662113}
3238;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3239;"
    return df[['cp', 'oldpeak', 'caa']].assign(cpa=(df['caa'] > 0).astype(int),
                                               oldpeak=np.log1p(df['oldpeak']),
                                               cp_high=(df['cp'] == 3).astype(int))
";{0: 0.8419720372119224}
3240;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Square root transformation for 'oldpeak'
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8687876681835945}
3241;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize the 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize the 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize the selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3242;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3243;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply square root transformation to oldpeak
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8765676070555035}
3244;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binarized feature based on the mean of 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on whether it is greater than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3245;"
    df = df[['age', 'thalachh', 'chol', 'exng', 'oldpeak']]
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Standard scaling for all numeric columns
    for col in ['age', 'thalachh', 'chol', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7482761834853834}
3246;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median instead of mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Square root transformation instead of log transformation for 'oldpeak'
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    # One-hot encoding for 'cp' and dropping 'cp_0'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa' without changes needed
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8497398179458528}
3247;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
    
    return df
";{0: 0.7838354711661812}
3248;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding 'cp' column with drop_first
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7850457288089494}
3249;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = df['oldpeak']**2
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8510141640169975}
3250;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8497398637311975}
3251;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    return df
";{0: 0.8596426521239954}
3252;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.792275311025311}
3253;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8493732948162414}
3254;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3255;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['oldpeak', 'thalachh', 'sex', 'cp', 'exng']]
    
    # Binarize 'sex' and 'exng'
    df['sex'] = 1 - df['sex']
    df['exng'] = 1 - df['exng']
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Normalize 'oldpeak' and 'thalachh'
    for col in ['oldpeak', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.8087968282706963}
3257;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3258;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
3259;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Transform 'caa' based on condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3260;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and dropping the first column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
3261;"
    df = df[['age', 'sex', 'thalachh', 'oldpeak', 'cp']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.cbrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.7450797153666006}
3262;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: int(x > 0))
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3263;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
3264;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3265;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Square root transformation for 'oldpeak' column
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8493732948162414}
3266;"
    df = df[['thalachh', 'oldpeak', 'chol', 'exng', 'age']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)

    # Normalizing 'thalachh' and 'chol' columns
    for col in ['thalachh', 'chol', 'age']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.7311470626062626}
3268;"
    return df[['cp', 'oldpeak', 'thalachh', 'caa']]
";{0: 0.7889108390447062}
3269;"
    df = df[['sex', 'cp', 'thalachh', 'chol', 'exng']]

    df = pd.get_dummies(df, columns=['cp'])

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    for col in ['chol', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7859119738984217}
3270;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
3271;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.8362103174603174}
3272;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all features
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
3273;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected columns
    for col in df.columns[:-1]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8663298814118485}
3274;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
3275;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
3276;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']] \
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        ) \
        .pipe(pd.get_dummies, columns=['cp']) \
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3277;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3278;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8665031075481895}
3279;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Cube root transformation for 'oldpeak' column
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8606439693193181}
3282;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    # Feature scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.8499233361727343}
3283;"
    # Select relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3284;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
3285;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.82903981264637}
3286;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3287;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3288;"
    df = df[['sex', 'cp', 'trtbps', 'chol', 'fbs']]

    # Creating new feature with conditional values
    df['isNewFeature'] = np.where((df['trtbps'] < 120) & (df['chol'] < 200), 1, 0)

    return df
";{0: 0.6783840815266}
3289;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded 'cp' columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3290;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.8571300563236047}
3291;"
    # Keep only selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Normalize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3293;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Normalize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3294;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3295;"
    df = df[['age', 'sex', 'cp', 'fbs', 'thalachh']]

    # Normalizing 'age', 'thalachh' columns
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Binarization for 'sex' and 'fbs'
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 0 else 0)
    df['fbs'] = df['fbs'].apply(lambda x: 1 if x == 1 else 0)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.8248657796451914}
3296;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
3297;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3298;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3299;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3300;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Normalize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3301;"
    # Selecting necessary columns and assigning them some preprocessing steps
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        # Binary encoding for 'thalachh'
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        # Log transformation for 'oldpeak'
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        # Binary encoding for 'caa'
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std()) # Standard scaling for selected columns
";{0: 0.8524893162393162}
3302;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
3303;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
3304;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Normalize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3305;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + list(df.filter(like='cp').columns):
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3306;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3307;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding of 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3308;"
    return df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
";{0: 0.7900495663494831}
3309;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
3310;"
    df = df[['cp', 'oldpeak', 'thalachh', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8562205008106647}
3311;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8493315812581805}
3312;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3313;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Binarization for 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    # Log transformation for 'oldpeak'
    df['oldpeak_log'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.8163819531876968}
3314;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'caa', 'thalachh_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in cols_to_scale:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
3315;"
    df = df[['sex', 'cp', 'thalachh', 'oldpeak', 'chol']]
    
    df['sex'] = 1 - df['sex']
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    for col in ['chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8170307312437626}
3316;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3317;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8446636179350353}
3319;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3320;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3321;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3322;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3323;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = df['oldpeak']**2
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8429265119810377}
3324;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    cols_to_scale = ['cp_1', 'cp_2', 'cp_3', 'oldpeak', 'thalachh_binary']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.871867941304792}
3325;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
3326;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8393853861192572}
3327;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a new feature based on 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7881299523891853}
3328;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding of 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3329;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3330;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = df.apply(lambda x: (x - x.mean()) / x.std())

    return df
";{0: 0.877353896103896}
3331;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
3332;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    for col in ['oldpeak', 'caa'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3333;"
    df = df[['oldpeak', 'thalachh', 'cp', 'age', 'trtbps']]
    
    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard Scaling for oldpeak, thalachh, and trtbps
    for col in ['oldpeak', 'thalachh', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Min-Max scaling for age
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    return df
";{0: 0.797112278402601}
3334;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3335;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8446636179350353}
3336;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded 'cp' columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3337;"
    df = df[['sex', 'thalachh', 'exng']]

    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Mapping binary values for 'sex' and 'exng'
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    df['exng'] = df['exng'].map({1: 0, 0: 1})

    return df
";{0: 0.7571615319389485}
3338;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3339;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding of 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3340;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3341;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
3342;"
# Improved version of `select_columns_and_return_dataframe_v2`.

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8267130014353704}
3343;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    # Rescaling 'age' and 'chol'
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    return df
";{0: 0.7206753653076309}
3344;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Standardize 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarize 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8493315812581805}
3345;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
3346;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding of 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3347;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3348;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.781625168459032}
3349;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8446636179350353}
3350;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing the 'thalachh' feature
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns (z-score normalization)
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877353896103896}
3351;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3353;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standard Scaling
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3354;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3355;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=[50, 110, 140, 200], labels=['low', 'medium', 'high'])
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.8543822553897179}
3356;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature for 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard scaling
    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

    return df
";{0: 0.892156009413472}
3357;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'cp' and col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8561343245348043}
3358;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Standardizing 'age' and 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8267280670149523}
3359;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    # Filling NA values with median
    df.fillna(df.median(), inplace=True)
    
    return df
";{0: 0.7817424297966123}
3360;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
3361;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3362;"
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = np.sqrt(df['exng'])
    
    return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa', 'exng']]
";{0: 0.8655316905316905}
3363;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8446636179350353}
3364;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3365;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)

    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8231256986899178}
3366;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded 'cp'
    for col in df.columns:
        if col.startswith('cp_') or col == 'oldpeak':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
3367;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_columns = ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8493315812581805}
3368;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8559258964987553}
3369;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3370;"
    df = df[['cp', 'oldpeak', 'caa']]

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['cp_high'] = (df['cp'] == 3).astype(int)

    return df
";{0: 0.8671941876391027}
3372;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3373;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.872859224109224}
3374;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8812964795990244}
3376;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3377;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the relevant columns

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  # Drop the original column

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Normalize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3378;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: int(x > 0))
    
    # Standard Scaling for all features
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
3380;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3381;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop unnecessary column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation for 'oldpeak'
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Encode 'caa' as binary
    
    df = (df - df.mean()) / df.std()  # Standard scaling for all columns
    
    return df
";{0: 0.8536957304990092}
3382;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3383;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8577649769585254}
3384;"
    return df[['cp', 'oldpeak', 'caa']].assign(
        cp_normalized=(df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min()),
        oldpeak=np.log1p(df['oldpeak']),
        cp_high=(df['cp'] == 3).astype(int)
    )
";{0: 0.8422996371256852}
3385;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8446636179350353}
3386;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a new feature by binarizing 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Encoding 'caa' as binary feature
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
3387;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3388;"
    df = df[['age', 'cp', 'thalachh', 'chol', 'fbs']]
    
    df['fbs'] = df['fbs'].astype(str)
    
    df = pd.get_dummies(df, columns=['cp', 'fbs'])
    
    for col in ['age', 'thalachh', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.823765612802498}
3389;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3390;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3391;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3392;"
    df = df[['thalachh', 'oldpeak', 'exng', 'age', 'chol']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['exng'] = (df['exng'] > 0).astype(int)
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.7641965877259994}
3393;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating binary column based on thalachh mean
    df.drop(columns=['thalachh'], inplace=True)  # Dropping thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation to oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting caa column to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Normalizing selected columns

    return df
";{0: 0.892156009413472}
3394;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_columns = ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8493315812581805}
3395;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
3396;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3397;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_columns = ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8446636179350353}
3398;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded 'cp'
    for col in df.columns:
        if col.startswith('cp_') or col == 'oldpeak':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3399;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded 'cp'
    for col in df.columns:
        if col.startswith('cp_') or col == 'oldpeak':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
3400;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3402;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3404;"
    df = df[['age', 'thalachh', 'caa']]
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['caa'] = (df['caa'] > 0).astype(int)
    df['thalachh_log'] = np.log1p(df['thalachh'])

    return df
";{0: 0.7318932585631875}
3406;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3407;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8570197013043233}
3408;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Creating new feature based on 'cp'
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
3409;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
3410;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3411;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0) 
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3412;"
    # Keep only relevant columns
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    # Handling missing values by dropping rows with NaN
    df.dropna(inplace=True)

    # Normalize 'age', 'chol', and 'thalachh' columns
    for col in ['age', 'chol', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.7963293650793651}
3413;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3414;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Transform 'caa' based on condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3415;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating binary feature based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded 'cp'
    for col in df.columns:
        if col.startswith('cp_') or col == 'oldpeak':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3416;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'chol']]
    
    # Removing any rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing 'thalachh' and 'chol' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.739324767110263}
3417;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded 'cp' columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3418;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = df['oldpeak']**2
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8434872822965674}
3419;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8446636179350353}
3421;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.86025085266474}
3422;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']] \
        .assign(thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
                oldpeak=np.log1p(df['oldpeak']),
                cp=df['cp'].astype('category'),
                caa=(df['caa'] > 0).astype(int)) \
        .pipe(pd.get_dummies, columns=['cp']) \
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8591559829059829}
3423;"
    # Select columns of interest
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    # Create binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  # Drop thalachh column

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])  

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)  

    # Normalize selected columns
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.8621292124399537}
3424;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8446636179350353}
3425;"
    df = df[['cp', 'oldpeak', 'caa']]

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['cp_high'] = (df['cp'] == 3).astype(int)

    return df
";{0: 0.8671941876391027}
3426;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Normalize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3427;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3428;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8670305136816892}
3429;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3430;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' column to binary
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Logarithmically transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns except for one-hot encoded columns
    for col in ['thalachh_binary', 'oldpeak', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8591298356587886}
3431;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    numeric_cols = ['oldpeak', 'thalachh_binary', 'caa']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.8591298356587886}
3433;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3435;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3436;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    return df
";{0: 0.8680973193473193}
3437;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns='thalachh', inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], dtype=int)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3438;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3439;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    # Filling missing values with median
    df.fillna(df.median(), inplace=True)

    # Normalizing 'thalachh' and 'oldpeak' columns
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # Binarization for 'sex'
    df['sex'] = np.where(df['sex'] == 1, 1, 0)
    
    return df
";{0: 0.7492061630367409}
3441;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8567516113212834}
3442;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.sqrt(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], drop_first=True).apply(
        lambda x: (x - x.mean()) / x.std()
    )
";{0: 0.8458226495726494}
3443;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3444;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.871867941304792}
3445;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3446;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
3447;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.86025085266474}
3448;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3449;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3450;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
3451;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8570197013043233}
3452;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['caa'] = (df['caa'] > 0).astype(int)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
3453;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3455;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.8543822553897179}
3456;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Normalize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3457;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8628224482228932}
3458;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3460;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3461;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak']]

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7962086926073446}
3462;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3463;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3466;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8493315812581805}
3467;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8623574517943025}
3468;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3469;"
    # Selecting the desired columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Creating a binary feature based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3470;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3471;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col.startswith('cp_') or col == 'oldpeak':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3472;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3473;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3474;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7889108390447062}
3475;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8514663612116591}
3476;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3477;"
    df = df[['age', 'thalachh', 'chol', 'sex', 'cp']]
    
    df.fillna(df.mean(), inplace=True)  # Fill missing values with mean
    
    # Normalizing 'age', 'thalachh', and 'chol'
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    # Apply log transformation to 'age'
    df['age'] = np.log1p(df['age'])

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'

    return df
";{0: 0.8346453546453546}
3478;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3479;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Data imputation using median
    df.fillna(df.median(), inplace=True)
    
    # Min-max scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Encoding 'sex' as binary
    df['sex'] = np.where(df['sex'] == 1, 1, 0)
    
    return df
";{0: 0.7348814480580473}
3480;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3481;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
";{0: 0.7913434144016601}
3482;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
3483;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
3484;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol', 'fbs', 'restecg', 'thalachh', 'oldpeak', 'caa']]
    
    # Filling missing values if any
    df.fillna(df.mean(), inplace=True)
    
    # One-hot encoding for categorical variables
    df = pd.get_dummies(df, columns=['cp', 'restecg', 'caa'])
    
    # Normalizing numerical columns
    for col in ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7402356698197107}
3486;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding of 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
3487;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Standardizing 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.768653875124971}
3488;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3489;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    df.dropna(inplace=True)
    
    return df
";{0: 0.8467585954806701}
3490;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3491;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp', 'exng']]
    
    # Handling missing values by dropping rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8448013977469211}
3492;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)

    return df
";{0: 0.8671941876391027}
3493;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8508658416111142}
3494;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3495;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
3496;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
3497;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3498;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3499;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3500;"
    # Selecting the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Creating binary feature based on median of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Encoding 'caa' as binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing the data
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8528171372868745}
3501;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3503;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3504;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'trtbps']]
    
    df['oldpeak'] = pd.qcut(df['oldpeak'], q=4, labels=False, duplicates='drop')
    
    for col in ['thalachh', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    return df
";{0: 0.8118510928961749}
3505;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp_typical'] = (df['cp'] == 0).astype(int)
    
    return df
";{0: 0.8622548371394185}
3506;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8698597509048328}
3507;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3508;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]

    # Inverting the 'sex' column
    df['sex'] = 1 - df['sex']

    # Standardizing 'thalachh' column using square root
    df['thalachh'] = np.sqrt(df['thalachh'])

    # Performing one-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Standardizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8366383616383617}
3509;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3510;"
    df = df[['age', 'thalachh', 'chol', 'exng', 'oldpeak']]
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Standard scaling for all numeric columns
    for col in ['age', 'thalachh', 'chol', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7437953091684435}
3511;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3512;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3513;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp', drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8397611662531018}
3517;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3518;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on thresholds for 'thalachh'
    threshold = df['thalachh'].mean()
    df['thalachh_binary'] = (df['thalachh'] > threshold).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
3520;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7841388296612177}
3521;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8404953481209431}
3522;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select only four columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary column based on mean of 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop 'thalachh' column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transform 'oldpeak' column
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp' column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' column to binary
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize selected columns
    
    return df
";{0: 0.8846618642144086}
3523;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .drop(columns=['cp'])\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
3524;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3525;"
    df = df[['thalachh', 'chol', 'oldpeak', 'caa', 'slp']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Log transformation for 'chol'
    df['chol'] = np.log1p(df['chol'])
    
    # Standard scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7532481554229307}
3526;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3527;"
    return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
";{0: 0.7462785388127854}
3528;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Map 'thalachh' to binary values
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
3529;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8506397251611425}
3530;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])
    
    # Binarization for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7456657002353724}
3531;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3532;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3533;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected features
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7941524704367169}
3534;"
    df = df[['age', 'thalachh', 'chol', 'sex', 'cp']]
    
    df.fillna(df.mean(), inplace=True)
    
    df['age'] = np.log1p(df['age'])  # Apply log transformation to 'age'
    
    # Min-max scaling for 'thalachh' and 'chol'
    for col in ['thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df = pd.get_dummies(df, columns=['sex', 'cp'])  # One-hot encoding for 'sex' and 'cp'

    return df
";{0: 0.8229166666666667}
3535;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3537;"
    df = df[['thalachh', 'chol', 'cp', 'age', 'sex']]
    
    # Binning 'chol' based on quartiles
    df['chol'] = pd.qcut(df['chol'], q=4, labels=False, duplicates='drop')
    
    # Log transformation for 'thalachh'
    df['thalachh'] = np.log1p(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Min-Max scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8311811685582178}
3538;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3541;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3542;"
    # Keep only the selected important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3543;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3544;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    df.dropna(inplace=True)

    return df
";{0: 0.8545385343525789}
3545;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3546;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select only four columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary column based on mean of 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop 'thalachh' column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transform 'oldpeak' column
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp' column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' column to binary
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize selected columns
    
    return df
";{0: 0.8846618642144086}
3549;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8480755937610776}
3550;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.892156009413472}
3551;"
    df = df[['age', 'sex', 'thalachh', 'chol', 'cp']]
    
    # Log transformation for 'chol'
    df['chol'] = np.log1p(df['chol'])
    
    # Standardization for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8295312034298552}
3552;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    cols_to_normalize = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in cols_to_normalize:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3553;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
3554;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df[['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']].std()

    return df
";{0: 0.8846618642144086}
3555;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.782529634258919}
3556;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3558;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3559;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3560;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'chol']]
    df.dropna(inplace=True)
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    df = pd.get_dummies(df, columns=['cp'])
    return df
";{0: 0.7458821441594434}
3561;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.892156009413472}
3562;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.8656202217548031}
3563;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + list(df.filter(like='cp').columns):
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3564;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8588919178749688}
3566;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8517593045700458}
3567;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
3568;"
    df = df[['sex', 'oldpeak', 'cp', 'thalachh', 'chol']]

    # Binarize 'oldpeak' column based on median
    df['oldpeak_binary'] = np.where(df['oldpeak'] > df['oldpeak'].median(), 1, 0)
    df.drop(columns=['oldpeak'], inplace=True)

    # Applying min-max scaling to 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Standardizing 'chol' column
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    return df
";{0: 0.8432416109802414}
3569;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['resting_rate'] = df['thalachh'] / (df['oldpeak'] + 1)
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.7932512934559155}
3570;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3571;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select only the relevant columns
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  # Create binary column based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh' column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log-transform 'oldpeak' column
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode 'cp' column with drop first
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary
    
    cols_to_standardize = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']  # Columns to standardize
    for col in cols_to_standardize:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize the selected columns
    
    return df
";{0: 0.8682830585937997}
3572;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3573;"
    # Selecting important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.892156009413472}
3574;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3575;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3576;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: int(x > 0))
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3577;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected features
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.796405414625145}
3578;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8623574517943025}
3580;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8622548371394185}
3581;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
3582;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8366383616383617}
3584;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.892156009413472}
3585;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Adding a new feature representing the interaction between 'age' and 'chol'
    df['age_chol_interaction'] = df['age'] * df['chol']
    
    return df
";{0: 0.8394161394161394}
3586;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
3587;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3589;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df = pd.get_dummies(df, columns=['thalachh_binned'], drop_first=True)
    
    return df
";{0: 0.792275311025311}
3590;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3591;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8671941876391027}
3592;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3593;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8452244604483411}
3594;"
    return df[['cp', 'thalachh', 'slp', 'exng', 'oldpeak']].assign(cp=(df['cp'] == 3).astype(int),
                                                                  thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
                                                                  slp=(df['slp'] > 1).astype(int),
                                                                  exng=(df['exng'] == 1).astype(int),
                                                                  oldpeak=np.log1p(df['oldpeak']))
";{0: 0.7817997605900832}
3595;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].apply(lambda x: (x - df['cp'].mean()) / df['cp'].std()),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7971028972322076}
3596;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3598;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3599;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select relevant columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary column based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log-transform 'oldpeak'
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize selected columns

    return df
";{0: 0.8846618642144086}
3600;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3601;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']] \
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
         ) \
        .pipe(pd.get_dummies, columns=['cp']) \
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
3602;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()

    return df
";{0: 0.8846618642144086}
3603;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3604;"
    df = df[['age', 'thalachh', 'chol', 'sex', 'cp']]
    
    df.fillna(df.mean(), inplace=True)
    
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    df['age'] = np.log1p(df['age'])
    
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.833319597069597}
3605;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa_binary'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.7660717563479384}
3606;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8567516113212834}
3607;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3608;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8553076884842877}
3609;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    cols_to_normalize = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in cols_to_normalize:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3610;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
3611;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3613;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3614;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
3615;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3616;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3617;"
    # Keep only selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create a binary feature based on a condition
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    # Remove the original column
    df.drop(columns=['thalachh'], inplace=True)
    
    # Perform logarithmic transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode categorical column and drop the first category
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Convert a feature to binary based on a condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the numerical features
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
3618;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select required columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for 'cp'
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    for col in df.columns:  # Standard Scaling for all columns except 'caa'
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
";{0: 0.7871904089371793}
3619;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp', drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8374660842858888}
3620;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3621;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3623;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8275921223144913}
3624;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8508658416111142}
3625;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select required columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']  # Columns for standard scaling
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()  # Standard Scaling
    
    return df
";{0: 0.892156009413472}
3626;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
3627;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
3628;"
    df = df[['oldpeak', 'thalachh', 'cp', 'caa', 'age']]
    
    # Binarization based on median for 'oldpeak' column
    df['oldpeak_binary'] = np.where(df['oldpeak'] > df['oldpeak'].median(), 1, 0)
    df.drop(columns=['oldpeak'], inplace=True)
    
    # Min-Max scaling for 'thalachh' and 'age' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8756059969174723}
3629;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3630;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    df['cp_1'] = (df['cp_1'] - df['cp_1'].mean()) / df['cp_1'].std()
    df['cp_2'] = (df['cp_2'] - df['cp_2'].mean()) / df['cp_2'].std()
    df['cp_3'] = (df['cp_3'] - df['cp_3'].mean()) / df['cp_3'].std()
    df['caa'] = (df['caa'] - df['caa'].mean()) / df['caa'].std()
    
    return df
";{0: 0.8621292124399537}
3631;"
    df = df[['thalachh', 'oldpeak', 'cp', 'sex', 'exng']]
    
    # Min-Max scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp' and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'sex'])
    
    return df
";{0: 0.8068693568350283}
3632;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select required columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation
    
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']  # Columns to standard scale
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()  # Standard scaling
    
    return df
";{0: 0.8846618642144086}
3633;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7924237376999198}
3634;"
    df = df[['age', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'age' and 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.7411680270121843}
3635;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8352045951588052}
3636;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3637;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3638;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
3639;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])**2
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8368417684590916}
3640;"
    df = df[['age', 'chol', 'thalachh', 'cp', 'exng']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Min-Max scaling for 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Mapping binary values to 0 and 1 for 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7843971654982176}
3641;"
    df = df[['age', 'sex', 'cp', 'restecg', 'thalachh']]

    # Dropping rows with NA values
    df.dropna(inplace=True)

    # Standard Scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # One-hot encode 'cp' and 'restecg' columns
    df = pd.get_dummies(df, columns=['cp', 'restecg'], prefix=['cp', 'restecg'])

    return df
";{0: 0.8225290932112719}
3642;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3643;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
3644;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
3645;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'cp' based on presence of chest pain
    df['cp_binary'] = np.where(df['cp'] > 0, 1, 0)
    df.drop(columns=['cp'], inplace=True)

    # Binarization for 'caa' based on presence of major vessels
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.7978505543678518}
3646;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Age normalization
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    
    # One-hot encoding for 'sex' and 'cp'
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.771908633684357}
3647;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3648;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8739972527472528}
3649;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  
    
    df['caa'] = (df['caa'] > 0).astype(int) 
    
    cols_to_standardize = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']  
    for col in cols_to_standardize:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  
        
    return df
";{0: 0.8682830585937997}
3650;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select required columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    cols_to_scale = ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']  # Columns to standard scale
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()  # Standard scaling
    
    return df
";{0: 0.8621292124399537}
3651;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select required columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop original column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for 'cp'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'
    
    cols_to_scale = ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']  # Columns to standard scale
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()  # Standard scaling
    
    return df
";{0: 0.8621292124399537}
3652;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3653;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select required columns

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop the original 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'

    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']  # Columns to standard scale
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()  # Standard scaling

    return df
";{0: 0.8846618642144086}
3654;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3655;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.892156009413472}
3656;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select required columns

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  # Binarization based on mean
    df.drop(columns=['thalachh'], inplace=True)  # Drop the original 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Binary encoding for 'caa'

    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']  # Columns to standard scale
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()  # Standard scaling

    return df
";{0: 0.8846618642144086}
3657;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]

    # Inverting the 'sex' column
    df['sex'] = 1 - df['sex']

    # Standardizing 'thalachh' column using square root
    df['thalachh'] = np.sqrt(df['thalachh'])

    # Performing one-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Standardizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8390422077922078}
3659;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for remaining columns
    cols_to_scale = ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()

    return df
";{0: 0.8621292124399537}
3660;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Standard scaling for 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7683622943695185}
3661;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3662;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'chol']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing 'thalachh' and 'chol' columns
    for col in ['thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.739324767110263}
3663;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 0 if x == 0 else 1)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3664;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    columns_to_standardize = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in columns_to_standardize:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  

    return df
";{0: 0.892156009413472}
3665;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8528171372868745}
3666;"
    # Selecting the relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Creating a binary feature based on the mean value of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting 'caa' to binary form
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3667;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3668;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8846618642144086}
3669;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8621292124399537}
3670;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3671;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3672;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3673;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3674;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.8621292124399537}
3675;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_normalize = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in cols_to_normalize:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
3676;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3677;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8548621975952484}
3678;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3679;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3680;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3681;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8658232045732046}
3682;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3684;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3685;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3687;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
3688;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['thalachh_binned'])

    return df
";{0: 0.8571884163008201}
3689;"
    df = df[['age', 'cp', 'thalachh', 'chol']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8230253353204173}
3690;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
3691;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3692;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns of 'cp'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3693;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3694;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3695;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in ['caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8784478021978022}
3696;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
3697;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].apply(lambda x: (x - df['cp'].mean()) / df['cp'].std()),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7971028972322076}
3698;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol', 'fbs', 'restecg', 'thalachh', 'oldpeak', 'caa']]
    
    # Filling missing values if any
    df.fillna(df.mean(), inplace=True)
    
    # One-hot encoding for categorical variables
    df = pd.get_dummies(df, columns=['cp', 'restecg', 'caa'])
    
    # Normalizing numerical columns
    for col in ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7498847926267281}
3700;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3701;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col not in ['caa', 'thalachh']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3702;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns of 'cp'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3703;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()  
    df['caa'] = (df['caa'] > 0).astype(int)  
    return df
";{0: 0.8447919293820932}
3704;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3706;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3707;"
    return df[['age', 'sex', 'cp', 'thalachh', 'exng']]  # Returning new set of columns

    # Normalizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.7534751593965027}
3708;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3709;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Normalizing 'thalachh' and 'oldpeak' columns
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7484407700919455}
3710;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
         .assign(thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
                 oldpeak=np.log1p(df['oldpeak']),
                 cp=df['cp'].astype('category'),
                 caa=(df['caa'] > 0).astype(int))\
         .pipe(pd.get_dummies, columns=['cp'])\
         .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3711;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3712;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.8617241021690173}
3713;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()  
    df['caa'] = (df['caa'] > 0).astype(int)  
    return df
";{0: 0.8522860745811565}
3714;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns of 'cp'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3715;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in ['caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8784478021978022}
3718;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'trtbps']]
    
    # Standard Scaling for thalachh and trtbps
    for col in ['thalachh', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])
    
    # Min-Max scaling for age
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    return df
";{0: 0.8012728400631627}
3719;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3720;"
    return df[['age', 'sex', 'thalachh', 'caa', 'exng']]
";{0: 0.7557320907253537}
3721;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3722;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3723;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3724;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3725;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8869894432837911}
3726;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in ['caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8709536569987388}
3727;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    df.dropna(inplace=True)

    return df
";{0: 0.8545385343525789}
3728;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3731;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3732;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3733;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
3734;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3735;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'chol']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing 'thalachh' and 'chol' columns
    for col in ['thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.739324767110263}
3736;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Normalizing 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7629156327543425}
3737;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8565190365190365}
3738;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=pd.Categorical(df['cp'], categories=df['cp'].unique(), ordered=True),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
3740;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8812964795990244}
3741;"
    return pd.get_dummies(df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        caa=(df['caa'] > 0).astype(int)
    ), columns=['cp'], drop_first=True)
";{0: 0.7736878814298169}
3742;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in ['caa']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8846618642144086}
3743;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
3744;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3745;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8285275175644028}
3746;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp', drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.844023461335069}
3747;"
    df = df[['cp', 'oldpeak', 'caa', 'thalachh']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
3749;"
    # Only keep the most important columns
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns of 'cp'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df

";{0: 0.8846618642144086}
3750;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
3751;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Standardizing 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7750030814741773}
3752;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3753;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3754;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3755;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    return df
";{0: 0.8680973193473193}
3756;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
3757;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3758;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3759;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3760;"
    df = df[['cp', 'oldpeak', 'caa']]    
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
3761;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3762;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3763;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        ).pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
3764;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
3765;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3766;"
    # Selecting important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for caa
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for oldpeak and one-hot encoded columns
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3767;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3768;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3769;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in ['caa']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    for col in ['oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8708321118771938}
3770;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.781625168459032}
3771;"
    df = df[['thalachh', 'cp', 'caa', 'oldpeak']]
    
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation on 'thalachh' and 'oldpeak'
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binarize 'cp' based on specific values
    df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)

    return df
";{0: 0.8033795204002766}
3773;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()  
    df['caa'] = (df['caa'] > 0).astype(int)  
    return df
";{0: 0.8522860745811565}
3774;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]

    # Binarization based on mean
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns of 'cp'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3775;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8887906247980876}
3776;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3777;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3778;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]  # Select the desired columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Convert thalachh to binary
    
    df.drop(columns=['thalachh'], inplace=True)  # Remove thalachh column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to oldpeak
    
    df = pd.get_dummies(df, columns=['cp'])  # Perform one-hot-encoding on cp column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3779;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3780;"
    df = df[['thalachh', 'cp', 'age', 'trtbps', 'sex']]

    # Binning 'trtbps' feature based on quartiles
    df['trtbps'] = pd.qcut(df['trtbps'], q=4, labels=False, duplicates='drop')

    # Normalizing 'thalachh' and 'age' columns
    for col in ['thalachh', 'age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # One-hot encoding for 'cp' and 'sex' columns
    df = pd.get_dummies(df, columns=['cp', 'sex'])

    return df
";{0: 0.8520570614213113}
3781;"
    df = df[['thalachh', 'exng', 'caa', 'cp', 'oldpeak']]
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalize 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binarize 'caa' based on presence
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize all selected columns
    for col in ['thalachh', 'exng', 'caa', 'oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8661237761863664}
3783;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8591559829059829}
3784;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True, prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
3785;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col not in ['caa', 'thalachh']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3786;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
3787;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3788;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
3789;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df = df.drop(columns=['thalachh'])

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3791;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)

    df['caa'] = df['caa'].apply(lambda x: int(x > 0))

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binary', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8602250455940996}
3793;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3794;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3795;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for caa
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for oldpeak and one-hot encoded columns
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3796;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7971028972322076}
3797;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3798;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8887906247980876}
3799;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.850840570719603}
3800;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8501942342721029}
3801;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3802;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in ['caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8439841920374708}
3803;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3804;"
    df = df[['sex', 'oldpeak', 'cp', 'thalachh', 'chol']]

    df['oldpeak_binary'] = np.where(df['oldpeak'] > df['oldpeak'].median(), 1, 0)
    df.drop(columns=['oldpeak'], inplace=True)

    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    return df
";{0: 0.8432416109802414}
3805;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns 'oldpeak' and one-hot encoded columns of 'cp'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3806;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'thalachh_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
3807;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = 1 - df['sex']
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8366383616383617}
3808;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3809;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3810;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
3811;"
    df = df[['age', 'sex', 'trtbps', 'chol', 'thalachh']]
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)

    # Normalize 'age', 'trtbps', 'chol', and 'thalachh'
    for col in ['age', 'trtbps', 'chol', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.7242567368077426}
3812;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
3813;"
    df = df[['age', 'sex', 'cp', 'exng', 'thalachh']]
    
    df.dropna(inplace=True)
    
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    return df
";{0: 0.83067037470726}
3814;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3815;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3816;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns 'oldpeak' and one-hot encoded columns of 'cp'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
3817;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3818;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8565190365190365}
3819;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3820;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak'])
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8508658416111142}
3822;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
3823;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3824;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
3825;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
3827;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels, include_lowest=True)

    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'], drop_first=True)

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8217253269533581}
3828;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] # Select only the required columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) # Create a binary column based on a condition
    df.drop(columns=['thalachh'], inplace=True) # Remove the original 'thalachh' column

    df['oldpeak'] = np.log1p(df['oldpeak']) # Apply log transformation

    df = pd.get_dummies(df, columns=['cp']) # Perform one-hot encoding on 'cp' column

    df['caa'] = (df['caa'] > 0).astype(int) # Convert 'caa' values to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std() # Standardize selected columns

    return df
";{0: 0.8846618642144086}
3830;"
    # Selecting important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on the mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8665031075481895}
3831;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + list(df.filter(regex='cp_').columns):
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3832;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Standard scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7871904089371793}
3833;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]
    
    df.fillna(df.mean(), inplace=True)
    
    # Min-Max scaling for 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encode 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])
    
    # Binarize 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7414034051534053}
3835;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns of 'cp'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3836;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in ['caa']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    df = df.fillna(0)

    return df
";{0: 0.892156009413472}
3837;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3838;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
3839;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    return df
";{0: 0.8653650789101608}
3840;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    for col in ['caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    return df
";{0: 0.8709536569987388}
3841;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binned_low', 'thalachh_binned_medium', 'thalachh_binned_high']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8757195565221011}
3842;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'caa' to binary values
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Bin 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Perform one-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
3843;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3844;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3845;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3846;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3847;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3848;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
3849;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
3850;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3851;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]  # Select the desired columns
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Convert thalachh to binary
    
    df.drop(columns=['thalachh'], inplace=True)  # Remove thalachh column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to oldpeak
    
    df = pd.get_dummies(df, columns=['cp'])  # Perform one-hot-encoding on cp column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3852;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7421745199458372}
3853;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3854;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
3855;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
3856;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7923644736547962}
3857;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3858;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    df['caa'] = (df['caa'] > 0).astype(int)  

    df = (df - df.mean()) / df.std()  

    return df
";{0: 0.8536957304990092}
3859;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col not in ['caa', 'thalachh_binary']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8869894432837911}
3861;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3862;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
3863;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3864;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8887906247980876}
3865;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3866;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']] 
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) 
    df.drop(columns=['thalachh'], inplace=True) 
    df['oldpeak'] = np.log1p(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp']) 
    df['caa'] = (df['caa'] > 0).astype(int) 
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3867;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8363589630101386}
3868;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
3869;"
    df = df[['age', 'thalachh', 'chol', 'trtbps', 'exng']]
    df.fillna(df.median(), inplace=True)
    
    for col in ['age', 'chol', 'trtbps']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7167531874438022}
3870;"
    df = df[['age', 'chol', 'thalachh', 'cp', 'oldpeak']]
    
    # Filling missing values in 'chol' and 'thalachh' with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'chol' and 'thalachh'
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7458821441594434}
3871;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]  # Selecting columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Creating binary feature

    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Applying log transformation

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for 'cp' column

    df['caa'] = (df['caa'] > 0).astype(int)  # Converting 'caa' column to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3872;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3873;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3875;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp', drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8397611662531018}
3876;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Age normalization
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    
    # One-hot encoding for 'sex' and 'cp'
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7785753003510236}
3877;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8072337288254753}
3878;"
# Keep columns 'cp', 'thalachh', 'oldpeak', and 'caa'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3879;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for numerical columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
3880;"
    df = df[['thalachh', 'oldpeak', 'caa', 'cp']]
    
    # Filling missing values with median
    for col in df.columns:
        df[col].fillna(df[col].median(), inplace=True)
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8338626964433417}
3881;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3883;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3884;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
3885;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3886;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    # Rescaling 'age' and 'chol' between 0 and 1
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    return df
";{0: 0.7155140749850503}
3887;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3888;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3889;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3890;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()

    return df
";{0: 0.8846618642144086}
3891;"
    df = df[['thalachh', 'cp', 'caa', 'oldpeak']]
    
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation on 'thalachh' and 'oldpeak'
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binarize 'cp' based on specific values
    df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)

    return df
";{0: 0.8075141357848921}
3892;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
3894;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
3895;"
    df = df[['sex', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
   
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7739966452466451}
3896;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
3897;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3898;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3899;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    # Standardizing remaining columns
    for col in df.columns:
        if col not in ['thalachh_binary', 'oldpeak', 'caa_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8739972527472528}
3900;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3901;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3902;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3903;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Binarizing the 'caa' column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    # Applying log transformation to the 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Creating a binary feature for the 'cp' column where the value is 3
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    # Standardizing the 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.87325584479273}
3904;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3905;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7889108390447062}
3908;"
    df = df[['thalachh', 'oldpeak', 'exng', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.776583173535976}
3909;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3910;"
    df = df[['oldpeak', 'thalachh', 'cp', 'age', 'trtbps']]
    
    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard Scaling for oldpeak, thalachh, and trtbps
    for col in ['oldpeak', 'thalachh', 'trtbps']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Min-Max scaling for age
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    return df
";{0: 0.797112278402601}
3911;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8504024049720771}
3912;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8100004119015747}
3913;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
3914;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
3915;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    # Scaling 'cp' and 'oldpeak' columns using Min-Max scaler
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.8617017633966786}
3916;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3917;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
3918;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = df['oldpeak']**2
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8434872822965674}
3919;"
# Improved version using a more concise and efficient approach.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8480755937610776}
3920;"
    # Using Standard Scaling for 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binarization for 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)

    return df[['thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']]
";{0: 0.8236213170004024}
3921;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3922;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3923;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3924;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8260813738233093}
3925;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Standard Scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df[['thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']]
";{0: 0.8236213170004024}
3926;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3928;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    scaled_cols = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    df[scaled_cols] = (df[scaled_cols] - df[scaled_cols].mean()) / df[scaled_cols].std()
    
    return df
";{0: 0.8841922404865883}
3929;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3931;"
    df = df[['age', 'sex', 'cp', 'fbs', 'thalachh']]
    
    # Normalizing 'age' and 'thalachh'
    df[['age', 'thalachh']] = (df[['age', 'thalachh']] - df[['age', 'thalachh']].min()) / (df[['age', 'thalachh']].max() - df[['age', 'thalachh']].min())
    
    # Binarization for 'sex' and 'fbs'
    df['sex'] = df['sex'].apply(lambda x: 1 if x == 0 else 0)
    df['fbs'] = df['fbs'].apply(lambda x: 1 if x == 1 else 0)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8226492408557625}
3932;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
3933;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'chol']]
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Standard scaling for numeric columns
    for col in ['age', 'thalachh', 'oldpeak', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7685024077473596}
3934;"
    df = df[['age', 'sex', 'thalachh', 'chol', 'caa']]
    
    # Map binary values
    df['sex'] = 1 - df['sex']
    
    # Normalize 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Binarize 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.7501144950860322}
3935;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3938;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3939;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
3940;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8412436576423096}
3941;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = np.where(df['caa'] > 0, 1, 0)

    return df[['thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']]
";{0: 0.8453152983441783}
3942;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8498523698523698}
3943;"
    return df[['cp', 'oldpeak', 'caa', 'sex', 'exng']]
";{0: 0.8172128873660414}
3944;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8300496277915632}
3945;"
    return pd.concat([
        pd.get_dummies(df['cp'], prefix='cp', drop_first=True),
        df[['thalachh', 'oldpeak', 'caa']].apply(lambda x: np.log1p(x))
    ], axis=1).assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8496650124069479}
3946;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3947;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for numerical columns
    numerical_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in numerical_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
3948;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
3949;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3950;"
    # Keep only necessary columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to binary based on its mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on if it is greater than 0
    df['caa'] = (df['caa'] > 0).astype(int)

    # Scale selected columns
    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()

    return df
";{0: 0.892156009413472}
3951;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert continuous feature into binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply logarithmic transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on categorical feature
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert numerical feature into binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Normalize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
3952;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3953;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8524651333496452}
3954;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
3955;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
3956;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3957;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8446636179350353}
3958;"
    # Select 'cp', 'thalachh', 'oldpeak', 'caa' columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3959;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8508658416111142}
3960;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8591559829059829}
3961;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3962;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

    return df
";{0: 0.8846618642144086}
3963;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
3964;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.7976385187021771}
3965;"
    df = df[['cp', 'oldpeak', 'thalachh', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8701373906662113}
3966;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Creating a new feature based on 'thalachh' column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Converting 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3967;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
3968;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    return df
";{0: 0.8416933885786344}
3969;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8542770469780582}
3971;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3972;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns cp, thalachh, oldpeak, and caa

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarizing thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for cp column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binarizing caa column
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3973;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Scaling 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization of 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8499832616673235}
3974;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # Return preprocessed dataframe
    return df
";{0: 0.8846618642144086}
3975;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  
    df = (df - df.mean()) / df.std()  
    return df
";{0: 0.8701373906662113}
3976;"
    # Keeping only selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
3977;"
    df = df[['thalachh', 'cp', 'age', 'trtbps', 'sex']]

    # Binning 'trtbps' based on quartiles
    df['trtbps'] = pd.qcut(df['trtbps'], q=4, labels=False, duplicates='drop')

    # Standard Scaling for 'thalachh' and 'age'
    for col in ['thalachh', 'age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    # One-hot encoding for 'cp' and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'sex'])

    return df
";{0: 0.8468957710987308}
3978;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8567516113212834}
3979;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    df.dropna(inplace=True)
    
    return df
";{0: 0.8545385343525789}
3980;"
    df = df[['age', 'cp', 'thalachh', 'restecg', 'exng']]
    
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    df = pd.get_dummies(df, columns=['cp', 'restecg'])
    
    return df
";{0: 0.7737879505832971}
3981;"
    # Selecting only the relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Feature engineering - Creating binary feature for 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Feature transformation - Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Feature encoding - One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Feature encoding - Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Data normalization - Standard scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
3982;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8591559829059829}
3983;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
3984;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8665031075481895}
3985;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
3986;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
3987;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Normalize 'thalachh' column between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Apply square root transformation on 'oldpeak' column
    df['oldpeak'] = np.sqrt(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Binarize 'caa' column based on median
    df['caa'] = (df['caa'] > df['caa'].median()).astype(int)

    return df
";{0: 0.8484707486000591}
3988;"
    df = df[['sex', 'cp', 'thalachh', 'chol']]
  
    df['thalachh'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df['chol'] = np.log1p(df['chol'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['sex'] = (df['sex'] == 1).astype(int)
    
    return df
";{0: 0.7940108130045949}
3989;"
    df = df[['cp', 'trtbps', 'thalachh', 'oldpeak', 'exng']]
    
    # Create boolean feature from 'exng'
    df['exng'] = df['exng'].astype(bool)
    
    # Normalize 'trtbps' and 'oldpeak'
    for col in ['trtbps', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.775742824527071}
3990;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Custom feature engineering: Multiply oldpeak and caa
    df['oldpeak_caa_product'] = df['oldpeak'] * df['caa']

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8286376972944136}
3991;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8567516113212834}
3992;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Normalize 'thalachh' column between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Apply square root transformation on 'oldpeak' column
    df['oldpeak'] = np.sqrt(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8484707486000591}
3994;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
3995;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary feature based on thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Converting caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing numerical columns
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
3996;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
3997;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8756242010677495}
3998;"
    df = df[['cp', 'oldpeak', 'caa']]

    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
3999;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4000;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
4001;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    numerical_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in numerical_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4002;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.8541856312547015}
4003;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
4004;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8487266899766901}
4005;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert continuous feature into binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply feature scaling to 'oldpeak' using Min-Max scaling
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    # Perform one-hot encoding on categorical feature
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert numerical feature into binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8633768561187918}
4006;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
            oldpeak=np.log1p(df['oldpeak']),
            cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
            caa=(df['caa'] > 0).astype(int)
        )
";{0: 0.7905253931950261}
4007;"
    df = df[['sex', 'cp', 'thalachh', 'chol']]

    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)

    df['chol'] = np.log1p(df['chol'])

    df = pd.get_dummies(df, columns=['cp'])

    df['sex'] = (df['sex'] == 1).astype(int)

    return df
";{0: 0.8109717868338558}
4008;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4009;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()

    return df
";{0: 0.8846618642144086}
4010;"
    df = df[['sex', 'cp', 'thalachh', 'exng', 'oldpeak']]
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'thalachh' and 'oldpeak' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    return df
";{0: 0.8116400539351358}
4011;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
4012;"
    df = df[['age', 'sex', 'thalachh', 'exng', 'oldpeak']]
    
    # Filling missing values if any
    df.fillna(df.mean(), inplace=True)
    
    # Scaling 'age' and 'thalachh' columns
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.7919579449992956}
4013;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        ).pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8565190365190365}
4014;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
4015;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['oldpeak_caa_product'] = df['oldpeak'] * df['caa']

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8286376972944136}
4016;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df[['thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']]
";{0: 0.8453152983441783}
4018;"
    df = df[['oldpeak', 'thalachh', 'cp', 'caa', 'age']]
    
    # Binarization based on median for 'oldpeak' column
    df['oldpeak_binary'] = np.where(df['oldpeak'] > df['oldpeak'].median(), 1, 0)
    df.drop(columns=['oldpeak'], inplace=True)
    
    # Min-Max scaling for 'thalachh' and 'age' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8807185281761551}
4019;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Normalize 'thalachh' column between 0 and 1
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())

    # Apply square root transformation on 'oldpeak' column
    df['oldpeak'] = np.sqrt(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8503098290598292}
4020;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix=['cp'], drop_first=True)

    return df
";{0: 0.8622151899989685}
4021;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.sqrt(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'], drop_first=True, prefix='cp')\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8458226495726494}
4022;"
    # Select the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4023;"
    return df[['cp', 'oldpeak', 'caa', 'thalachh']]
";{0: 0.7871904089371793}
4024;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing 'oldpeak' feature based on threshold
    threshold = 2.5
    df['oldpeak_binary'] = (df['oldpeak'] > threshold).astype(int)
    df.drop(columns=['oldpeak'], inplace=True)
    
    # Mapping 'caa' values to binary
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.7666114813908932}
4025;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
4026;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877958319003401}
4027;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns cp, thalachh, oldpeak, and caa

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarizing thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for cp column
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Binarizing caa column
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4028;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
4029;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4030;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8300496277915632}
4031;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    cols_to_scale = ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()

    return df
";{0: 0.8621292124399537}
4032;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply square root transformation to oldpeak
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8687876681835945}
4033;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['oldpeak_caa_product'] = df['oldpeak'] * df['caa']  # Custom feature engineering

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of oldpeak

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for cp

    df['caa'] = (df['caa'] > 0).astype(int)  # Binarize caa

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8292148978716142}
4034;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
4035;"
    df = df[['age', 'thalachh', 'oldpeak', 'caa', 'exng']]
    
    df.fillna(df.median(), inplace=True)
    
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7606253096732154}
4036;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['oldpeak_caa_product'] = df['oldpeak'] * df['caa'] 
    df['oldpeak'] = np.log1p(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp']) 
    df['caa'] = (df['caa'] > 0).astype(int) 
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8286376972944136}
4037;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8300496277915632}
4038;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    df['chol'].fillna(df['chol'].mean(), inplace=True)
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.7663354412540173}
4039;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8381593406593406}
4040;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
4041;"
    # Use the same preprocessing steps as in v2

    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)

    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()

    return df
";{0: 0.8846618642144086}
4042;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
4043;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4044;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8554889850586573}
4045;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
4046;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
4047;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Selecting columns cp, thalachh, oldpeak, and caa

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarizing thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Dropping original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of oldpeak column

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Binarizing caa column

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardizing selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4048;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
4050;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
4051;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4052;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8508658416111142}
4053;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Inverting values in 'sex' column
    df['sex'] = 1 - df['sex']
    
    # Applying square root transformation to 'thalachh'
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardization for 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8439862376429541}
4054;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarize thalachh

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of oldpeak

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for cp

    df['caa'] = (df['caa'] > 0).astype(int)  # Binarize caa

    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()  # Standardize selected columns

    return df
";{0: 0.8229111804111803}
4055;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    numerical_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in numerical_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4056;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Standardize 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Apply exponential transformation on 'oldpeak' column
    df['oldpeak'] = np.exp(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8079788372094029}
4057;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8706349206349205}
4058;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
4059;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4060;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df[['thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']]
";{0: 0.847292919993931}
4061;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = pd.qcut(df['thalachh'], q=2, labels=[0, 1])
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8623574517943025}
4062;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4063;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4064;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8393853861192572}
4065;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']]
";{0: 0.8425948245303083}
4066;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.8499233361727343}
4067;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8449216357413079}
4068;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['oldpeak_caa_product'] = df['oldpeak'] * df['caa']  # Custom feature engineering

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation of oldpeak

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding for cp

    df['caa'] = (df['caa'] > 0).astype(int)  # Binarize caa

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8331831518398681}
4070;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8327922077922079}
4071;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8430913348946134}
4072;"
    # Improved version of `select_columns_and_return_dataframe_v2` function
    return pd.concat([
        df[['cp', 'thalachh', 'oldpeak', 'caa']],
        pd.get_dummies(df['cp'], prefix='cp'),
        pd.DataFrame({
            'thalachh_binary': (df['thalachh'] > df['thalachh'].mean()).astype(int),
            'oldpeak': np.log1p(df['oldpeak']),
            'caa': (df['caa'] > 0).astype(int)
        })
    ], axis=1).apply(lambda x: (x - x.mean()) / x.std(), axis=0)
";{0: 0.8403695483353644}
4073;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4074;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4075;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4076;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)

    cols_to_scale = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()

    return df
";{0: 0.892156009413472}
4077;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8446851944777363}
4078;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8072337288254753}
4080;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for cp
    df = pd.get_dummies(df, columns=['cp'])

    # Binarize caa
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4081;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    df.fillna(df.mean(), inplace=True)

    # Normalizing 'age' and 'chol' columns
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    df = pd.get_dummies(df, columns=['restecg'])

    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7369966254923883}
4082;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4083;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
4084;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4085;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    bins = [50, 110, 140, 200]
    
    # Binning 'thalachh' feature
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    return df
";{0: 0.7456553903612728}
4086;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4087;"
    # Selecting most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4088;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].quantile(0.75), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8748954205399802}
4089;"
    df = df[['thalachh', 'oldpeak', 'caa']]

    # Standardization for 'thalachh'
    df['thalachh_standardized'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Log transformation for 'oldpeak'
    df['oldpeak_log'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'caa'
    df = pd.get_dummies(df, columns=['caa'])

    return df
";{0: 0.6954708824168936}
4090;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
4091;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
4093;"
    return pd.DataFrame({
        'thalachh_binary': np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        'oldpeak': np.log1p(df['oldpeak']),
        'cp_0': np.where(df['cp'] == 0, 1, 0),
        'cp_1': np.where(df['cp'] == 1, 1, 0),
        'cp_2': np.where(df['cp'] == 2, 1, 0),
        'cp_3': np.where(df['cp'] == 3, 1, 0),
        'caa': (df['caa'] > 0).astype(int)
    }).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8701373906662113}
4094;"
    df = df[['age', 'thalachh', 'exng']]
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7293072125030845}
4095;"
    # Selecting the columns: 'cp', 'thalachh', 'oldpeak', and 'caa'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa': 0 or 1 value
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4096;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4097;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4098;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
4099;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4100;"
    return df[['cp', 'oldpeak', 'caa', 'thalachh', 'sex']]
";{0: 0.7882869630665847}
4102;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # One-hot encoding for 'cp', 'thalachh_binned', and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned', 'sex'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8788206238206238}
4104;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    df.drop(columns=['cp'], inplace=True)

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.7212238496733907}
4105;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4106;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4107;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4108;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4109;"
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Select columns 'cp', 'thalachh', 'oldpeak', 'caa', 'sex'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # One-hot encoding for 'cp', 'thalachh_binned', and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned', 'sex'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8887412587412588}
4111;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_cols] = (df[selected_cols] - df[selected_cols].mean()) / df[selected_cols].std()
    
    return df
";{0: 0.8846618642144086}
4112;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8798667998667998}
4113;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.8385656682027649}
4114;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4116;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4117;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
4118;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8162445137445136}
4119;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]

    df['sex'] = 1 - df['sex']

    df['thalachh'] = np.sqrt(df['thalachh'])

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8366383616383617}
4120;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
4121;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4122;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4126;"
# Improved version of `select_columns_and_return_dataframe_v2`.
# Include your code implementation for further data preprocessing or feature engineering.

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7841388296612177}
4127;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8747978881440606}
4128;"
    df = df[['thalachh', 'chol', 'oldpeak', 'sex', 'age']]
    
    # Binning 'chol' based on quartiles
    df['chol'] = pd.qcut(df['chol'], q=4, labels=False, duplicates='drop')
    
    # Log transformation for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = np.log1p(df[col])
    
    # One-hot encoding for 'sex'
    df = pd.get_dummies(df, columns=['sex'])
    
    # Standardization for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7750401836969001}
4129;"
    # Selecting columns cp, thalachh, oldpeak, caa
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh' and drop original column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4130;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4131;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4132;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4134;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4135;"
    df = df[['thalachh', 'cp', 'oldpeak', 'slp', 'chol']]
    
    # One-hot encoding for cp and slp
    df = pd.get_dummies(df, columns=['cp', 'slp'])
    
    # Log transformation on 'chol'
    df['chol'] = np.log1p(df['chol'])
    
    # Standard Scaling for thalachh and oldpeak
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.790035779339058}
4136;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7731783776838166}
4137;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7989419776919776}
4138;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['binary_caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    df.drop(columns=['caa'], inplace=True)
    
    # Standard Scaling for 'oldpeak', 'log_oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682104287392495}
4139;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4140;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4142;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8773362276469691}
4143;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7965376061072782}
4144;"
    # Select the desired columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4146;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4147;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4148;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4149;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4150;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4151;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'sex']]
    
    # Imputing missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Normalizing 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.8659686738464328}
4152;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8859786786796897}
4153;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4154;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['binary_caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    df.drop(columns=['caa'], inplace=True)
    
    # Standard Scaling for 'oldpeak', 'log_oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8754684932553785}
4156;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4157;"
    def preprocess(df):
        df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
        df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
        df.drop(columns=['thalachh'], inplace=True)
        df['oldpeak'] = np.log1p(df['oldpeak'])
        df = pd.get_dummies(df, columns=['cp'])
        df['caa'] = (df['caa'] > 0).astype(int)
        for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()
        return df

    return preprocess(df)
";{0: 0.892156009413472}
4158;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_cols = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
4159;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4160;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=np.number).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8125927538328833}
4161;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4162;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
4163;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['binary_caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8644029194848866}
4164;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8678962077349175}
4165;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'caa' to binary values
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Bin 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Perform one-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Normalize 'oldpeak' column
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())

    return df
";{0: 0.865694026496571}
4166;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8565190365190365}
4167;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['binary_caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    df.drop(columns=['caa'], inplace=True)
    
    # Standard Scaling for 'oldpeak', 'log_oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8754684932553785}
4168;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
4169;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8506397251611425}
4170;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4171;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
4172;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4173;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned' columns
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
4174;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling
    for col in df.select_dtypes(include=['float64', 'uint8']).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8709536569987388}
4175;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    selected_cols = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8614151439957892}
4176;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8678962077349175}
4177;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = 1 - df['sex']
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7797864145658263}
4178;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
4181;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature for 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard scaling
    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
    
    return df
";{0: 0.8846618642144086}
4182;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4183;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    df.fillna(df.mean(), inplace=True)

    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    df['chol'] = (df['chol'] - df['chol'].min()) / (df['chol'].max() - df['chol'].min())

    df = pd.get_dummies(df, columns=['restecg'])

    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7414034051534053}
4184;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4185;"
    df = df[['thalachh', 'oldpeak', 'cp', 'sex', 'exng']]
    
    # Min-Max scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp', 'sex', and 'exng'
    df = pd.get_dummies(df, columns=['cp', 'sex', 'exng'])
    
    return df
";{0: 0.7898581798951974}
4186;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4187;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.sqrt(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for selected features
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.796405414625145}
4188;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4189;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['binary_caa'] = np.where(df['caa'] > 0, 1, 0)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8718970646839498}
4191;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4192;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8701373906662113}
4193;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4194;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
4195;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'oldpeak'
    df['oldpeak_binary'] = np.where(df['oldpeak'] > df['oldpeak'].mean(), 1, 0)
    df.drop(columns=['oldpeak'], inplace=True)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8688302747152459}
4196;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4198;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4199;"
    df = df[['thalachh', 'cp', 'caa']]
    
    # Binarization based on the median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.813652018184323}
4200;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4201;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4202;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for all columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4203;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['binary_caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    df.drop(columns=['caa'], inplace=True)
    
    # Standard Scaling for 'oldpeak', 'log_oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8644029194848866}
4204;"
    # Keep only the selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' based on the mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Encode 'caa' as binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4205;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4206;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4207;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')] + ['caa_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8747978881440606}
4208;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    cols_to_scale = ['cp_1', 'cp_2', 'cp_3', 'oldpeak', 'thalachh_binary']
    df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].mean()) / df[cols_to_scale].std()
    
    return df
";{0: 0.871867941304792}
4209;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=((df['cp'] - df['cp'].mean()) / df['cp'].std()),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7946481923812432}
4210;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8567516113212834}
4211;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp_high'] = (df['cp'] == 3).astype(int)

    # Adding min-max scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    return df
";{0: 0.8688077555685215}
4212;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8352045951588052}
4213;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'age' and 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Standard Scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.857373868537756}
4214;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing each selected column    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8393853861192572}
4215;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4216;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
4217;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4218;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
4219;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4220;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7946481923812432}
4222;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp_0=(df['cp'] == 0).astype(int),
        cp_1=(df['cp'] == 1).astype(int),
        cp_2=(df['cp'] == 2).astype(int),
        cp_3=(df['cp'] == 3).astype(int),
        caa=(df['caa'] > 0).astype(int)
    ).transform(lambda x: (x - x.mean()) / x.std())
";{0: 0.8489050868486352}
4223;"
    return pd.concat([
        df[['cp', 'thalachh', 'oldpeak', 'caa']],
        pd.get_dummies(df['cp'], prefix='cp'),
        pd.DataFrame({
            'thalachh_binary': (df['thalachh'] > df['thalachh'].mean()).astype(int),
            'oldpeak': np.log1p(df['oldpeak']),
            'caa': (df['caa'] > 0).astype(int)
        })
    ], axis=1).apply(lambda x: (x - x.mean()) / x.std(), axis=0)
";{0: 0.8403695483353644}
4224;"
    return df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
";{0: 0.7900495663494831}
4225;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.sqrt(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8545345698362941}
4226;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Normalizing 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8600058204507357}
4227;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4228;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4229;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8589538591534218}
4230;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_cols = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4231;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8614151439957892}
4232;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4233;"
    df = df[['sex', 'cp', 'thalachh', 'oldpeak', 'exng']]
    
    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp', 'thalachh_binned' and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned', 'sex'])
    
    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8410558089335678}
4234;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8653650789101608}
4235;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4236;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['binary_caa'] = np.where(df['caa'] > 0, 1, 0)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8644029194848866}
4238;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    selected_cols = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
4239;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  
    df['caa'] = (df['caa'] > 0).astype(int)  
    df = (df - df.mean()) / df.std()  
    return df
";{0: 0.8536957304990092}
4241;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['binary_caa'] = np.where(df['caa'] > 0, 1, 0)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8644029194848866}
4242;"
    df = df[['age', 'thalachh', 'exng']]
    
    # Square root transformation for 'thalachh'
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # Standardization for 'age'
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    
    return df
";{0: 0.7246535900810855}
4244;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4246;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['binary_caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8644029194848866}
4247;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8698597509048328}
4248;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4249;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8704345472378259}
4250;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    selected_cols = ['oldpeak', 'cp_1', 'cp_2', 'cp_3']
    for col in selected_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8625086377082003}
4251;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4252;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Binarization for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak_log'] = np.log1p(df['oldpeak'])
    
    return df
";{0: 0.8106175550556157}
4253;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['binary_caa'] = np.where(df['caa'] > 0, 1, 0)
    df.drop(columns=['caa'], inplace=True)
    
    # Standard Scaling for selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4254;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7774721629945511}
4255;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4256;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8704345472378259}
4257;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=pd.cut(df['cp'], bins=4, labels=False),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8607813316010038}
4258;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['binary_caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'log_oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8718970646839498}
4259;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7489541809627862}
4260;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh' and drop original column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4261;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4262;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4263;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
4264;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
4265;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')] + ['caa_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8747978881440606}
4266;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8704345472378259}
4267;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh' and drop original column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4268;"
    df = df[['sex', 'cp', 'thalachh', 'oldpeak', 'exng']]
    
    # Scaling 'thalachh' using Min-Max scaling
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'sex'])
    
    return df
";{0: 0.8011221425677715}
4269;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all numeric columns
    for col in df.select_dtypes(include=['float64', 'uint8']).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8709536569987388}
4270;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak'] + [col for col in df.columns if col.startswith('cp_')]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4271;"
    return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].dropna()
";{0: 0.7504315442772662}
4272;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak'])
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
4273;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4274;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8614151439957892}
4275;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
4276;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak'])
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
4277;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['log_oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['binary_caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    df.drop(columns=['caa'], inplace=True)
    
    for col in ['oldpeak', 'log_oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    for col in ['cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8718970646839498}
4279;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
4280;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Power transformation for 'thalachh'
    df['thalachh_power'] = df['thalachh'] ** 3
    
    # Standardization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Target encoding for 'caa'
    caa_map = df.groupby('caa')['caa'].mean().to_dict()
    df['caa_encoded'] = df['caa'].map(caa_map)
    
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.7735438267544603}
4281;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
4282;"
    # Select specific columns from the dataframe
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' based on mean and remove original column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Encode 'caa' binary based on conditions and drop the original column
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)

    # Standardize selected columns ('oldpeak', one-hot encoded columns) using standard scaling
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4283;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4284;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > np.mean(df['thalachh']), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak'] + list(df.filter(like='cp').columns):
        df[col] = (df[col] - np.mean(df[col])) / np.std(df[col])
    
    return df
";{0: 0.8846618642144086}
4285;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4286;"
    df.dropna(inplace=True)
    
    # Select columns 'cp', 'thalachh', 'oldpeak', 'caa', 'sex'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # One-hot encoding for 'cp', 'thalachh_binned', and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned', 'sex'])

    # Feature scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8788206238206238}
4287;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8119021518717953}
4290;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4291;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4292;"
    # Selecting relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarizing 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak_log'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Creating binary feature for 'caa' and dropping original column
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8566377679697352}
4293;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for remaining columns
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877353896103896}
4294;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4295;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8512779682045675}
4297;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4298;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4299;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4300;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4301;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4303;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Normalizing 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8712889440308796}
4305;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8501942342721029}
4306;"
    return df[['thalachh', 'chol', 'cp', 'oldpeak', 'age']].dropna().assign(thalachh=lambda x: (x['thalachh'] - x['thalachh'].min()) / (x['thalachh'].max() - x['thalachh'].min()), chol=lambda x: (x['chol'] - x['chol'].min()) / (x['chol'].max() - x['chol'].min()), cp=lambda x: pd.Categorical(x['cp']), oldpeak=lambda x: np.log1p(x['oldpeak']))
";{0: 0.7477236196639183}
4307;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8570197013043233}
4308;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4309;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8680973193473193}
4310;"
    # Selecting specific columns from the dataset
    df = df[['age', 'cp', 'trtbps', 'chol', 'thalachh']]
    
    # Normalizing 'age', 'trtbps', 'chol' based on their min-max values
    for col in ['age', 'trtbps', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Standardizing 'thalachh' column
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.8134011967810716}
4311;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp_high'] = (df['cp'] == 3).astype(int)

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    # Feature engineering the 'oldpeak' column with square root transformation
    df['oldpeak_sq_root'] = np.sqrt(df['oldpeak'])

    return df
";{0: 0.8604911823149528}
4312;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a feature based on 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Applying log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7924237376999198}
4313;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the required columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarize thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Drop original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log-transform the oldpeak column

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary

    df = (df - df.mean()) / df.std()  # Standardize the dataset

    return df
";{0: 0.8536957304990092}
4314;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
    
    # Create a new boolean column based on 'thalachh' value
    df['high_thalachh'] = df['thalachh'] > df['thalachh'].mean()
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Simplify 'caa' to binary encoding
    df['caa_binary'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    return df
";{0: 0.8100004119015747}
4315;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4316;"
    df = df[['age', 'sex','cp', 'thalachh', 'oldpeak']]

    # Scaling 'age', 'thalachh' using Min-Max Scaling
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.8543601489901906}
4317;"
    # Removing features 'slp', 'thall', 'fbs', and 'restecg'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8581108878683505}
4318;"
    # Keep only the selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to binary based on the mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Remove the original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])

    # Transform 'caa' to binary encoding
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4319;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
            oldpeak=np.log1p(df['oldpeak']),
            cp_standardized=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
            caa=(df['caa'] > 0).astype(int)
        )
";{0: 0.8110497380356296}
4320;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Fill missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Standard scaling for numeric columns
    for col in ['age', 'thalachh', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8212996277915632}
4321;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4322;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
4323;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp'] = (df['cp'] - df['cp'].min()) / (df['cp'].max() - df['cp'].min())
    
    return df
";{0: 0.8545385343525789}
4324;"
    # Dropping missing values
    df = df.dropna()

    # Feature engineering and selection
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7856978069881295}
4325;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877353896103896}
4326;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4328;"
  return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
         .assign(thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
                 oldpeak=np.log1p(df['oldpeak']),
                 cp=df['cp'].astype('category'),
                 caa=(df['caa'] > 0).astype(int))\
         .pipe(pd.get_dummies, columns=['cp'])\
         .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
4329;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4330;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8698597509048328}
4331;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['resting_rate'] = df['thalachh'] / (df['oldpeak'] + 1)
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())
    
    return df
";{0: 0.8010657012703233}
4333;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
4334;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()  
    return df
";{0: 0.892156009413472}
4335;"
    # Drop 'oldpeak' column
    df.drop(columns=['oldpeak'], inplace=True)
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Dropping NA values
    df.dropna(inplace=True)
    
    return df
";{0: 0.7577956188003782}
4336;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4337;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['cp'], inplace=True)
    df = (df - df.mean()) / df.std()
    return df
";{0: 0.8524893162393162}
4338;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
4339;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each column
    for col in df.columns[:-1]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8585499425399398}
4340;"
# Only include the significant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding for the cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4341;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4342;"
    df = df[['thalachh', 'cp', 'caa']]
    
    # Binarization based on the median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8143583945732052}
4343;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4344;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8869894432837911}
4345;"
    # Copy the original dataframe to prevent modification of the original data
    df = df.copy()

    # Select the most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4346;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4347;"
# Improved version of `select_columns_and_return_dataframe_v1`.
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
4348;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4350;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4351;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
4352;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8631857031857031}
4354;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], dtype='int')
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4355;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8506397251611425}
4356;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
4357;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4358;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df.drop(columns=['thalachh'], inplace=True)
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
4359;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4360;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    df.fillna(df.mean(), inplace=True)  # Filling missing values with mean

    return df
";{0: 0.8846618642144086}
4361;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa column to binary
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns
    selected_columns = ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
    
    return df
";{0: 0.8792095044118824}
4362;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=[np.number]).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8591298356587886}
4363;"
    df = df[['chol', 'thalachh', 'slp', 'exng', 'oldpeak']]
    
    df.dropna(inplace=True)
    
    for col in ['chol', 'thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.7502708220741007}
4364;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7799580387007657}
4365;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4367;"
    df = df[['cp', 'thalachh', 'oldpeak']]
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
  
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7953766400382973}
4368;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4370;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4371;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8416933885786344}
4372;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4373;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
4374;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
4375;"
    df = df[['sex', 'thalachh', 'cp', 'oldpeak', 'caa']]
    
    # Inverting binary values for 'sex'
    df['sex'] = 1 - df['sex']
    
    # Standardizing 'thalachh' and applying cube root transformation
    df['thalachh'] = (np.cbrt(df['thalachh']) - np.mean(np.cbrt(df['thalachh']))) / np.std(np.cbrt(df['thalachh']))
    
    # One-hot encoding and standard scaling for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] = (df[['cp_0', 'cp_1', 'cp_2', 'cp_3']] - df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].mean()) / df[['cp_0', 'cp_1', 'cp_2', 'cp_3']].std()
    
    # Log transformation and binary encoding for 'oldpeak' (using mean)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.8723966837016881}
4376;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4377;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
4379;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Map binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Square root transform 'thalachh'
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardize 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8288239538239539}
4380;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4381;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df['thalachh_high'] = np.where(df['thalachh'] > 140, 1, 0)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df.drop(columns=['caa', 'thalachh'], inplace=True)

    return df
";{0: 0.8504476127320956}
4382;"
    df = df[['age', 'sex', 'cp', 'chol', 'slp']]
    
    # Custom binary encoding for 'age', 'chol', and 'slp'
    df['age_binary'] = np.where(df['age'] > 50, 1, 0)
    df['chol_binary'] = np.where(df['chol'] > 200, 1, 0)
    df['slp_binary'] = np.where(df['slp'] > 1, 1, 0)
    
    df.drop(columns=['age', 'chol', 'slp'], inplace=True)
    
    return df
";{0: 0.8088988876838548}
4383;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
4384;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4385;"
    df = df[['thalachh', 'oldpeak', 'cp', 'exng', 'caa']]
    
    # Binning for 'thalachh'
    bins = [0, 150, 200, np.inf]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Normalization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    # Standard Scaling for 'cp' and 'caa'
    for col in ['cp', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])
    
    return df
";{0: 0.7241943344426591}
4386;"
    # Retaining the same feature selection as v2
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for each of the columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4387;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4388;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4389;"
    # Keep only the selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Feature engineering: Create a new feature
    df['resting_rate'] = df['thalachh'] / (df['oldpeak'] + 1)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Normalize 'caa' feature
    df['caa'] = (df['caa'] - df['caa'].min()) / (df['caa'].max() - df['caa'].min())

    return df
";{0: 0.806037812727244}
4390;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4391;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
4392;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4393;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
 
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4394;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4395;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8498523698523698}
4396;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8528171372868745}
4397;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877958319003401}
4398;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4399;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4400;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    # Binarization based on mean for 'trtbps'
    df['trtbps_binary'] = np.where(df['trtbps'] > df['trtbps'].mean(), 1, 0)
    df.drop(columns=['trtbps'], inplace=True)
    
    # Log transformation for 'chol'
    df['chol'] = np.log1p(df['chol'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard Scaling for 'age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'chol'
    for col in ['age', 'sex', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8349658469945356}
4401;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
4402;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8231683569510049}
4404;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8209084699453552}
4405;"
    df = df[['thalachh', 'cp', 'oldpeak', 'caa']]

    df.fillna(df.mean(), inplace=True)

    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)

    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7882585526583411}
4406;"
    df = df[['age', 'thalachh', 'exng']]
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # Min-max scaling for 'age'
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())
    
    return df
";{0: 0.7302867550182128}
4407;"
    return pd.DataFrame({
        'cp_scaled': (df['cp'] - df['cp'].mean()) / df['cp'].std(),
        'thalachh_binary': (df['thalachh'] > df['thalachh'].mean()).astype(int),
        'oldpeak_log1p': np.log1p(df['oldpeak']),
        'caa_gt_zero': (df['caa'] > 0).astype(int)
    })
";{0: 0.8447919293820932}
4408;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4409;"
    df = df[['thalachh', 'cp', 'caa']]
    
    # Custom binary encoding for 'thalachh' and normalization for 'cp'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binarization for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: -1}
4410;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'], drop_first=True)\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8504024049720771}
4411;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4412;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Standardization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8677857593226446}
4413;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4414;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
4415;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    return df
";{0: 0.7412486107002558}
4416;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa', 'thalachh'], inplace=True)
    
    return df
";{0: 0.8712889440308796}
4417;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8275751366120219}
4418;"
    df = df.copy()

    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4420;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8352045951588052}
4421;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4422;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4423;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4424;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to binary
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Standardize 'cp' and 'caa'
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8522860745811565}
4425;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4426;"
    df = df[['sex', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    return df
";{0: 0.7784760134520126}
4427;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Swap values in 'sex' column
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Square root transformation on 'thalachh'
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardization for 'age' column
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8244600572469425}
4428;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8778702951277577}
4429;"
    # Keeping most relevant columns
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Encoding binary feature 'sex'
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation to 'thalachh'
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # Performing one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8366383616383617}
4430;"
    return df[['cp', 'oldpeak', 'caa']].assign(caa=(df['caa'] > 0).astype(int), oldpeak=np.log1p(df['oldpeak']), cp_high=(df['cp'] == 3).astype(int))
";{0: 0.8671941876391027}
4431;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.844023461335069}
4432;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8781044871652284}
4433;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Cube root transformation for 'oldpeak'
    df['oldpeak'] = np.cbrt(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7867169983496056}
4434;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'caa']] 
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) 
    df.drop(columns=['thalachh'], inplace=True) 
    df['oldpeak'] = np.log1p(df['oldpeak']) 
    df = pd.get_dummies(df, columns=['cp']) 
    df['caa'] = (df['caa'] > 0).astype(int) 
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'age']: 
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8781044871652284}
4435;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4437;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=[np.number]).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8591298356587886}
4438;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    df['caa'] = (df['caa'] > 0).astype(int)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8588919178749688}
4439;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for numerical columns
    for col in ['oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8709536569987388}
4440;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4441;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except the target
    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8698597509048328}
4442;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Create a new feature 'is_male' based on 'sex'
    df['is_male'] = np.where(df['sex'] == 1, 1, 0)
    
    # Log transformation for 'thalachh'
    df['thalachh_log'] = np.log1p(df['thalachh'])
    
    # Normalization for 'age' and 'oldpeak'
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Drop the 'sex' column
    df.drop(columns=['sex'], inplace=True)
    
    return df
";{0: 0.7790813677380842}
4443;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
4444;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877353896103896}
4445;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4446;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8288239538239539}
4447;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8117130676465045}
4448;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4449;"
    df = df[['age', 'sex', 'trtbps', 'fbs', 'restecg']]
    
    # Normalization for 'age' and 'trtbps'
    for col in ['age', 'trtbps']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'fbs' and 'restecg'
    df['fbs_binary'] = np.where(df['fbs'] > 120, 1, 0)
    df['restecg_binary'] = np.where(df['restecg'] == 1, 1, 0)
    
    df.drop(columns=['fbs', 'restecg'], inplace=True)
    
    return df
";{0: 0.6207704160246534}
4450;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Bin 'oldpeak' feature
    bins = [0, 1, 2, 5]
    labels = ['low', 'medium', 'high']
    df['oldpeak_binned'] = pd.cut(df['oldpeak'], bins=bins, labels=labels)
    df.drop(columns=['oldpeak'], inplace=True)
    
    # Perform one-hot encoding for 'cp' and 'oldpeak_binned'
    df = pd.get_dummies(df, columns=['cp', 'oldpeak_binned'])

    return df
";{0: 0.8140645731977001}
4451;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df['exng'] = (df['exng'] == 1).astype(int)

    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8627565982404694}
4453;"
    df = df[['sex', 'age', 'cp', 'fbs', 'restecg']]

    # Perform one-hot encoding for 'cp' and 'restecg'
    df = pd.get_dummies(df, columns=['cp', 'restecg'], prefix=['cp', 'restecg'])

    # Binarize 'fbs' based on threshold
    df['fbs_binary'] = np.where(df['fbs'] > 120, 1, 0)
    df.drop(columns=['fbs'], inplace=True)

    return df
";{0: 0.7342198878942804}
4454;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    df.drop(columns=['thalachh'], inplace=True) 
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8352045951588052}
4455;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4457;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0) 
    df.drop(columns=['thalachh'], inplace=True) 

    df['oldpeak'] = np.log1p(df['oldpeak']) 

    df = pd.get_dummies(df, columns=['cp']) 

    df['caa'] = (df['caa'] > 0).astype(int) 

    for col in df.columns:
        if col != 'target':
            df[col] = (df[col] - df[col].mean()) / df[col].std() 

    return df
";{0: 0.8698597509048328}
4458;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8524651333496452}
4459;"
    return df[['thalachh', 'cp', 'exng', 'caa']]

";{0: 0.7697784048906525}
4460;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
4461;"
    df = df[['thalachh', 'oldpeak', 'cp', 'age', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8635845808420435}
4462;"
    df = df[['age', 'sex', 'trtbps', 'fbs', 'restecg']]
    
    # Normalization for 'age' and 'trtbps'
    for col in ['age', 'trtbps']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Binarization for 'fbs' and 'restecg'
    df['fbs_binary'] = np.where(df['fbs'] > 120, 1, 0)
    df['restecg_binary'] = np.where(df['restecg'] == 1, 1, 0)
    
    df.drop(columns=['fbs', 'restecg'], inplace=True)
    
    return df
";{0: 0.6207704160246534}
4463;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Normalizing 'thalachh' feature
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # Box-Cox transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels, include_lowest=True)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8656202217548031}
4464;"
    return pd.concat([
        df[['cp', 'thalachh', 'oldpeak', 'caa']],
        pd.get_dummies(df['cp'], prefix='cp'),
        pd.DataFrame({
            'thalachh_binary': (df['thalachh'] > df['thalachh'].mean()).astype(int),
            'oldpeak': np.log1p(df['oldpeak']),
            'caa': (df['caa'] > 0).astype(int)
        })
    ], axis=1).apply(lambda x: (x - x.mean()) / x.std(), axis=0)
";{0: 0.8403695483353644}
4466;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4468;"
    # Select the desired columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4469;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp' column and rename columns
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)

    return df
";{0: 0.8622151899989685}
4471;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    # Binarization for 'trtbps'
    df['trtbps_binary'] = np.where(df['trtbps'] > df['trtbps'].mean(), 1, 0)
    df.drop(columns=['trtbps'], inplace=True)
    
    # Log transformation for 'chol'
    df['chol'] = np.log1p(df['chol'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard Scaling
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8206625683060109}
4472;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4473;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4474;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8163886959340557}
4475;"
    df = df[['age', 'sex', 'chol', 'restecg', 'caa']]
    
    # Binning the 'chol' feature
    bins = [0, 200, 240, 600]
    labels = ['normal', 'borderline', 'high']
    df['chol_binned'] = pd.cut(df['chol'], bins=bins, labels=labels)
    df.drop(columns=['chol'], inplace=True)
    
    # One-hot encoding for 'restecg' and 'chol_binned'
    df = pd.get_dummies(df, columns=['restecg', 'chol_binned'])

    return df
";{0: 0.7183762776099692}
4476;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8792095044118824}
4477;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
4479;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.775633082534781}
4480;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4481;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Standardization for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8712889440308796}
4482;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak'])
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8506397251611425}
4483;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8524651333496452}
4484;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4485;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
4486;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['chol'] = np.log1p(df['chol'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age','sex','cp_0','cp_1','cp_2','cp_3', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.824953404164296}
4487;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.863506475309754}
4488;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7799580387007657}
4489;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak' with 1 added for stability
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4490;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=np.number).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8405690072639225}
4491;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], dtype=int)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4492;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
4493;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4494;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4495;"
    df.dropna(inplace=True)
    
    # Select columns 'cp', 'thalachh', 'oldpeak', 'caa', 'sex'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # One-hot encoding for 'cp', 'thalachh_binned', and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned', 'sex'])

    # Feature scaling for 'oldpeak' - standardization
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8887412587412588}
4496;"
    return pd.DataFrame({
        'cp_scaled': (df['cp'] - df['cp'].mean()) / df['cp'].std(),
        'thalachh_binary': (df['thalachh'] > df['thalachh'].mean()).astype(int),
        'oldpeak_log1p': np.log1p(df['oldpeak']),
        'caa_gt_zero': (df['caa'] > 0).astype(int)
    })
";{0: 0.8447919293820932}
4498;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4499;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
4500;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4501;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4502;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)
    
    # Normalizing 'thalachh' and 'oldpeak' columns
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7348814480580473}
4503;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8524651333496452}
4504;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4505;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()  
    return df  
";{0: 0.892156009413472}
4506;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7871904089371793}
4507;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4508;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4509;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4510;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4511;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4512;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8506397251611425}
4513;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4514;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7871904089371793}
4515;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4516;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4517;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp', drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8397611662531018}
4518;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' to binary based on if it's above mean or not
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary based on if it's larger than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4519;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'])

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4520;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4521;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' column
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardization
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7774721629945511}
4522;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4523;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp')], axis=1)

    df['caa'] = df['caa'].apply(lambda x: int(x > 0))

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binary', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8602250455940996}
4524;"
    # Reduce dataset to the most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4525;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4526;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.781625168459032}
4527;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
                                                          oldpeak=np.log1p(df['oldpeak']),
                                                          cp=df['cp'].apply(lambda x: 1 if x == 3 else 0),
                                                          caa=(df['caa'] > 0).astype(int)).apply(lambda x: (x - x.mean()) / x.std() if x.name not in ['cp', 'caa'] else x, axis=0)
";{0: 0.7274299701041897}
4528;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Encoding 'thalachh' as binary
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardizing numerical columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4529;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4530;"
# Using the same approach as before and considering additional improvements in v3
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Feature scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()

    # Applying log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Encoding 'caa' to binary values
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8453152983441783}
4531;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the specific columns
    
    df = pd.get_dummies(df, columns=['cp'])  # Perform one-hot encoding on the 'cp' column
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Convert thalachh values to binary
    
    df.drop(columns=['thalachh'], inplace=True)  # Drop the original thalchh column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Encode 'caa' as binary
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4532;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4534;"
    df = df[['oldpeak', 'thalachh', 'sex', 'cp', 'exng']]
    df['sex'] = 1 - df['sex']
    df['exng'] = 1 - df['exng']
    df.dropna(inplace=True)
    for col in ['oldpeak', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.8000611960867884}
4535;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4536;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Scaling 'age', 'thalachh' using Min-Max Scaling
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.850316433143196}
4537;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4538;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
4539;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4540;"
    df = df[['thalachh', 'oldpeak', 'age', 'sex', 'cp']]
    
    # Custom feature engineering combining 'thalachh' and 'oldpeak'
    df['heart_condition'] = df['thalachh'] * (1 / (df['oldpeak'] + 1e-6))
    
    # Binarizing 'sex'
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.6748910509274462}
4541;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4542;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4546;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int) 
    df.drop(columns=['thalachh'], inplace=True) 

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  

    df['caa'] = (df['caa'] > 0).astype(int) 

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4547;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
4548;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4549;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int) 
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']: 
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4550;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4551;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
4552;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
4553;"
    # Select relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on median of thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode the cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4554;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary feature based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation on oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transforming caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4556;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
4557;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' to binary based on if it's above mean or not
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Convert 'caa' to binary based on if it's larger than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4558;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8045019820362285}
4559;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4560;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
4561;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
4562;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' to binary based on if it's above median or not
    df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].median() else 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Convert 'caa' to binary based on if it's larger than 0 or not
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4563;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4564;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7881825455082123}
4566;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4568;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()  
    return df
";{0: 0.892156009413472}
4569;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create a binary column based on mean of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log-transform 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4570;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4571;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4572;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4573;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4574;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4575;"
    df = df[['age', 'thalachh', 'oldpeak', 'caa', 'exng']]

    df.fillna(df.median(), inplace=True)

    for col in ['age', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    df['caa'] = (df['caa'] > 0).astype(int)

    df['exng'] = (df['exng'] == 1).astype(int)

    return df
";{0: 0.7606253096732154}
4576;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8512779682045675}
4577;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)

    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8393853861192572}
4578;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    return df
";{0: 0.7660887283504677}
4579;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Standardizing 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.768653875124971}
4580;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
4582;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4584;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Min-max scaling for 'oldpeak'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].min()) / (df['oldpeak'].max() - df['oldpeak'].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8243952557225958}
4585;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)

    # Standardizing 'trtbps' and 'chol'
    for col in ['trtbps', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.7572091450605739}
4586;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'])

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4587;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4588;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating binary column based on median of thalachh
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardizing non-target columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.871867941304792}
4589;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4590;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7989419776919776}
4591;"
    df = df[['thalachh', 'oldpeak', 'caa', 'sex', 'age']]

    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # One-hot encoding for 'thalachh_binned', 'sex'
    df = pd.get_dummies(df, columns=['thalachh_binned', 'sex'])

    # Min-Max scaling for 'age'
    df['age'] = (df['age'] - df['age'].min()) / (df['age'].max() - df['age'].min())

    return df
";{0: 0.7744288352915027}
4592;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
4593;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Normalize 'thalachh' feature
    df['thalachh_norm'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8521611721611722}
4594;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4595;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4596;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4597;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak' column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Converting 'caa' column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
4598;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8536957304990092}
4599;"
    df = df[['age', 'sex', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7196976436071285}
4600;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4601;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4602;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4603;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4604;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4605;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    return df
";{0: 0.8846618642144086}
4606;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df['age_chol_interaction'] = df['age'] * df['chol']
    
    return df
";{0: 0.8394161394161394}
4608;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8446851944777363}
4609;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binary', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
4610;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
4611;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int) 
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']: 
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4612;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh' column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7881299523891853}
4613;"
    df = df[['oldpeak', 'cp', 'caa']]
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'cp' feature
    bins = [-1, 0, 1, 2, 3]
    labels = ['Absent', 'Type 1', 'Type 2', 'Type 3']
    df['cp_binned'] = pd.cut(df['cp'], bins=bins, labels=labels)
    df.drop(columns=['cp'], inplace=True)
    
    # One-hot encoding for 'cp_binned' and 'caa'
    df = pd.get_dummies(df, columns=['cp_binned', 'caa'])

    return df
";{0: 0.694381280639644}
4614;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize thalachh column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4615;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7946481923812432}
4617;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4618;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8596426521239954}
4619;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4620;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    
    # Binarize thalachh column using median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)  
    
    # Drop original thalachh column
    df.drop(columns=['thalachh'], inplace=True)  
    
    # Log-transform the oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)  
    
    # Convert caa to binary
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()  
    
    return df
";{0: 0.8393853861192572}
4621;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4622;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    bins = [50, 110, 140, 200]  # Define bins for binning
    labels = ['low', 'medium', 'high']  # Define labels for binning
    
    # Binning 'thalachh' feature
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8751048951048951}
4623;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
4624;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select columns of interest

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Create binary feature from 'thalachh'
    df.drop(columns=['thalachh'], inplace=True)  # Drop original 'thalachh'

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'

    df = pd.get_dummies(df, columns=['cp'])  # One-hot encode 'cp'

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert 'caa' to binary

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4625;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4626;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    for col in ['cp', 'thalachh_binned']:
        df = pd.concat([df, pd.get_dummies(df[col], prefix=col)], axis=1)
        df.drop(columns=[col], inplace=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8576387780349588}
4627;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
4628;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8565190365190365}
4629;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'], drop_first=True)

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7419307932649211}
4630;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4631;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
4632;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4633;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4634;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
     
    # Binarize thalachh column
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4635;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
4636;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4638;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
4639;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binary encoding 'thalachh' based on the mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4640;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4641;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4642;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binary encoding 'thalachh' based on the mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4643;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binary encoding 'thalachh' based on the median
    df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].median() else 0)
    df.drop('thalachh', axis=1, inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert 'caa' to binary
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
4644;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4645;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8352045951588052}
4646;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4647;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4648;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = df['thalachh'].apply(lambda x: 1 if x > df['thalachh'].mean() else 0)
    df.drop('thalachh', axis=1, inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Convert 'caa' to binary
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
4649;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4650;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Create binary column based on thalachh mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4651;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'])

    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4652;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.concat([df, pd.get_dummies(df['cp'], prefix='cp').drop(columns='cp_0')], axis=1)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8092541384819334}
4653;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  

    df['oldpeak'] = np.log1p(df['oldpeak'])  

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  

    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8569979282473265}
4655;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Binarize 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
4656;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4657;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  
    df['caa'] = (df['caa'] > 0).astype(int)  
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
4658;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Convert 'thalachh' to binary based on if it's above mean or not
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Convert 'caa' to binary based on if it's larger than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4659;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df['sex'] = 1 - df['sex']
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8294066384435237}
4660;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4662;"
    # Selecting columns of interest
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Map non-zero values of 'caa' to 1
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Perform one-hot encoding for 'thalachh_binned'
    df = pd.get_dummies(df, columns=['thalachh_binned'])

    return df
";{0: 0.8571884163008201}
4663;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)  
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  
    df['caa'] = (df['caa'] > 0).astype(int)  
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8352045951588052}
4664;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' column
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardization
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7867376997177149}
4665;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
4666;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4667;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8536957304990092}
4668;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4669;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
4670;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4671;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8623574517943025}
4672;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int) 
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    
    df['caa'] = (df['caa'] > 0).astype(int)  

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']: 
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4673;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to binary based on if it's above mean or not
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Apply log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding on 'cp'
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    # Convert 'caa' to binary based on if it's larger than 0 or not
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8887906247980876}
4674;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak'])
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8508658416111142}
4675;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4676;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'], prefix='cp')

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4677;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak', 'age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8415101061383183}
4678;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
4679;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'chol']]
    
    # Mapping binary values
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Applying square root transformation
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standardizing 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8366383616383617}
4680;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp'] = df['cp'].map({0: 'Typical Angina', 1: 'Atypical Angina', 2: 'Non-anginal Pain', 3: 'Asymptomatic'})
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: -1}
4681;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8508658416111142}
4682;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binary encoding 'thalachh' based on the median
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop('thalachh', axis=1, inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encode 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Convert 'caa' to binary
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize selected columns
    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
4683;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
4684;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']] 

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4685;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' column
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardization
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7774721629945511}
4686;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)  
    df['oldpeak'] = np.log1p(df['oldpeak'])  
    df = pd.get_dummies(df, columns=['cp'])  
    df['caa'] = (df['caa'] > 0).astype(int)  
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4687;"
    # Dropping 'sex' column
    df = df[['age', 'cp', 'thalachh', 'oldpeak']]

    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7557032381206592}
4688;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Log transformation for 'thalachh' and 'oldpeak'
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.7298614025455171}
4689;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4690;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak'])
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8553076884842877}
4691;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize thalachh column
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation of oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Convert caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4692;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8682830585937997}
4693;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the specific columns
    
    df = pd.get_dummies(df, columns=['cp'])  # Perform one-hot encoding on the 'cp' column
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Convert thalachh values to binary
    
    df.drop(columns=['thalachh'], inplace=True)  # Drop the original thalchh column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Encode 'caa' as binary
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4694;"
    return df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
";{0: 0.7884403709471843}
4695;"
    df = df[['thalachh', 'oldpeak', 'slp', 'age', 'chol']]
    
    # Binning 'thalachh' and 'chol' features
    thalachh_bins = [50, 110, 140, 200]
    thalachh_labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=thalachh_bins, labels=thalachh_labels)
    
    chol_bins = [50, 200, 240, 600]
    chol_labels = ['normal', 'borderline high', 'high']
    df['chol_binned'] = pd.cut(df['chol'], bins=chol_bins, labels=chol_labels)
    
    df.drop(columns=['thalachh', 'chol'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'slp', 'thalachh_binned', and 'chol_binned'
    df = pd.get_dummies(df, columns=['slp', 'thalachh_binned', 'chol_binned'])

    # Feature scaling for 'oldpeak' and 'age'
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()

    return df
";{0: 0.7319286003339421}
4696;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7544956613936732}
4697;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df = pd.get_dummies(df, columns=['cp'])

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4698;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the specific columns
    
    df = pd.get_dummies(df, columns=['cp'])  # Perform one-hot encoding on the 'cp' column
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Convert thalachh values to binary
    
    df.drop(columns=['thalachh'], inplace=True)  # Drop the original thalchh column
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Apply log transformation to 'oldpeak'
    
    df['caa'] = (df['caa'] > 0).astype(int)  # Encode 'caa' as binary
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:  # Standardize selected columns
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4699;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4701;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4702;"
# Improved version of `select_columns_and_return_dataframe_v2`.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
         .assign(thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
                 oldpeak=np.log1p(df['oldpeak']),
                 cp=df['cp'].astype('category'),
                 caa=(df['caa'] > 0).astype(int))\
         .pipe(pd.get_dummies, columns=['cp'])\
         .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8567516113212834}
4703;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4704;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
4705;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4706;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4707;"
    df = df[['thalachh', 'oldpeak', 'age', 'chol', 'caa']]
    
    # Filling missing values with median
    df.fillna(df.median(), inplace=True)

    # Binning 'chol' feature
    chol_bins = [0, 200, 240, 600]
    chol_labels = ['normal', 'borderline high', 'high']
    df['chol_binned'] = pd.cut(df['chol'], bins=chol_bins, labels=chol_labels)
    
    # One-hot encoding for 'chol_binned'
    df = pd.get_dummies(df, columns=['chol_binned'])

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Feature scaling for 'oldpeak', 'age', and 'thalachh'
    for col in ['oldpeak', 'age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7247710358556685}
4711;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4712;"
    # Selecting and keeping only the required columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing 'thalachh' based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4714;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7841388296612177}
4715;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4716;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Bin 'thalachh' feature
    df['thalachh_binned'] = pd.qcut(df['thalachh'], q=3, labels=['low', 'medium', 'high'])
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Binarize 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8766929274233611}
4717;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4718;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8506397251611425}
4719;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3'
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4720;"
    df = df[['age', 'sex', 'thalachh', 'chol', 'caa']]
    
    # Map binary values
    df['sex'] = 1 - df['sex']
    
    # Normalize 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Binarize 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.7501144950860322}
4721;"
    df = df[['age', 'sex', 'thalachh', 'oldpeak', 'cp']]
    
    # Standardizing 'thalachh' and 'age' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    
    # Binarization of 'oldpeak' - 0 if less than mean, 1 if greater than mean
    df['oldpeak'] = np.where(df['oldpeak'] > df['oldpeak'].mean(), 1, 0)
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    return df
";{0: 0.8633800563236047}
4722;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8524893162393162}
4723;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    # Standardizing remaining columns
    for col in df.columns:
        if col not in ['thalachh_binary', 'oldpeak', 'caa_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
            df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8665031075481895}
4724;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4725;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4726;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7841388296612177}
4728;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4729;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all numerical columns
    for col in df.select_dtypes(include=np.number).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8591298356587886}
4730;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4731;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating binary feature 'thalachh_binary'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Applying Log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4732;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7856442060053038}
4733;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]  # Select the required columns

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)  # Binarize thalachh column
    df.drop(columns=['thalachh'], inplace=True)  # Drop original thalachh column

    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log-transform the oldpeak column

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encode cp column

    df['caa'] = (df['caa'] > 0).astype(int)  # Convert caa to binary

    df = (df - df.mean()) / df.std()  # Standardize the dataset

    return df
";{0: 0.8536957304990092}
4734;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7731783776838166}
4735;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7965376061072782}
4736;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing 'thalachh' based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4737;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / (df['thalachh'].std())  # Standard Scaling for 'thalachh'
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation for 'oldpeak'
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for 'cp' with drop_first
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)  # Binary encoding for 'caa'
    
    return df
";{0: 0.8403418803418802}
4738;"
    # Adding new features based on interactions
    df['thalachh*oldpeak'] = df['thalachh'] * df['oldpeak']
    df['oldpeak/caa'] = df['oldpeak'] / (df['caa'] + 1)
    
    # Applying standard scaling to 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Square root transformation on 'exng'
    df['exng'] = np.sqrt(df['exng'])
    
    return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa', 'exng', 
               'thalachh*oldpeak', 'oldpeak/caa']]
";{0: 0.7751264958086745}
4739;"
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['exng'] = np.sqrt(df['exng'])
    
    return df[['thalachh', 'oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa', 'exng']]
";{0: 0.8655316905316905}
4740;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.779192593102078}
4741;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing 'thalachh' based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4742;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4743;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8489050868486352}
4744;"
    df = df[['sex', 'cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8722229227966933}
4745;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7989419776919776}
4747;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4748;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]

    # Fill missing values with the mean
    df.fillna(df.mean(), inplace=True)

    # Min-Max scaling for 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())

    # One-hot encoding for 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])

    # Convert 'exng' to binary
    df['exng'] = np.where(df['exng'] == 1, 1, 0)

    return df
";{0: 0.7414034051534053}
4749;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4751;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df.dropna(inplace=True)
    
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    return df
";{0: 0.8290098130466983}
4752;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
4753;"
    df = df[['age', 'sex', 'thalachh', 'exng', 'oldpeak']]
    
    # Imputing missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Standardizing 'age' and 'thalachh' columns
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    return df
";{0: 0.7820744951158457}
4754;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        # Binary encoding for 'thalachh'
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        # Log transformation for 'oldpeak'
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        # Binary encoding for 'caa'
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std()) # Standard scaling for selected columns
";{0: 0.8542239545518235}
4755;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4756;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4757;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4758;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mean normalization for 'thalachh' and 'oldpeak'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8453152983441783}
4759;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Standard scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8453152983441783}
4760;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
4762;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / (df['thalachh'].std())  # Standard Scaling for 'thalachh'
    
    df['oldpeak'] = np.log1p(df['oldpeak'])  # Log transformation for 'oldpeak'
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)  # One-hot encoding for 'cp' with drop_first
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)  # Binary encoding for 'caa'
    
    return df
";{0: 0.8381593406593406}
4763;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4764;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4765;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7881825455082123}
4766;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    return df
";{0: 0.7850457288089494}
4768;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8623574517943025}
4769;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4770;"
    df = df[['thalachh', 'chol', 'cp', 'age', 'sex']]
    
    df['chol'] = pd.qcut(df['chol'], q=4, labels=False, duplicates='drop')
    
    df['thalachh'] = np.log1p(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8337773224043715}
4771;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
4772;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8698597509048328}
4773;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    cols_to_scale = ['oldpeak', 'caa', 'thalachh_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']
    for col in cols_to_scale:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877353896103896}
4774;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8653650789101608}
4775;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    return df
";{0: 0.8368238213399504}
4776;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8210720999514102}
4777;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7871904089371793}
4779;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak'])
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp', drop_first=True))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8429027558463043}
4780;"
    # Selecting the columns 'cp', 'thalachh', 'oldpeak', and 'caa'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4781;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4782;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Standardization
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.781625168459032}
4783;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8623574517943025}
4784;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    
    return df
";{0: 0.8749741265110117}
4785;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7731783776838166}
4786;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4787;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'thalachh_binary', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8796478801767009}
4788;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarizing 'thalachh' based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4789;"
    df = df[['thalachh', 'oldpeak', 'sex', 'exng', 'cp']]
    df = df.apply(lambda x: (x - x.mean()) / x.std() if x.name in ['thalachh', 'oldpeak'] else x)
    df['sex'] = 1 - df['sex']
    df['exng'] = 1 - df['exng']
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.8087968282706963}
4790;"
    # Select the necessary columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh' based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4791;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4792;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7841388296612177}
4793;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4794;"
    # Select the columns of interest
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4795;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4796;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4797;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4799;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4800;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    df['sex'] = np.where(df['sex'] == 1, 1, 0)

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'chol', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8373959373959373}
4801;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Age normalization
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    
    # One-hot encoding for 'sex' and 'cp'
    df = pd.get_dummies(df, columns=['sex', 'cp'])
    
    return df
";{0: 0.7785753003510236}
4802;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4803;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
    df.dropna(inplace=True)
    df = pd.get_dummies(df, columns=['cp', 'caa'])
    
    return df
";{0: 0.7574410825409212}
4804;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7871904089371793}
4805;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4806;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to oldpeak
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Transform 'caa' based on condition
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4807;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4808;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization for 'thalachh' based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8623574517943025}
4809;"
    # Selecting specific columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
4810;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8514725763669034}
4811;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4813;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
4814;"
    df = df[['cp', 'oldpeak', 'thalachh', 'exng', 'sex']]
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Applying Min-Max scaling for 'oldpeak' and 'thalachh'
    for col in ['oldpeak', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8070166498405525}
4815;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8425948245303083}
4816;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on the median for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    # Feature scaling for 'thalachh'
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Additional preprocessing steps or feature engineering can be added here
    
    return df
";{0: 0.8499233361727343}
4817;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        )\
        .pipe(pd.get_dummies, columns=['cp'])\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
4818;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'age'
    df['age_binary'] = np.where(df['age'] > df['age'].mean(), 1, 0)
    df.drop(columns=['age'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'age_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8138105900948366}
4819;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak'])
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8506397251611425}
4821;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4822;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df = df.drop(columns=['thalachh'])
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8528171372868745}
4823;"
    df = df[['thall', 'cp', 'thalachh', 'oldpeak', 'exng']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' and 'thall'
    df = pd.get_dummies(df, columns=['cp', 'thall'])
    
    # Binary encoding for 'exng'
    df['exng_binary'] = df['exng']
    df.drop(columns=['exng'], inplace=True)
    
    return df
";{0: 0.7185662730043338}
4825;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4826;"
    df = df[['age', 'thalachh', 'cp', 'chol', 'exng']]
    df = pd.get_dummies(df, columns=['cp'])
    
    # Normalizing 'age', 'thalachh', and 'chol'
    for col in ['age', 'thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.8041687017579013}
4827;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
    ).join(pd.get_dummies(df['cp'], prefix='cp')).drop(columns=['cp']).assign(
        caa=(df['caa'] > 0).astype(int)
    ).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8542239545518235}
4828;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    # Mapping binary values for 'sex'
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    # Square root transformation on 'thalachh'
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard Scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8316883844752697}
4829;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8403418803418802}
4831;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    # Feature engineering based on 'oldpeak' and 'caa'
    df['oldpeak_squared'] = df['oldpeak'] ** 2
    df['caa_times_oldpeak'] = df['caa'] * df['oldpeak']
    
    return df
";{0: 0.8566349779253004}
4832;"
    df = df[['cp', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8617241021690173}
4833;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4834;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4835;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4836;"
    # Preserve necessary columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh' based on mean value
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Drop original 'thalachh' column
    df.drop(columns=['thalachh'], inplace=True)
    
    # Perform log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encode 'caa' to indicate presence
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4837;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4838;"
    df = df[['age', 'sex', 'thalachh', 'oldpeak']]

    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['thalachh_binned'])

    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.722052994349576}
4839;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4840;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation plus 1 for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
4841;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4842;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4843;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns[:-1]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8526969658735652}
4844;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4845;"
    # Keep only relevant columns
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]

    # Binarize 'sex'
    df['sex'] = np.where(df['sex'] == 1, 1, 0)

    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Standardize 'age', 'chol', and 'thalachh'
    for col in ['age', 'chol', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.841125541125541}
4846;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8739972527472528}
4847;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df['cp_low'] = (df['cp'] == 0).astype(int)

    return df
";{0: 0.8622548371394185}
4848;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create a binary feature based on thalachh
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Convert 'caa' to binary values
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4849;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.877958319003401}
4850;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarize 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encode 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardize 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4851;"
    df = df[['cp', 'thalachh', 'exng', 'oldpeak', 'caa']]
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Normalizing 'thalachh', 'oldpeak' and 'caa'
    for col in ['thalachh', 'oldpeak', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.864175333450849}
4852;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4853;"
    # Retaining only the selected columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.859133866689484}
4854;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]    

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.818617395100446}
4855;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary column based on median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Logarithm transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    # Binarization
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standardization
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8569979282473265}
4856;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standard Scaling for all columns
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.877353896103896}
4857;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    return df
";{0: 0.8419780298492757}
4859;"
    df = df[['age', 'sex', 'cp', 'trtbps', 'chol', 'fbs', 'restecg', 'thalachh', 'oldpeak', 'slp', 'caa', 'thall', 'exng']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['cp', 'restecg', 'slp', 'thall'])
    
    for col in ['age', 'trtbps', 'chol', 'thalachh', 'oldpeak', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8252646815550042}
4860;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / (df['thalachh'].std())
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8561343245348043}
4861;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4862;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    return df
";{0: 0.8756242010677495}
4863;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
            oldpeak=np.log1p(df['oldpeak']),
            cp=df['cp'].astype('category'),
            caa=(df['caa'] > 0).astype(int)
        ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8548621975952484}
4864;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7871904089371793}
4865;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for all columns except 'caa'
    for col in df.columns:
        if col != 'caa':
            df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8854524642024643}
4866;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.7924237376999198}
4867;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4868;"
    df = df[['age', 'sex', 'cp', 'chol', 'thalachh']]
    
    df['sex'] = np.where(df['sex'] == 1, 1, 0)

    df = pd.get_dummies(df, columns=['cp'])

    for col in ['age', 'chol', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8295815295815295}
4869;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to binary based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log-transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on greater than 0
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected features
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4870;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8739972527472528}
4871;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8739972527472528}
4872;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8623574517943025}
4873;"
    df.dropna(inplace=True)
    
    # Select columns 'cp', 'thalachh', 'oldpeak', 'caa', 'sex'
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
    
    # Binning 'thalachh' feature
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)

    # One-hot encoding for 'cp', 'thalachh_binned', and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned', 'sex'])

    # Feature scaling for 'oldpeak' - standardization
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8814831942251298}
4874;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns[:-1]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8480290025504198}
4875;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns[:-1]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8526969658735652}
4876;"
    # Select relevant columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to binary based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log-transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on greater than 0
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected features
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4877;"
    df = df[['thalachh', 'oldpeak', 'cp', 'caa', 'exng']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    df = pd.get_dummies(df, columns=['caa'], prefix='caa', drop_first=True)
    
    return df
";{0: 0.6816415019910699}
4878;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4879;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)

    return df
";{0: 0.8739972527472528}
4880;"
    df = df[['thalachh', 'oldpeak', 'caa']]
    
    # Fill missing values with median
    for col in df.columns:
        df[col].fillna(df[col].median(), inplace=True)
    
    # Feature scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7398912322245399}
4882;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.877353896103896}
4883;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8544500710017952}
4884;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7871904089371793}
4885;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4886;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]
    
    df.fillna(df.mean(), inplace=True)
    
    # Min-Max scaling for 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encode 'restecg'
    df = pd.get_dummies(df, columns=['restecg'])
    
    # Binarize 'exng'
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7522230772845526}
4887;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.columns[:-1]:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8526969658735652}
4888;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in df.select_dtypes(include=np.number).columns:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8591298356587886}
4889;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]
";{0: 0.7889108390447062}
4890;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4891;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4892;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Convert 'thalachh' to binary based on mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log-transform 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encode 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Convert 'caa' to binary based on greater than 0
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize selected features
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4893;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4894;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['cp'] = pd.cut(df['cp'], bins=4, labels=False)
    
    df['thalachh'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    
    df['oldpeak'] = np.exp(df['oldpeak']) - 1
    
    df = pd.get_dummies(df, columns=['caa'])
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6579122363734846}
4895;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    return df
";{0: 0.8449216357413079}
4896;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    df['caa'] = (df['caa'] > 0).astype(int)
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    return df
";{0: 0.8682830585937997}
4897;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4898;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8524893162393162}
4899;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation of 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak' and one-hot encoded columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4900;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak'])
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8506397251611425}
4901;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8698597509048328}
4902;"
    df = df[['age', 'sex', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    df = pd.get_dummies(df, columns=['exng'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7441474973364919}
4903;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' with prefix
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8499832616673235}
4904;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp'] = (df['cp'] - df['cp'].mean()) / df['cp'].std()
    df['caa'] = (df['caa'] > 0).astype(int)
    return df
";{0: 0.8522860745811565}
4905;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.892156009413472}
4906;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4907;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Binning 'thalachh' feature
    bins = [0, 100, 150, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    return df
";{0: 0.8601778329197686}
4908;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].min()) / (df['thalachh'].max() - df['thalachh'].min())
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    return df
";{0: 0.8446592296592297}
4910;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4911;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4912;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4913;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4914;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardize numerical columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4915;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['cp'] = pd.Categorical(df['cp'])
    df['cp'] = df['cp'].cat.codes

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8500803909205548}
4916;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Bin 'thalachh' based on given bins
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    # Apply log transformation to 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Perform one-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    # Standardize 'thalachh' and 'oldpeak' columns
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7774721629945511}
4917;"
    # Selecting the most important columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Creating a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4918;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=np.where(df['thalachh'] > df['thalachh'].median(), 1, 0),
            oldpeak=np.log1p(df['oldpeak'])
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8462681404616887}
4919;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp']).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8591559829059829}
4920;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean for 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])

    # Binary encoding for 'caa'
    df['caa_binary'] = (df['caa'] > 0).astype(int)
    df.drop(columns=['caa'], inplace=True)
    
    return df
";{0: 0.8665031075481895}
4921;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8812964795990244}
4922;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4923;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8841922404865883}
4924;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4925;"
    df = df[['thalachh', 'oldpeak', 'cp', 'sex', 'exng']]
    
    # Min-Max scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp' and 'sex'
    df = pd.get_dummies(df, columns=['cp', 'sex'])
    
    return df
";{0: 0.8068693568350283}
4926;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
4927;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization based on mean of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp' column
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    # Binary encoding for 'caa' column
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard Scaling for 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3' columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4928;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Converting caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
4929;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4930;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4931;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].median()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8393853861192572}
4932;"
    df = df[['age', 'cp', 'thalachh', 'oldpeak']]

    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7579983200878723}
4933;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['caa'] = (df['caa'] > 0).astype(int)

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned', 'sex'])

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8788206238206238}
4934;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7774721629945511}
4935;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8887906247980876}
4937;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4938;"
    df = df[['age', 'sex', 'thalachh', 'exng']]
    
    df['sex'] = df['sex'].map({0: 1, 1: 0})
    
    df['thalachh'] = np.sqrt(df['thalachh'])
    
    for col in ['age']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.7513204543406765}
4939;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4940;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8887906247980876}
4941;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]

    # Binning 'thalachh'
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)

    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding for 'cp' and 'thalachh_binned'
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])

    # Standardization of 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7799580387007657}
4942;"
    df = df[['age', 'cp', 'trtbps', 'chol', 'thalachh']]

    df.dropna(inplace=True)

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['chol'] = np.log1p(df['chol'])

    df = pd.get_dummies(df, columns=['cp'])

    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['trtbps'] = (df['trtbps'] - df['trtbps'].mean()) / df['trtbps'].std()
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()

    return df
";{0: 0.8053092111884537}
4943;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8812964795990244}
4944;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8623574517943025}
4945;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']]\
        .assign(
            thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
            oldpeak=np.log1p(df['oldpeak']),
        )\
        .join(pd.get_dummies(df['cp'], prefix='cp'))\
        .assign(
            caa=(df['caa'] > 0).astype(int)
        )\
        .apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8508658416111142}
4946;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['thalachh', 'oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8561343245348043}
4947;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa', 'sex']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df['caa'] = (df['caa'] > 0).astype(int)

    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned', 'sex'])

    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.8788206238206238}
4948;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
4949;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['cp'] = pd.Categorical(df['cp'])
    df = pd.get_dummies(df, columns=['cp'])  # One-hot encoding cp column

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8812964795990244}
4950;"
    df = df[['cp', 'oldpeak', 'caa']]

    # Mapping binary values for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])

    return df
";{0: 0.8695040410409263}
4951;"
    df = df[['age', 'chol', 'thalachh', 'exng', 'restecg']]
    
    # Fill missing values with the mean of each column
    df.fillna(df.mean(), inplace=True)
    
    # Min-max scaling for 'age' and 'chol'
    for col in ['age', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'restecg' column
    df = pd.get_dummies(df, columns=['restecg'])
    
    # Convert 'exng' column to binary
    df['exng'] = np.where(df['exng'] == 1, 1, 0)
    
    return df
";{0: 0.7480700718200719}
4952;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    df['caa'] = np.where(df['caa'] > 0, 1, 0)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8393853861192572}
4953;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8812964795990244}
4954;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
4955;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4956;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8764123016146795}
4957;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8701373906662113}
4959;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.7774721629945511}
4960;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = (df['thalachh'] > df['thalachh'].mean()).astype(int)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], drop_first=True, prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    return df
";{0: 0.8416933885786344}
4961;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['cp'] = pd.Categorical(df['cp'])
    df['cp'] = df['cp'].cat.codes

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.857574536119618}
4962;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Create binary feature based on thalachh median
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Apply squared transformation to oldpeak
    df['oldpeak'] = df['oldpeak']**2
    
    # Perform one-hot-encoding on 'cp' column
    df = pd.get_dummies(df, columns=['cp'])
    
    # Transform 'caa' based on condition
    df['caa'] = df['caa'].apply(lambda x: 1 if x > 0 else 0)
    
    # Standardize selected columns using z-score normalization
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.8315190456174063}
4963;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4964;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4965;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Min-Max scaling for 'thalachh' and 'oldpeak'
    for col in ['thalachh', 'oldpeak']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    return df
";{0: 0.7506510088272383}
4966;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4967;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df['cp'] = pd.Categorical(df['cp'])
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
4968;"
    df = df[['age', 'cp', 'trtbps', 'chol', 'thalachh']]
    
    df.dropna(inplace=True)
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['chol'] = np.log1p(df['chol'])
    
    df = pd.get_dummies(df, columns=['cp'])
    
    df['age'] = (df['age'] - df['age'].mean()) / df['age'].std()
    df['trtbps'] = (df['trtbps'] - df['trtbps'].mean()) / df['trtbps'].std()
    df['chol'] = (df['chol'] - df['chol'].mean()) / df['chol'].std()
    
    return df
";{0: 0.8063348522140947}
4969;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp')
    
    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8792095044118824}
4970;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Creating a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Converting caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8621292124399537}
4971;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4972;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
4973;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Creating a binary column based on thalachh mean
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Applying log transformation to oldpeak column
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding the cp column
    df = pd.get_dummies(df, columns=['cp'])

    # Converting caa column to binary
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing selected columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4974;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    bins = [50, 110, 140, 200]
    labels = ['low', 'medium', 'high']
    df['thalachh_binned'] = pd.cut(df['thalachh'], bins=bins, labels=labels)
    
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp', 'thalachh_binned'])
    
    df['thalachh'] = (df['thalachh'] - df['thalachh'].mean()) / df['thalachh'].std()
    df['oldpeak'] = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()

    return df
";{0: 0.7774721629945511}
4975;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
4976;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].mean()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=(df['cp'] - df['cp'].mean()) / df['cp'].std(),
        caa=(df['caa'] > 0).astype(int)
    )
";{0: 0.7971028972322076}
4977;"
    df = df[['cp', 'oldpeak', 'caa']]
    df['caa'] = (df['caa'] > 0).astype(int)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df['cp_high'] = (df['cp'] == 3).astype(int)
    df.drop(columns=['cp'], inplace=True)  # Dropping the 'cp' column
    
    return df
";{0: 0.7071293272855097}
4978;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4979;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4980;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4981;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8682830585937997}
4982;"
    df = df[['thalachh', 'cp', 'caa', 'oldpeak']]
    
    # Filling missing values if any
    df.fillna(df.mean(), inplace=True)
    
    # Log transformation on 'thalachh' and 'oldpeak'
    df['thalachh'] = np.log1p(df['thalachh'])
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Binarize 'cp' based on specific values
    df['cp'] = df['cp'].apply(lambda x: 1 if x in [1, 2] else 0)

    return df
";{0: 0.7991136473844036}
4983;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3', 'thalachh_binary']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8698597509048328}
4984;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.8698597509048328}
4985;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']]
    
    # Filling missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Normalizing 'age' and 'thalachh' columns
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    # Log transformation on 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # Standard Scaling for 'age' and 'thalachh'
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.857373868537756}
4986;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
4987;"
    # Selecting and pre-processing columns
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    df['oldpeak'] = np.log1p(df['oldpeak'])
    df = pd.get_dummies(df, columns=['cp'])
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardizing numerical columns
    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8846618642144086}
4988;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4989;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)
    
    for col in ['oldpeak', 'caa', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8812964795990244}
4990;"
    return df[['age', 'sex', 'cp', 'thalachh', 'oldpeak']].assign(
        cp = df['cp'].astype('category'),
        thalachh = np.log1p(df['thalachh']),
        oldpeak = (df['oldpeak'] - df['oldpeak'].mean()) / df['oldpeak'].std()
    )
";{0: 0.7504161412358133}
4991;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    # Binarization of 'thalachh'
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].median(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)
    
    # Log transformation for 'oldpeak'
    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    # One-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)
    
    # Binary encoding for 'caa'
    df['caa'] = (df['caa'] > 0).astype(int)
    
    # Standard scaling for selected columns
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    return df
";{0: 0.8528171372868745}
4992;"
    # Select relevant columns
    df = df[['age', 'thalachh', 'chol', 'sex', 'cp']]
    
    # Fill missing values with mean
    df.fillna(df.mean(), inplace=True)
    
    # Perform min-max scaling for 'age', 'thalachh', and 'chol'
    for col in ['age', 'thalachh', 'chol']:
        df[col] = (df[col] - df[col].min()) / (df[col].max() - df[col].min())
    
    # Perform one-hot encoding for 'cp'
    df = pd.get_dummies(df, columns=['cp'])
    
    return df
";{0: 0.8273580586080586}
4993;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.877353896103896}
4994;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4995;"
    df = df[['age', 'sex', 'cp', 'thalachh', 'exng']]
    
    df.dropna(inplace=True)
    
    for col in ['age', 'thalachh']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
    
    df = pd.get_dummies(df, columns=['cp'], prefix='cp', drop_first=True)
    
    return df
";{0: 0.8073489471317273}
4996;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    # Creating binary feature
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    # Log transformation
    df['oldpeak'] = np.log1p(df['oldpeak'])

    # One-hot encoding
    df = pd.get_dummies(df, columns=['cp'], drop_first=True)

    # Binarizing categorical feature
    df['caa'] = (df['caa'] > 0).astype(int)

    # Standardization
    for col in ['oldpeak', 'cp_1', 'cp_2', 'cp_3', 'caa']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8621292124399537}
4997;"
    return df[['cp', 'thalachh', 'oldpeak', 'caa']].assign(
        thalachh_binary=(df['thalachh'] > df['thalachh'].median()).astype(int),
        oldpeak=np.log1p(df['oldpeak']),
        cp=df['cp'].astype('category'),
        caa=(df['caa'] > 0).astype(int)
    ).pipe(pd.get_dummies, columns=['cp'], prefix='cp').apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.8588919178749688}
4998;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]
    
    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])
    
    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.8846618642144086}
4999;"
    df = df[['cp', 'thalachh', 'oldpeak', 'caa']]

    df['thalachh_binary'] = np.where(df['thalachh'] > df['thalachh'].mean(), 1, 0)
    df.drop(columns=['thalachh'], inplace=True)

    df['oldpeak'] = np.log1p(df['oldpeak'])

    df = pd.get_dummies(df, columns=['cp'])

    df['caa'] = (df['caa'] > 0).astype(int)

    for col in ['oldpeak', 'cp_0', 'cp_1', 'cp_2', 'cp_3']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.892156009413472}
