4;"
  df = df[['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes', 
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.29173388953759577}
6;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.33997950173446867}
8;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3478899835796388}
9;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df.dropna(inplace=True)
  
  return df
";{0: 0.3004231504887496}
11;"
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Drop rows with NA values
  df = df.dropna()
  
  return df
";{0: 0.3178925139900749}
14;"
  # Select specific columns
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Drop rows with NA values
  df = df.dropna()
  
  return df
";{0: 0.3196316444248576}
16;"
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  df = df.dropna()
  
  return df
";{0: 0.3174047091120261}
17;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 
                      'Voice mail plan', 'Total intl minutes', 'Total night minutes', 'Total day charge']
  
  df = df[selected_columns]
  
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.304008706649156}
18;"
  # Select the 8 most important columns
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Drop rows with NA values
  df = df.dropna()
  
  return df
";{0: 0.3209694370669981}
22;"
  return df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna().pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))
";{0: 0.33934715821812594}
28;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 
                      'Voice mail plan', 'Total intl minutes', 'Total night minutes', 'Total day charge']
  
  df = df[selected_columns]
  
  df['International plan'] = np.where(df['International plan'] == 'yes', 1, 0)
  df['Voice mail plan'] = np.where(df['Voice mail plan'] == 'yes', 1, 0)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.29710031638816464}
29;"
  # Selecting important columns
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Dropping rows with NA values
  df = df.dropna()
  
  return df
";{0: 0.3143482101926066}
34;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  df['International plan'] = np.where(df['International plan'] == 'yes', 1, 0)
  df['Voice mail plan'] = np.where(df['Voice mail plan'] == 'yes', 1, 0)
  df.dropna(inplace=True)
  
  return df
";{0: 0.29996360446451903}
48;"
  df = df[['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes', 
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # Encode 'International plan' and 'Voice mail plan' as binary variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Perform one-hot encoding on the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.29992463287560417}
49;"
  # Selecting the desired columns
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Dropping rows with NA values
  df = df.dropna()
  
  return df
";{0: 0.3254998759532651}
50;"
  return df[['State', 'Account length', 'International plan', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']].dropna().pipe(lambda x: pd.get_dummies(x, columns=['State', 'International plan'], drop_first=True))
";{0: 0.3254998759532651}
54;"
  # Selecting important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3433673469387755}
58;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3444235588972432}
60;"
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                  'Total intl minutes', 'Total night minutes', 'Total day charge']
  
  df = df[cols_to_keep]
  
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3028183600695879}
62;"
  # Selecting important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.34096638655462186}
63;"
  # Select the specified columns from the dataset
  df = df[['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes', 
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # Encode 'International plan' and 'Voice mail plan' as binary variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Perform one-hot encoding on the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Return the preprocessed dataset
  return df
";{0: 0.2939087728810731}
69;"
  return df[['Account length', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']]
";{0: 0.28516939129126523}
76;"
  # Select the most important columns
  df = df[['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes', 
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]

  # Encode binary variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Perform one-hot encoding on the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.29568550244082153}
82;"
  # Select and re-order columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452059202059202}
84;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3410823411708803}
85;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3497043783956536}
87;"
# Continue the code from where it leaves off
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']

  # Encode binary variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Perform one-hot encoding on the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df[features]
";{0: 0.3272250466630357}
88;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34179197994987465}
89;"
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']

  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  df.dropna(inplace=True)

  return df[features]
";{0: 0.3225416535925459}
94;"
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']
  
  # Encode binary variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Perform one-hot encoding on the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df[features]
";{0: 0.3248620462743843}
100;"
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']

  # Encode 'International plan' and 'Voice mail plan' as binary variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  # Perform one-hot encoding on the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)

  return df[features]
";{0: 0.3255046165555089}
110;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3419278033794163}
113;"
  # Select relevant columns
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Drop rows with NA values
  df = df.dropna()
  
  return df
";{0: 0.3222827578925139}
114;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', dropping the first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.33997950173446867}
121;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']].assign(
                 **{'International plan': np.where(df['International plan'] == 'yes', 1, 0),
                    'Voice mail plan': np.where(df['Voice mail plan'] == 'yes', 1, 0)}
             ).dropna()
";{0: 0.3028183600695879}
123;"
  # Drop rows with missing values, select specific columns, and one-hot encode binary features
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']].assign(
                 **{'International plan': np.where(df['International plan'] == 'yes', 1, 0),
                    'Voice mail plan': np.where(df['Voice mail plan'] == 'yes', 1, 0)}
             ).dropna()
";{0: 0.30108535549051074}
130;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34790862290862296}
134;"
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']
  
  # Encoding binary variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # One-hot encoding for 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df[features]
";{0: 0.32926739774160285}
140;"
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Drop rows with NA values
  df = df.dropna()
  
  # Return preprocessed dataset
  return df
";{0: 0.3213493041135317}
142;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452059202059202}
143;"
  return pd.get_dummies(df[['State', 'Account length', 'International plan', 'Customer service calls',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes']].dropna(), columns=['State', 'International plan'], drop_first=True)
";{0: 0.31596480314670145}
145;"
  # Selecting relevant columns and converting categorical variables to numerical using one-hot encoding
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Dropping rows with missing values
  df = df.dropna()
  
  return df
";{0: 0.32539251399007496}
154;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', dropping the first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3444235588972432}
155;"
  # Selecting the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3461428571428572}
157;"
  return df[['State', 'Account length', 'International plan', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']].dropna().apply(lambda x: pd.to_numeric(x, errors='coerce')).fillna(0)
";{0: 0.25831861138219525}
159;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3391604010025063}
162;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']].assign(
                 **{'International plan': np.where(df['International plan'] == 'yes', 1, 0),
                    'Voice mail plan': np.where(df['Voice mail plan'] == 'yes', 1, 0)}
             ).fillna(0)
";{0: 0.29928932346823445}
164;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns 'International plan' and 'Voice mail plan' with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34165068712048574}
165;"
  return df[['Account length', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']].dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
";{0: 0.2887976377569138}
167;"
  # Selecting relevant columns
  df = df[['Account length', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]

  # Converting to numeric and filling NaN values with zero
  df = df.apply(pd.to_numeric, errors='coerce').fillna(0)

  return df
";{0: 0.282232408114761}
168;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  df['International plan'] = np.where(df['International plan'] == 'yes', 1, 0)
  df['Voice mail plan'] = np.where(df['Voice mail plan'] == 'yes', 1, 0)
  
  return df.fillna(0)
";{0: 0.3052135696504263}
171;"
  # Selecting specific columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns and dropping the first column of each one to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.34433525087887507}
174;"
  df = df[['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes', 
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # Encode 'International plan' and 'Voice mail plan' as binary variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Perform one-hot encoding on the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Return the preprocessed dataset
  return df
";{0: 0.2953829546701209}
175;"
  return pd.get_dummies(df[['Account length', 'International plan', 'Customer service calls',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes']], columns=['International plan'], drop_first=True).dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
";{0: 0.3375509355260382}
177;"
  # Selecting only the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Applying one-hot encoding to categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3384507622235119}
178;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']].assign(
                 **{'International plan': (df['International plan'] == 'yes').astype(int),
                    'Voice mail plan': (df['Voice mail plan'] == 'yes').astype(int)}
             ).dropna()
";{0: 0.30165618737355987}
180;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']].assign(
                 **{'International plan': df['International plan'].map({'yes': 1, 'no': 0}),
                    'Voice mail plan': df['Voice mail plan'].map({'yes': 1, 'no': 0})}
             ).fillna(0)
";{0: 0.3015844642249137}
190;"
  # Selecting relevant columns
  df = df[['Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode 'International plan' column
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Drop rows with missing values and convert to numeric type
  df = df.dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
  
  return df
";{0: 0.33501928995641794}
193;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, dropping first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3433673469387755}
195;"
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']
  
  df['International plan'] = df['International plan'].apply(lambda x: int(x == 'yes'))
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: int(x == 'yes'))
  
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  df.dropna(inplace=True)
  
  return df[features]
";{0: 0.32371599866933}
214;"
  # Selecting the specified columns for preprocessing
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3453463203463204}
215;"
  # Select relevant columns
  columns = ['State', 'Account length', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls']
  
  df_selected = df[columns].copy()
  
  # One-hot encode categorical columns
  df_selected = pd.get_dummies(df_selected, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values and convert to numeric type
  df_selected = df_selected.dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
  
  return df_selected
";{0: 0.319103103744086}
221;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns without dropping first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3340067050607374}
223;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with dropping first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34347619047619043}
226;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns and drop the first dummy variable for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34424331376386175}
228;"
  df = df[['Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode 'International plan' column
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Drop rows with missing values and convert to numeric type
  df = df.dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
  
  return df
";{0: 0.33810987026218814}
230;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', dropping the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop the rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34096638655462186}
232;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.33997950173446867}
233;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first dummy variables for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34433525087887507}
235;"
  columns = ['State', 'Account length', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls']
  
  df_selected = df[columns].copy()
  
  # One-hot encode categorical columns
  df_selected = pd.get_dummies(df_selected, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values and convert to numeric type
  df_selected = df_selected.dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
  
  return df_selected
";{0: 0.327192118226601}
237;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  return df
";{0: 0.3038229481352242}
244;"
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Fill NA values with 0
  df = df.fillna(0)
  
  return df
";{0: 0.32789251399007496}
250;"
  # Select important features
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']
  
  # Encode binary features as 0 and 1
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  # Perform one-hot encoding on the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)

  return df[features]
";{0: 0.3248620462743843}
251;"
  return df[['Account length', 'International plan', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']].dropna().apply(pd.to_numeric, errors='coerce').fillna(0).dropna()
";{0: 0.26028562940327643}
252;"
  # Select only the columns considered important for the model
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  return df
";{0: 0.30261875421847967}
260;"
  columns_to_select = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                       'Total intl minutes', 'Total night minutes', 'Total day charge']
  
  df_selected = df[columns_to_select].copy()
  
  df_selected['International plan'] = df_selected['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df_selected['Voice mail plan'] = df_selected['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  df_selected.dropna(inplace=True)
  
  return df_selected
";{0: 0.29928932346823445}
266;"
  # Keep selected columns
  df = df[['Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode 'International plan' column
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Handling missing values and conversion to numeric
  df = df.dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
  
  return df
";{0: 0.34413652334766476}
269;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop the first dummy variables for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34790862290862296}
270;"
  # Select the desired columns in the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop the first dummy variables for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34424331376386175}
272;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df['International plan'] = df['International plan'].map({'yes': 1, 'no': 0})
    df['Voice mail plan'] = df['Voice mail plan'].map({'yes': 1, 'no': 0})
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan',
               'Voice mail plan', 'Total intl minutes', 'Total night minutes', 'Total day charge']].fillna(0)
";{0: 0.3028183600695879}
273;"
  df = df[['Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode 'International plan' column
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Drop rows with missing values
  df = df.dropna()
  
  return df
";{0: 0.3399029159262016}
276;"
  return df[['Account length', 'International plan', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']].dropna().pipe(lambda x: pd.get_dummies(x, columns=['International plan'], drop_first=True))
";{0: 0.3400825810956585}
278;"
  df = df[['Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode 'International plan' column
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Handling missing values and conversion to numeric
  df = df.dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
  
  return df
";{0: 0.34413652334766476}
284;"
  df = df[['Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode 'International plan' column
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Handling missing values by filling NaN with mean of the column
  df = df.apply(lambda x: x.fillna(x.mean()) if x.dtype != 'O' else x, axis=0)
  
  return df
";{0: 0.3418181117062786}
285;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.34790862290862296}
287;"
  columns = ['State', 'Account length', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls']

  df_selected = df[columns].copy()

  # One-hot encode categorical columns
  df_selected = pd.get_dummies(df_selected, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)

  # Fill missing values with 0 and convert to numeric type
  df_selected = df_selected.apply(lambda x: pd.to_numeric(x, errors='coerce')).fillna(0)

  return df_selected
";{0: 0.3194841386001154}
290;"
  df = df[['Account length', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]

  df = df.apply(pd.to_numeric, errors='coerce').fillna(0)

  return df
";{0: 0.28893135888150845}
294;"
  df = df[['Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]

  # One-hot encode 'International plan' column
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

  # Drop rows with missing values, convert to numeric type, and fill NA values with 0
  df = df.dropna().apply(pd.to_numeric, errors='coerce').fillna(0)

  return df
";{0: 0.3399029159262016}
296;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df.fillna(df.mean(), inplace=True)  # Fill missing values with the mean of each column
  return df
";{0: 0.2968054042755751}
300;"
  # Selecting the most important columns for the model
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  return df
";{0: 0.30025189031315425}
302;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', dropping the first categories for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3444235588972432}
303;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']].assign(
                 **{'International plan': df['International plan'].apply(lambda x: 1 if x == 'yes' else 0),
                    'Voice mail plan': df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)}
             ).dropna()
";{0: 0.30217574286497284}
308;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns with dropping first dummy variables and handling NAs
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34347619047619043}
313;"
      return pd.get_dummies(df[['Account length', 'International plan', 'Customer service calls',
                                'Total day minutes', 'Total eve minutes', 'Total night minutes',
                                'Total intl minutes']], columns=['International plan'], drop_first=True).fillna(0)
";{0: 0.33930238843583843}
315;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df['Customer service calls'] = np.log1p(df['Customer service calls'])  # Applying log transformation to 'Customer service calls'
  
  return df
";{0: 0.25997256434020233}
316;"
  columns_to_select = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                       'International plan', 'Voice mail plan', 'Total intl minutes', 
                       'Total night minutes', 'Total day charge']
  
  df_selected = df[columns_to_select].copy()
  
  df_selected['International plan'] = np.where(df_selected['International plan'] == 'yes', 1, 0)
  df_selected['Voice mail plan'] = np.where(df_selected['Voice mail plan'] == 'yes', 1, 0)
  
  df_selected.dropna(inplace=True)
  
  return df_selected
";{0: 0.29996360446451903}
327;"
  return df[['Account length', 'International plan', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']].dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
";{0: 0.26208817498291187}
335;"
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Fill missing values with 0 and convert to numeric type
  df = df.apply(lambda x: pd.to_numeric(x, errors='coerce')).fillna(0)
  
  return df
";{0: 0.3174047091120261}
337;"
  # Select specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  # Convert categorical columns to binary
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Drop rows with null values
  df.dropna(inplace=True)
  
  return df
";{0: 0.2987324143140402}
338;"
  return df[['Account length', 'International plan', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']].fillna(0).pipe(lambda x: pd.get_dummies(x, columns=['International plan'], drop_first=True))
";{0: 0.33501928995641794}
343;"
  return df[['Account length', 'International plan', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']].dropna().apply(lambda x: pd.to_numeric(x, errors='coerce')).fillna(0).pipe(lambda x: pd.get_dummies(x, columns=['International plan'], drop_first=True))
";{0: 0.28630167218402514}
345;"
  return (df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
         .dropna()
         .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)))
";{0: 0.3381428571428572}
347;"
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']
  
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  df['Total day minutes'] = np.log1p(df['Total day minutes'])  # Applying log transformation to 'Total day minutes'
  df['Total eve minutes'] = np.log1p(df['Total eve minutes'])  # Applying log transformation to 'Total eve minutes'
  df['Total night minutes'] = np.log1p(df['Total night minutes'])  # Applying log transformation to 'Total night minutes'
  df['Total intl minutes'] = np.log1p(df['Total intl minutes'])  # Applying log transformation to 'Total intl minutes'
  
  df.dropna(inplace=True)

  return df[features]
";{0: 0.30671350507416084}
351;"
  # Selecting important columns for prediction
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables if needed
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452775149795017}
352;"
  return df[['State', 'International plan', 'Total day minutes', 'Total eve minutes',
             'Total night minutes', 'Total intl minutes', 'Customer service calls']
            ].astype({'State': 'category', 'International plan': 'category'
            }).dropna().apply(pd.to_numeric, errors='coerce').fillna(0)
";{0: 0.27188749452794403}
354;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Applying one-hot encoding to categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3366557116832539}
355;"
  df = df[['State', 'Account length', 'International plan', 'Customer service calls',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan'], drop_first=True)
  
  # Fill NA values with 0
  df = df.apply(lambda x: pd.to_numeric(x, errors='coerce')).fillna(0)
  
  return df
";{0: 0.32353353963110065}
356;"
  features = ['Total day minutes', 'Number vmail messages', 'Total eve minutes', 'Total intl minutes',
              'Customer service calls', 'International plan', 'Voice mail plan']
  
  # Convert 'yes' and 'no' to binary values
  df['International plan'] = df['International plan'].apply(lambda x: int(x == 'yes'))
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: int(x == 'yes'))
  
  # Perform one-hot encoding for the 'State' column
  df = pd.get_dummies(df, columns=['State'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df[features]
";{0: 0.32839209001623076}
363;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    features = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
   
    df['International plan'] = df['International plan'].apply(lambda x: int(x == 'yes'))
    df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: int(x == 'yes'))
   
    df = pd.get_dummies(df, columns=['State'], drop_first=True)
   
    df.dropna(inplace=True)
   
    return df[features]
";{0: 0.3008154293382318}
366;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  return df.fillna(0)
";{0: 0.29996360446451903}
369;"
  return df[['Account length', 'International plan', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes']
            ].assign(International_Plan=df['International plan'].map({'no': 0, 'yes': 1})
            ).drop('International plan', axis=1).apply(pd.to_numeric, errors='coerce').fillna(0)
";{0: 0.26193409717361815}
375;"
  # Selecting specific columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first dummy variable for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Remove rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.34433525087887507}
376;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3469447219447219}
381;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3375541125541126}
383;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34179197994987465}
384;"
  # Selecting relevant columns
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                  'Total intl minutes', 'Total night minutes', 'Total day charge']
  
  df = df[cols_to_keep]
  
  # Converting categorical variables to binary
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Dropping rows with NaN values
  df.dropna(inplace=True)
  
  return df
";{0: 0.29916022180067126}
386;"
  # Select the columns of interest
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical variables and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
392;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns and dropping the first category to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
395;"
  # Only keeping the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3408095238095238}
397;"
  return df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
";{0: 0.28699431287666577}
401;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables using one-hot encoding and dropping first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
402;"
  # Select the specified columns from the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical columns and drop the first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34179197994987465}
403;"
  # Keep only numerical columns and drop NA values
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  return df
";{0: 0.2844391444678389}
404;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Use one-hot encoding to encode categorical columns, dropping the first category to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34790862290862296}
406;"
  # Selecting important columns for analysis
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns while excluding first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=False)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3333743615443947}
407;"
  # Select relevant columns and handle missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform one-hot encoding for categorical columns, dropping the first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34165068712048574}
410;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical variables and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.346983039791259}
412;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables and dropping the first category for each to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3433673469387755}
414;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3470198146372644}
415;"
  # Select only the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3433673469387755}
417;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Applying one-hot encoding to categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452775149795017}
418;"
  return (df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
         .dropna()
         .assign(**pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True))
         .drop(['International plan', 'Voice mail plan'], axis=1))
";{0: 0.3452775149795017}
421;"
  # Select the required columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3444235588972432}
423;"
  # Selecting relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns with dropping first dummy variables and handling NAs
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3426285083569852}
425;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0) # Convert 'yes' to 1 and 'no' to 0
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  df.dropna(inplace=True)
  
  return df
";{0: 0.2558286158286158}
426;"
  # Select the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3444235588972432}
429;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables and dropping the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3433673469387755}
434;"
  # Selecting relevant columns and dropping irrelevant ones
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3488095238095238}
437;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables if needed
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with any NA values
  df = df.dropna()
  
  return df
";{0: 0.3433673469387755}
441;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  return df
";{0: 0.2844391444678389}
442;"
  # Select the required columns and drop rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Apply one-hot encoding to encode categorical columns, dropping the first categories to address multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3451313628899836}
444;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # Perform one-hot encoding on categorical columns and drop the first dummy variable for each
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Remove rows with missing values
    df.dropna(inplace=True)

    return df
";{0: 0.34096638655462186}
446;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34274891774891775}
453;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables without dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3356778904467545}
459;"
  # Selecting 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Handling missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452059202059202}
461;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3408095238095238}
463;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Apply one-hot encoding for categorical columns, dropping the first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3452059202059202}
464;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452775149795017}
467;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34347619047619043}
470;"
  # Keep the same 8 selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', using get_dummies with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows containing any NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452059202059202}
474;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables using one-hot encoding and dropping the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3408095238095238}
475;"
  # Selecting relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding with dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452775149795017}
481;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Apply one-hot encoding with dropping first dummy variables for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34165068712048574}
482;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical variables and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
484;"
  # Define columns to keep
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                  'Total intl minutes', 'Total night minutes', 'Total day charge']

  # Select relevant columns
  df = df[cols_to_keep]

  # Convert categorical variables to binary
  df['International plan'] = (df['International plan'] == 'yes').astype(int)
  df['Voice mail plan'] = (df['Voice mail plan'] == 'yes').astype(int)
  
  # Drop rows with NaN values
  df.dropna(inplace=True)

  return df
";{0: 0.2980279409079113}
486;"
  # Return dataframe with 8 selected columns and preprocess them
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'International plan', 'Voice mail plan', 'Total intl minutes',
             'Total night minutes', 'Total day charge']].assign(
                 **{
                     'International plan': df['International plan'].map({'yes': 1, 'no': 0}),
                     'Voice mail plan': df['Voice mail plan'].map({'yes': 1, 'no': 0})
                 }
             ).fillna(0)
";{0: 0.2987324143140402}
491;"
  # Keep the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3391604010025063}
494;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical variables dropping the first category, and normalize the numeric columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5136320073295448}
497;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Use one-hot encoding with dropping first dummy variable
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.3452775149795017}
498;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical variables ('International plan' and 'Voice mail plan') and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34433525087887507}
501;"
  return df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna().pipe(lambda x: pd.get_dummies(x, columns=['International plan', 'Voice mail plan'], drop_first=True))
";{0: 0.3461428571428572}
504;"
  # Selecting only the specified columns
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                  'Total intl minutes', 'Total night minutes', 'Total day charge']
  df = df[cols_to_keep]
  
  # Converting categorical variables to binary
  df['International plan'] = df['International plan'].map({'yes': 1, 'no': 0})
  df['Voice mail plan'] = df['Voice mail plan'].map({'yes': 1, 'no': 0})
  
  # Fill NaN values with 0
  df.fillna(0, inplace=True)
  
  return df
";{0: 0.30223381487426426}
506;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode the categorical variables, dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3391604010025063}
508;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 
                      'Voice mail plan', 'Total intl minutes', 'Total night minutes', 'Total day charge']

  df = df[selected_columns]

  df['International plan'] = (df['International plan'] == 'yes').astype(int)
  df['Voice mail plan'] = (df['Voice mail plan'] == 'yes').astype(int)

  return df.dropna()
";{0: 0.2997367184747289}
509;"
  # Select columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.346983039791259}
513;"
    cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                  'Total intl minutes', 'Total night minutes', 'Total day charge']

    # Select relevant columns and convert categorical variables to binary
    df = df[cols_to_keep].assign(
             **{'International plan': np.where(df['International plan'] == 'yes', 1, 0),
                'Voice mail plan': np.where(df['Voice mail plan'] == 'yes', 1, 0)}
         )
         
    # Fill NaN values with 0
    df.fillna(0, inplace=True)

    return df
";{0: 0.3005212000037547}
516;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34064625850340136}
520;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  return df.dropna(subset=['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                           'International plan', 'Voice mail plan', 'Total intl minutes', 
                           'Total night minutes', 'Total day charge'])
";{0: 0.30108535549051074}
522;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3460884353741497}
523;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables using one-hot encoding and dropping the first category to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34096638655462186}
527;"
  # Define the columns to keep in the dataset
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'International plan', 'Voice mail plan', 'Total intl minutes',
                  'Total night minutes', 'Total day charge']

  # Extract the desired columns
  df = df[cols_to_keep]

  # Convert categorical variables to binary
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3058195865323251}
528;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 
                        'Voice mail plan', 'Total intl minutes', 'Total night minutes', 'Total day charge']

    df = df[selected_columns]

    df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
    df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

    return df.dropna()
";{0: 0.29902470514341545}
531;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3478899835796388}
532;"
  # Keep selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3426285083569852}
534;"
  return df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna().astype({'International plan': 'category', 'Voice mail plan': 'category'}).pipe(lambda x: pd.get_dummies(x, columns=['International plan', 'Voice mail plan'], drop_first=True))
";{0: 0.335989010989011}
535;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Applying one-hot encoding to categorical columns with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34165068712048574}
539;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns, dropping the first category to address multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
546;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns dropping first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3408095238095238}
547;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encoding for categorical columns with dropping the first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3470198146372644}
548;"
  # Selecting important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3408095238095238}
549;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  df['International plan'] = np.where(df['International plan'] == 'yes', 1, 0)
  df['Voice mail plan'] = np.where(df['Voice mail plan'] == 'yes', 1, 0)
  
  return df.dropna(subset=['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                           'International plan', 'Voice mail plan', 'Total intl minutes', 
                           'Total night minutes', 'Total day charge'])
";{0: 0.3004231504887496}
550;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3453463203463204}
551;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  return df.fillna(df.mean())
";{0: 0.2998528624933119}
552;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns dropping the first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3470198146372644}
554;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
           'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', using get_dummies with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows containing any NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34347619047619043}
555;"
  # Keep relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  # One-hot encode categorical columns
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Drop rows with missing values
  df = df.dropna()
  
  return df
";{0: 0.3027742764576707}
556;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # One-hot encoding for categorical columns with dropping the first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34237274220032843}
559;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  df['International plan'] = np.where(df['International plan'] == 'yes', 1, 0)
  df['Voice mail plan'] = np.where(df['Voice mail plan'] == 'yes', 1, 0)

  return df.dropna()
";{0: 0.304008706649156}
560;"
  # Selecting the specified columns and dropping rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Applying one-hot encoding to encode categorical columns, dropping the first categories to address multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3460884353741497}
562;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34250321750321755}
563;"
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                  'Total intl minutes', 'Total night minutes', 'Total day charge']
  df = df[cols_to_keep]
  
  # Converting categorical variables to binary
  df['International plan'] = df['International plan'].map({'yes': 1, 'no': 0})
  df['Voice mail plan'] = df['Voice mail plan'].map({'yes': 1, 'no': 0})
  
  # Fill NaN values with 0
  df.fillna(0, inplace=True)
  
  return df
";{0: 0.298182018717205}
564;"
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'International plan', 'Voice mail plan', 'Total intl minutes',
                  'Total night minutes', 'Total day charge']

  # Select desired columns
  df = df[cols_to_keep]

  # Convert binary categorical variables
  df['International plan'] = (df['International plan'] == 'yes').astype(int)
  df['Voice mail plan'] = (df['Voice mail plan'] == 'yes').astype(int)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.305228264187732}
567;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical columns and drop first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
570;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encode categorical variables and normalize numeric columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5108591355527874}
571;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform one-hot encoding for categorical columns with dropping first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34358076563958917}
572;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34424331376386175}
573;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop first dummy variables for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3398005148005148}
575;"
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                  'Total intl minutes', 'Total night minutes', 'Total day charge']
  
  df = df[cols_to_keep]
  
  # Converting categorical variables to binary
  df['International plan'] = (df['International plan'] == 'yes').astype(int)
  df['Voice mail plan'] = (df['Voice mail plan'] == 'yes').astype(int)
  
  # Dropping rows with NaN values
  df.dropna(inplace=True)
  
  return df
";{0: 0.2987324143140402}
576;"
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'International plan', 'Voice mail plan', 'Total intl minutes',
                  'Total night minutes', 'Total day charge']

  # Select the desired columns
  df = df[cols_to_keep]

  # Convert binary categorical variables to binary
  df['International plan'] = (df['International plan'] == 'yes').astype(int)
  df['Voice mail plan'] = (df['Voice mail plan'] == 'yes').astype(int)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.30768225191779336}
578;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns, dropping the first categories for each to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34096638655462186}
580;"
  # Selecting specific columns from the dataset and dropping rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encoding for categorical columns with dropping the first categories to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34433525087887507}
586;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3375541125541126}
588;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop the first category for each to manage multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34165068712048574}
590;"
  # Select predefined important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', drop the first encoded column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with any missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34358076563958917}
591;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  df['International plan'] = df['International plan'].map({'yes': 1, 'no': 0})
  df['Voice mail plan'] = df['Voice mail plan'].map({'yes': 1, 'no': 0})
  
  return df.fillna(0)
";{0: 0.2997367184747289}
592;"
  # Selecting the columns of interest
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3426285083569852}
593;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with dropping the first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34358076563958917}
595;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns and dropping the first column of each one to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.34179197994987465}
596;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns, dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3381428571428572}
600;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.33934715821812594}
603;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']].assign(
                 **{'International plan': df['International plan'].eq('yes').astype(int),
                    'Voice mail plan': df['Voice mail plan'].eq('yes').astype(int)}
             ).fillna(0)
";{0: 0.2998528624933119}
604;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3433673469387755}
606;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables if needed
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Handling missing values if needed
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.34179197994987465}
608;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df.dropna(inplace=True)  # Drop rows with missing values
  
  return df
";{0: 0.34165068712048574}
614;"
    selected_features = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 
                         'Voice mail plan', 'Total intl minutes', 'Total night minutes', 'Total day charge']

    # Select relevant columns and convert categorical variables to binary
    df = df[selected_features].assign(
             **{'International plan': np.where(df['International plan'] == 'yes', 1, 0),
                'Voice mail plan': np.where(df['Voice mail plan'] == 'yes', 1, 0)}
         )
         
    # Fill NaN values with 0
    df.fillna(0, inplace=True)

    return df
";{0: 0.2987324143140402}
620;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']]
  
  # One-hot encode categorical columns
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Drop rows with missing values
  df = df.dropna()

  return df
";{0: 0.30223381487426426}
622;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Dropping rows with NaN values
  df = df.dropna()
  
  return df
";{0: 0.26410571884256095}
623;"
  # Selecting the 8 specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3488095238095238}
626;"
  # Select the desired columns and convert binary categorical variables to binary
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
           'Total intl minutes', 'Total night minutes', 'Total day charge']]
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.2985906708696745}
632;"
  # Selecting relevant columns and handling missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Encoding categorical variables using one-hot encoding and dropping first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  return df
";{0: 0.5085556066504276}
634;"
  # Select relevant columns and drop rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3433673469387755}
636;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' while dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3426285083569852}
638;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with any missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34424331376386175}
642;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Selecting specific columns and dropping rows with missing values
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
    
    # One-hot encoding for categorical columns with dropping the first categories to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    return df
";{0: 0.33934715821812594}
647;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()

  # One-hot encode the categorical columns and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34424331376386175}
648;"
    df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
    df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)
    
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan',
               'Voice mail plan', 'Total intl minutes', 'Total night minutes', 'Total day charge']].fillna(0)
";{0: 0.3676555065321837}
655;"
  # Keeping only specified columns and removing rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical variables while dropping first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34358076563958917}
659;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', keeping all columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3393735236725891}
661;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first column of each one
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3426285083569852}
663;"
  return (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
         .dropna())
";{0: 0.2864307738515883}
666;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables, dropping the first category for each feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3488095238095238}
669;"
  # Choose the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with any missing values
  df = df.dropna()
  
  return df
";{0: 0.3452775149795017}
670;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with any missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.346983039791259}
671;"
  return pd.get_dummies(df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
";{0: 0.34433525087887507}
672;"
  # Selecting specific columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables and dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
673;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding with drop_first parameter set to True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34165068712048574}
674;"
  # Selecting specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns while excluding first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=False)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3384507622235119}
676;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical variables while dropping first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452775149795017}
678;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', including all dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=False)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.33923312353218893}
682;"
  # Keep only the selected important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34165068712048574}
687;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding of categorical columns including all dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=False)

  # Remove rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3375033938024592}
688;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables after dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3444235588972432}
689;"
  # Select the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34358076563958917}
690;"
# Improved version with more detailed comments
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Selecting the relevant columns and dropping rows with missing values
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
             'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
    
    # One-hot encoding for categorical columns with dropping the first categories to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    return df
";{0: 0.3452059202059202}
691;"
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns without dropping first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34957993619283945}
692;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.3363999455265972}
693;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns ('International plan' and 'Voice mail plan') dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3461428571428572}
695;"
  selected_cols = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df_selected = df[selected_cols].dropna()
  df_selected['International plan'] = df_selected['International plan'].astype('category')
  df_selected['Voice mail plan'] = df_selected['Voice mail plan'].astype('category')
  df_preprocessed = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df_preprocessed
";{0: 0.34015151515151515}
696;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns 'International plan' and 'Voice mail plan'
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.3383624542051438}
697;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.3383624542051438}
700;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns with drop_first option
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3426285083569852}
701;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns ('International plan' and 'Voice mail plan') while dropping the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34237274220032843}
705;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34250321750321755}
707;"
  # Select the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34433525087887507}
710;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.346983039791259}
711;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  return df
";{0: 0.2917562176385705}
712;"
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
                  'Total intl minutes', 'Total night minutes', 'Total day charge']
  
  df = df[cols_to_keep]
  
  # Converting categorical variables to binary
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Dropping rows with NaN values
  df.dropna(inplace=True)
  
  return df
";{0: 0.29996360446451903}
715;"
  cols_to_keep = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'International plan', 'Voice mail plan', 'Total intl minutes',
                  'Total night minutes', 'Total day charge']

  # Extract the desired columns
  df = df[cols_to_keep]

  # Convert categorical variables to binary
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3034382966669814}
717;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan', 'Voice mail plan',
             'Total intl minutes', 'Total night minutes', 'Total day charge']].assign(
                 **{'International plan': (df['International plan'] == 'yes').astype(int),
                    'Voice mail plan': (df['Voice mail plan'] == 'yes').astype(int)}
             ).fillna(0)
";{0: 0.3005212000037547}
723;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', using get_dummies with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows containing any NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3426285083569852}
725;"
    df['International plan'] = df['International plan'].map({'yes': 1, 'no': 0})
    df['Voice mail plan'] = df['Voice mail plan'].map({'yes': 1, 'no': 0})
    
    # Selecting and ordering important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'International plan',
             'Voice mail plan', 'Total intl minutes', 'Total night minutes', 'Total day charge']]
    
    return df.fillna(0)
";{0: 0.30524369807282675}
727;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables
  df['International plan'] = df['International plan'].apply(lambda x: 1 if x == 'yes' else 0)
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)
  
  # Handling missing values by filling with mean
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.2604906204906205}
731;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding with dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3461428571428572}
733;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical variables dropping the first category, normalize the numeric columns, and handle missing values
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.5107120361687661}
734;"
  # Select 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34179197994987465}
735;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first category to address multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34705513784461156}
740;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns while including all dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=False)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3341787184777839}
744;"
  # Select the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', using get_dummies with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows containing any NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34179197994987465}
748;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical columns, dropping the first categories for each to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34424331376386175}
751;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', drop first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.35158730158730156}
752;"
  # Retain only the 8 most important columns in the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', dropping the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.346031746031746}
754;"
# Version 3 includes all improvements from version 2 and standardizes numeric columns
from sklearn.preprocessing import StandardScaler

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df.dropna(inplace=True)

    scaler = StandardScaler()
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

    return df
";{0: 0.5107120361687661}
757;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Apply one-hot encoding for the categorical columns, dropping the first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3433673469387755}
758;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables with dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34064625850340136}
759;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns and dropping the first column of each to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.346983039791259}
768;"
  # Select the specified columns from the DataFrame
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first category to address multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452059202059202}
784;"

  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df

";{0: 0.3408095238095238}
789;"
# Improved version of `select_columns_and_return_dataframe_v2`.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns with dropping first dummy variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.34274891774891775}
791;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns and drop the first dummy variable to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Remove rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3408095238095238}
793;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
  return (df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
         .dropna()
         .assign(**pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True))
         .drop(['International plan', 'Voice mail plan'], axis=1))
";{0: 0.34179197994987465}
794;"
# Using dropna to remove rows with missing values, one-hot encoding categorical columns, and dropping the first column of each
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna().pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))
";{0: 0.34433525087887507}
797;"
  # Select specific columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical variables, dropping the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
798;"
  # Select specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', dropping the first categories for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34179197994987465}
803;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', dropping the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452775149795017}
810;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encode categorical features and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34150358773646444}
819;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34165068712048574}
820;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical columns and drop first categories to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34274891774891775}
826;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
      'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes',
                                                            'Total eve minutes', 'Total night minutes',
                                                            'Total intl minutes', 'Customer service calls']] - df[['Account length',
                                                            'Total day minutes', 'Total eve minutes',
                                                            'Total night minutes', 'Total intl minutes',
                                                            'Customer service calls']].mean()) / df[['Account length',
                                                                                                    'Total day minutes',
                                                                                                    'Total eve minutes',
                                                                                                    'Total night minutes',
                                                                                                    'Total intl minutes',
                                                                                                    'Customer service calls']].std()

  return df
";{0: 0.5135436993111767}
835;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34347619047619043}
853;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Select the specified columns
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding with drop_first parameter set to True
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.3444235588972432}
856;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns while dropping the first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.33934715821812594}
857;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Fill missing values with the mean of each column
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.2923550200337802}
871;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables, dropping the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34358076563958917}
877;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3426285083569852}
880;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
885;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables while dropping the first category, normalize numeric columns, and handle missing values by filling with mean
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.5077615619854152}
886;"
  # Selecting relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns with drop_first parameter set to True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452775149795017}
888;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encoding for categorical features with dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3444235588972432}
892;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df.dropna(inplace=True)

    return df
";{0: 0.3478899835796388}
895;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3451313628899836}
897;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop the first category for each to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452775149795017}
915;"
  # Select necessary columns and handle missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Use one-hot encoding and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34250321750321755}
917;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns with dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34274891774891775}
918;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical variables and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34015151515151515}
919;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding with drop_first parameter set to True
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.3506113256113257}
920;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical columns, drop first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3461428571428572}
922;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical columns with dropping first category of each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34424331376386175}
924;"
  # Selecting the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34250321750321755}
932;"
  # Keep only selected columns in the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
936;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3461428571428572}
938;"
  # Selecting relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.33997950173446867}
947;"
  # Selecting required columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Applying one-hot encoding to categorical features and dropping one dummy variable for each column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Removing rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.346031746031746}
950;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical variables, dropping the first category for each feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3470198146372644}
959;"
  # Selecting specific columns from the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical variables and drop the first category for each to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3426285083569852}
961;"
  # Selecting the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables with one-hot encoding and dropping the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3433673469387755}
962;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, dropping the first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Fill missing values with the mean of each column
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.3391604010025063}
965;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34433525087887507}
969;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first category
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.34096638655462186}
977;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first category to handle multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.3433673469387755}
985;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.346031746031746}
987;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452059202059202}
989;"
  # Return a dataframe with the selected columns, one-hot encoded for categorical features and dropping NA values
  return pd.get_dummies(df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
";{0: 0.3383520074696545}
993;"
# Improved version with additional preprocessing steps
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
  # Select specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns while dropping the first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
995;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform one-hot encoding for categorical columns, dropping the first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3433673469387755}
998;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns without dropping the first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3356778904467545}
1000;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # Apply one-hot encoding for categorical variables, dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
1004;"
  # Extracting and keeping only the selected columns along with the target column
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical features with dropping first categories to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34433525087887507}
1015;"
  # Selecting the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns with dropping first dummy variables and handling NAs
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34250321750321755}
1016;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the numeric columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5101748349869235}
1019;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df.dropna(inplace=True)
  
    return df
";{0: 0.3460884353741497}
1021;"
  # Selecting the desired columns and dropping rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # One-hot encoding for categorical columns with dropping the first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452775149795017}
1025;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform one-hot encoding for categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.33934715821812594}
1026;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical features and drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3461428571428572}
1032;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Apply one-hot encoding to categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3444235588972432}
1033;"
# Further data prepossessing steps can be added in `select_columns_and_return_dataframe_v3` if needed.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
    # One-hot encoding the categorical columns with drop_first=True to handle dummy variable trap
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    # Dropping rows with missing values
    df.dropna(inplace=True)
  
    return df
";{0: 0.3461951447245565}
1042;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical variables while dropping first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3470198146372644}
1047;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34274891774891775}
1052;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical features with dropping first categories to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34424331376386175}
1057;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Encoding categorical variables and dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
1059;"
  # Selecting specific columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' with dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Removing rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3426285083569852}
1064;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Use pandas factorize method to encode binary categorical variables
  df['International plan'] = pd.factorize(df['International plan'])[0]
  df['Voice mail plan'] = pd.factorize(df['Voice mail plan'])[0]
  
  return df
";{0: 0.3521404521404522}
1069;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns with drop_first=True and drop rows with missing values
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df.dropna(inplace=True)
  
  return df
";{0: 0.3460884353741497}
1071;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical variables with drop_first=True to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3469447219447219}
1081;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
1083;"
  # Selecting the important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34347619047619043}
1087;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Apply one-hot encoding to categorical columns and drop first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.346031746031746}
1089;"
  # Keep only selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34347619047619043}
1090;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34790862290862296}
1094;"
  # Selecting the specified columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding on categorical columns and dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3398005148005148}
1098;"
  # Selecting only the specified 8 columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns, dropping the first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3426285083569852}
1106;"
from sklearn.preprocessing import StandardScaler

def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df.dropna(inplace=True)

    scaler = StandardScaler()
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

    return df
";{0: 0.5134517621961634}
1108;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
1111;"
  # Select the specified columns from the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3451313628899836}
1115;"
# Keep selected columns, drop NA values, one-hot encode categorical variables with drop_first
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    return (df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
           .dropna()
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)))
";{0: 0.34150358773646444}
1120;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform one-hot encoding for categorical variables and drop the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
1125;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical columns and drop the first category for each to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3461428571428572}
1126;"
  # Select the 8 most important columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns and drop first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Drop rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.3470198146372644}
1127;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical features with dropping the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34015151515151515}
1138;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform feature engineering by creating new features based on existing data
  
  # Let's calculate the total charges for each period of the day
  df['Total day charge'] = df['Total day minutes'] * 0.5  # assuming day charge rate
  df['Total eve charge'] = df['Total eve minutes'] * 0.3  # assuming eve charge rate
  df['Total night charge'] = df['Total night minutes'] * 0.1  # assuming night charge rate
  df['Total intl charge'] = df['Total intl minutes'] * 0.2  # assuming intl charge rate
  
  df.drop(['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes'], axis=1, inplace=True)
  
  # One-hot encode the remaining categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3475593784893734}
1143;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # Perform one-hot encoding on categorical columns and drop the first dummy variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Drop rows with missing values
    df.dropna(inplace=True)

    return df
";{0: 0.33997950173446867}
1152;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()

  # One-hot encode the categorical columns and avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3426285083569852}
1167;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns while dropping the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34250321750321755}
1178;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3479265216020183}
1203;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # Perform one-hot encoding on categorical columns and include all dummy variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=False)

    # Drop rows with missing values
    df.dropna(inplace=True)

    return df
";{0: 0.3384507622235119}
1207;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return (df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
           .dropna()
           .assign(**pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True))
           .drop(['International plan', 'Voice mail plan'], axis=1))
";{0: 0.34096638655462186}
1218;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Use one-hot encoding for categorical columns, dropping the first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3460884353741497}
1220;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding on categorical columns with drop_first set to True
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.3391604010025063}
1230;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with dropping first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3426285083569852}
1231;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34165068712048574}
1235;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical columns and drop the first column of each to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Drop rows with missing values
    df.dropna(inplace=True)

    return df
";{0: 0.3444235588972432}
1236;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3452775149795017}
1239;"
  return (df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
         .dropna()
         .join(pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True))
         .drop(['International plan', 'Voice mail plan'], axis=1))
";{0: 0.3408095238095238}
1240;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical columns with dropping first dummy variables and handle missing values
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Remove rows with missing values
    df.dropna(inplace=True)

    return df
";{0: 0.34237274220032843}
1244;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' with dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Removing rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34424331376386175}
1245;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', dropping the first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3452059202059202}
1246;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34015151515151515}
1251;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5161914882235606}
1255;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns while dropping the first category to prevent multicollinearity, and drop NA values
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
  
  return df
";{0: 0.3411172161172161}
1256;"
# Improved version of select_columns_and_return_dataframe_v2
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return pd.get_dummies(df[['Account length', 'International plan', 'Voice mail plan',
                              'Total day minutes', 'Total eve minutes', 'Total night minutes',
                              'Total intl minutes', 'Customer service calls']],
                          columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
";{0: 0.3444235588972432}
1259;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping missing values
  df.dropna(inplace=True)

  return df
";{0: 0.34424331376386175}
1270;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()

  # One-hot encode the categorical variables dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  return df
";{0: 0.3433673469387755}
1271;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3433673469387755}
1273;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns, dropping the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3451313628899836}
1274;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5144143686382219}
1277;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns with dropping first dummy variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.34165068712048574}
1278;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34347619047619043}
1281;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical features and dropping one dummy variable for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Dropping rows with missing values
  df.dropna(inplace=True)

  return df
";{0: 0.34433525087887507}
1283;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Feature engineering by creating new features based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  # One-hot encoding categorical variables and dropping first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3344993313671841}
1289;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical features, dropping the first category for each feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3408095238095238}
1291;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True and drop rows with missing values
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df.dropna(inplace=True)
  
  return df

";{0: 0.3408095238095238}
1293;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform feature engineering by creating new features based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3304693649502376}
1296;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()

  # One-hot encode the categorical variables dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  return df
";{0: 0.34347619047619043}
1298;"
  # Selecting the desired columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan', dropping the first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34250321750321755}
1299;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Feature engineering: create new features based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  # One-hot encode categorical variables and drop first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3327461468719095}
1300;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first dummy variables for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Impute missing values with the mean of each column
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.3408095238095238}
1301;"
  # Selecting specific columns and dropping rows with missing values
  return (df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
         .dropna()
         
         # One-hot encoding categorical columns and dropping original columns
         .join(pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True))
         .drop(['International plan', 'Voice mail plan'], axis=1))
";{0: 0.3426285083569852}
1304;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.346983039791259}
1307;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Select desired columns
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns 'International plan' and 'Voice mail plan' dropping the first column
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Remove rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.34347619047619043}
1309;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform one-hot encoding with dropping the first category for each feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3488095238095238}
1310;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform one-hot encoding for categorical columns without dropping the first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  return df
";{0: 0.34101024311752776}
1317;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables dropping the first category, fill missing values with mean
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.34424331376386175}
1320;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical columns and drop_first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34424331376386175}
1333;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns without dropping the first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=False)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3375033938024592}
1338;"
# Completed function to preprocess the dataset
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Selecting the relevant columns
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
             'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding categorical columns 'International plan' and 'Voice mail plan' with dropping the first dummy variable
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.34358076563958917}
1339;"
  # Select specified columns from the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34250321750321755}
1344;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns with dropping the first category to address multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34165068712048574}
1348;"
    df = df[['Account length', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding on categorical columns while dropping the first category
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.3389661233620965}
1357;"
  # Keep selected columns
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns without dropping first dummy variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34961260258728616}
1365;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Implement one-hot encoding for categorical columns ('International plan' and 'Voice mail plan') while dropping the first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3408095238095238}
1373;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode 'International plan' and 'Voice mail plan' with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34790862290862296}
1376;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Fill missing values with the mean of each column
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.3061761364953461}
1377;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns with dropping the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34150358773646444}
1382;"
  # Selecting subset of columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns 'International plan' and 'Voice mail plan', dropping the first category for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Removing rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.33997950173446867}
1384;"
  # Selecting specific columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns 'International plan' and 'Voice mail plan' with dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Removing rows containing missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3383520074696545}
1391;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34790862290862296}
1396;"
  # Selecting specific columns from the dataframe and dropping rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()
  
  # Applying one-hot encoding to categorical variables while dropping the first category for each feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3470198146372644}
1397;"
  # Selecting the specified important columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop the first category for each variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Removing rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3426285083569852}
1401;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical variables, dropping first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452059202059202}
1404;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding and dropping the first category for each column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3460884353741497}
1408;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True to avoid multicollinearity, then fill missing values with mean
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.3452775149795017}
1411;"
  # Selecting relevant columns and dropping rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # One-hot encoding for categorical columns while dropping the first categories
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3408095238095238}
1419;"
# Use the original code provided in `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df.dropna(inplace=True)
    
    return df
";{0: 0.3452059202059202}
1423;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables with dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
1430;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for the categorical features, dropping the first category to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3411172161172161}
1431;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Apply one-hot encoding to categorical variables and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34347619047619043}
1435;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df.dropna(inplace=True)

    # Additional pre-processing steps can be added here

    return df
";{0: 0.3436813186813187}
1436;"
  # Keep only the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Remove missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.34064625850340136}
1437;"
  return (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
         .dropna()
         .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)))
";{0: 0.34347619047619043}
1438;"
  return df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna().pipe(lambda x: pd.get_dummies(x, columns=['International plan', 'Voice mail plan'], drop_first=True))
";{0: 0.3452775149795017}
1441;"
  # Select the specified columns and drop rows with missing values
  return (df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
         .dropna()
         # One-hot encode categorical columns and drop first dummy variables for each
         .join(pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True))
         .drop(['International plan', 'Voice mail plan'], axis=1))
";{0: 0.34972276581865624}
1443;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df.dropna(inplace=True)

    return df
";{0: 0.34179197994987465}
1447;"
  return pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], drop_first=True).dropna()
";{0: 0.3043725148230281}
1448;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical columns with dropping first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34358076563958917}
1450;"
  # Selecting the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical variables and dropping the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Optionally normalizing numeric columns for standardization
  # df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  return df
";{0: 0.34150358773646444}
1451;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, dropping the first categories for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
  return df
";{0: 0.3433673469387755}
1456;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns, drop the first category, normalize numeric columns, and handle missing values
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.5110004283821764}
1463;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5119573661812195}
1467;"
  # Select 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5144143686382219}
1471;"
  # Select the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5100179722418254}
1474;"
  # Select the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scale numerical columns using Min-Max scaling
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4829728334426321}
1481;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5161914882235606}
1482;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first category for each feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34347619047619043}
1483;"
  # Keep the same subset of columns to work with
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Apply Min-Max scaling to numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.48147366147366144}
1485;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Use pandas' get_dummies function to perform one-hot encoding on categorical variables and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3470198146372644}
1488;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34347619047619043}
1491;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.511136251811718}
1492;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.33543071063029883}
1494;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5091879501667703}
1499;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5124624166862699}
1500;"
  # Selecting the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5101748349869235}
1501;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical variables dropping the first category
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.34096638655462186}
1502;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4829728334426321}
1503;"
  # Select the 8 most important columns and convert categorical columns using one-hot encoding
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
  df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5118369567892869}
1510;"
  # Selecting the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4822885328767682}
1511;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding and normalization
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.516228263069566}
1514;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables while dropping the first category, normalize numeric columns, handle missing values by filling with mean, and create new feature columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  df.fillna(df.mean(), inplace=True)
  
  # Create new feature columns based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  return df
";{0: 0.5066491865750145}
1525;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Apply Min-Max scaling to numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4874650034650035}
1528;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.508368849434808}
1532;"
  # Select the required columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3461428571428572}
1539;"
  # Selecting the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5118369567892869}
1541;"
  # Select only the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5110004283821764}
1542;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Feature engineering by creating new features based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  # One-hot encode categorical variables and drop first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.32922041980255823}
1550;"
  # Keep only the selected important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scale numerical columns using Min-Max scaling
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4829728334426321}
1558;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
    
    # Perform one-hot encoding for categorical features with dropping the first category
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    return df
";{0: 0.3433673469387755}
1564;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5144859634118035}
1569;"
  # Select the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns by subtracting mean and dividing by standard deviation
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5090089632328165}
1570;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5107120361687661}
1572;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns by subtracting mean and dividing by standard deviation
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5136320073295448}
1580;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
             'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
    
    # One-hot encoding categorical columns, dropping first categories to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    return df
";{0: 0.33997950173446867}
1584;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding and standardization
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5144143686382219}
1587;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical variables, dropping the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
1593;"
  # Keep the same 8 columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns using Min-Max scaling
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4796741537918008}
1596;"
  # Select specific columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scale numerical columns using Min-Max scaling
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.49013167013167014}
1597;"
  # Select the desired columns from the DataFrame and drop rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Perform feature engineering by creating new features based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2

  # One-hot encode categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3283903977275031}
1599;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
  # One-hot encode categorical variables after dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numeric columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5085556066504276}
1602;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5119573661812195}
1607;"
  # Keep the same columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scale numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4846894932609218}
1610;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables while dropping the first category, normalize numeric columns, and handle missing values by filling with mean
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  df.fillna(df.mean(), inplace=True)
  
  # Create new feature columns based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  return df
";{0: 0.5134807112147582}
1611;"
  # Selecting important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5152968838064513}
1612;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4822885328767682}
1615;"
  # Selecting the specified columns and dropping any rows with NA values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Performing one-hot encoding on categorical columns with dropping the first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3433673469387755}
1617;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5118369567892869}
1619;"
  # Extract only the selected columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables while dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34347619047619043}
1625;"
  # Select the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, dropping the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-Max scale numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4829728334426321}
1627;"
  # Select the specified columns and drop rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34424331376386175}
1631;"
  # Retain the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5067625609864143}
1633;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables after dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452775149795017}
1635;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5091879501667703}
1639;"
  # Selecting 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scale numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.48565739720102136}
1641;"
  # Selecting specific columns from the dataset and dropping rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform one-hot encoding for categorical columns, dropping the first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3444235588972432}
1643;"
  # Keep only the specified columns in the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Apply Min-Max scaling to numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4846894932609218}
1644;"
  # Selecting the required columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scaling numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4857457052193895}
1646;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scale numerical columns using Min-Max scaling
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4847983367983367}
1651;"
  # Select only the required columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5180179722418254}
1652;"
  # Keep only relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
 
  # Apply one-hot encoding to categorical columns and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3426285083569852}
1657;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns by subtracting mean and dividing by standard deviation
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5101748349869235}
1671;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on the categorical variables and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
1672;"
  # Keep the selected columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Utilize one-hot encoding for the categorical columns, dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34015151515151515}
1673;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical variables and dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3419278033794163}
1678;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
    
    # One-hot encode the categorical variables with dropping the first categories
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    return df
";{0: 0.34015151515151515}
1680;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical features and drop first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3408095238095238}
1682;"
  # Select the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns by subtracting mean and dividing by standard deviation
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5126846389084921}
1689;"
  # Keep selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5075604559019562}
1694;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34179197994987465}
1695;"
  # Selecting the columns of interest
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scaling numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.48395065467913156}
1699;"
  # Selecting the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5134517621961634}
1700;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
              'Total intl minutes', 'Customer service calls']
  
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.511136251811718}
1705;"
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.516228263069566}
1706;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform feature scaling on numerical columns if needed
  
  # Perform one-hot encoding for categorical columns with dropping first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34250321750321755}
1710;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5127892140718908}
1712;"
  # Extract the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop first for each to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5152968838064513}
1713;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Feature engineering: create new features based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  # One-hot encode categorical variables and drop first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.33539393578429344}
1714;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-Max scaling to normalize numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].min()) / (df[num_cols].max() - df[num_cols].min())
  
  return df
";{0: 0.486599661301648}
1717;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5126846389084921}
1718;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Scale numerical columns to [0, 1]
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.48130164805661496}
1721;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns, dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Additional data preprocessing steps can be added here if necessary

  return df
";{0: 0.3408095238095238}
1722;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5085556066504276}
1726;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Apply one-hot encoding to categorical columns, dropping the first categories to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34433525087887507}
1729;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].min()) / (df[num_cols].max() - df[num_cols].min())
  
  return df
";{0: 0.4847983367983367}
1731;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
      'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes',
                                                            'Total eve minutes', 'Total night minutes',
                                                            'Total intl minutes', 'Customer service calls']] - df[['Account length',
                                                            'Total day minutes', 'Total eve minutes',
                                                            'Total night minutes', 'Total intl minutes',
                                                            'Customer service calls']].mean()) / df[['Account length',
                                                                                                    'Total day minutes',
                                                                                                    'Total eve minutes',
                                                                                                    'Total night minutes',
                                                                                                    'Total intl minutes',
                                                                                                    'Customer service calls']].std()

  return df
";{0: 0.5128897671136203}
1738;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5108591355527874}
1739;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5136320073295448}
1740;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical variables and drop the first category for each to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34096638655462186}
1742;"
from sklearn.preprocessing import StandardScaler

def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df.dropna(inplace=True)

    scaler = StandardScaler()
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = scaler.fit_transform(df[numeric_cols])

    return df
";{0: 0.5144143686382219}
1745;"
  # Selecting only the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5108591355527874}
1748;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scaling numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.48324994970156265}
1749;"
  # Selecting the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Performing one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Min-Max scaling for numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.48395065467913156}
1752;"
  # Selecting the important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.511136251811718}
1756;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scale numerical columns to the range [0, 1]
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4788762588762589}
1757;"
  # Select specific columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.48130164805661496}
1759;"
  # Selecting the desired columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables with dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452059202059202}
1765;"
  # Selecting specific columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34790862290862296}
1766;"
  # Selecting the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5100179722418254}
1775;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Min-max scaling for numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.48382536382536384}
1783;"
  # Select the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.48565739720102136}
1784;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5110004283821764}
1788;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5110004283821764}
1790;"
  # Keeping the same columns as the previous version
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
              'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5153513055751588}
1793;"
  # Keep only the relevant columns for modeling
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns, drop_first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34433525087887507}
1799;"
  # Selecting the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5153513055751588}
1800;"
  # Select the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns using Min-Max scaling
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.49197075059144024}
1802;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5125757953710772}
1803;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Scale numerical columns to the range [0, 1]
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4857457052193895}
1806;"
  # Keeping only the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns using Min-Max scaling
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
  
  return df
";{0: 0.4847983367983367}
1808;"
  # Select the most important columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5126846389084921}
1809;"
  # Keep selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Apply one-hot encoding to categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5117116659355192}
1811;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardization
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5100179722418254}
1814;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5125757953710772}
1819;"
  # Keep the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and normalize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5135436993111767}
1820;"
  # Select the important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5118369567892869}
1821;"
  # Keep only the selected columns in the DataFrame
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5153513055751588}
1822;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
              'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5127892140718908}
1825;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5118369567892869}
1826;"
  # Select the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5093599635838169}
1828;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Applying one-hot encoding to encode categorical columns, dropping the first categories to address multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3452059202059202}
1829;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first level to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns by subtracting the mean and dividing by the standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5135436993111767}
1831;"
  # Select the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by subtracting mean and dividing by standard deviation
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5075604559019562}
1834;"
  # Select specific columns from the DataFrame
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical features, dropping the first category for each feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3433673469387755}
1835;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5144859634118035}
1836;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5100179722418254}
1838;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5074369042657725}
1841;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5093599635838169}
1843;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']].dropna()

  # Perform one-hot encoding for the categorical variables dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  return df
";{0: 0.3373304951119521}
1844;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5081745717943982}
1847;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns by subtracting the mean and dividing by the standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5110004283821764}
1854;"
  X = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and normalize numerical columns
  X = pd.get_dummies(X, columns=['International plan', 'Voice mail plan'], drop_first=True)
  X[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (X[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - X[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / X[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return X
";{0: 0.5075604559019562}
1855;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.511136251811718}
1856;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns by subtracting the mean and dividing by the standard deviation
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5067625609864143}
1860;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5063386736373406}
1862;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5125757953710772}
1871;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  # Remove any remaining missing values
  df.dropna(inplace=True)

  return df
";{0: 0.5118369567892869}
1876;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for the categorical columns and drop the first category for each to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.346031746031746}
1879;"
    # Selecting the 8 most important columns
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardizing numerical columns
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.5118369567892869}
1880;"
  # Selecting the desired columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5135436993111767}
1883;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding and normalization
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5093599635838169}
1890;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5117116659355192}
1892;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.34424331376386175}
1895;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5135436993111767}
1896;"
  # Select the desired columns from the dataframe
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5085556066504276}
1897;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5144859634118035}
1898;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5081745717943982}
1900;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and normalize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5135436993111767}
1901;"
  # Selecting the most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5118369567892869}
1903;"
  # Include only selected columns and drop rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Perform feature engineering by creating new columns based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  # One-hot encode categorical variables, drop first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.33455375313589164}
1905;"
  # Selecting the 8 most important columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and normalize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5093599635838169}
1909;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and normalize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5103256645495178}
1926;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5093599635838169}
1928;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5153513055751588}
1929;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  return df
";{0: 0.5108591355527874}
1932;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5101748349869235}
1935;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns using z-score normalization
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5117116659355192}
1938;"
  # Select the 8 most important columns for preprocessing
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5107120361687661}
1939;"
  # Select the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5101748349869235}
1943;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first level to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns by subtracting the mean and dividing by the standard deviation
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5100179722418254}
1944;"
  # Select relevant columns and drop rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Feature engineering: create new features based on existing columns
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2

  # One-hot encode categorical variables and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3353556179377564}
1948;"
  # Select the most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5108591355527874}
1956;"
  # Only keep the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5054975103263786}
1957;"
  # Select the 8 most important columns from the dataset
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns using z-score normalization
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.516228263069566}
1961;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes',  'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5136320073295448}
1963;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding and normalization
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5110004283821764}
1967;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first level to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5091879501667703}
1970;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Feature engineering creating new columns based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2
  
  # One-hot encode categorical variables, drop first categories to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.33283445489027763}
1972;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Create new feature columns based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2

  # One-hot encode categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.32856241114454965}
1974;"
  # Select the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.50731649487384}
1976;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()

  return df
";{0: 0.5135436993111767}
1980;"
  # Selecting 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns and normalization for numeric columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5127892140718908}
1982;"
  # Keeping only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical variables and drop the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3452059202059202}
1985;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first level
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5144859634118035}
1990;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
      
  # Apply one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
      
  # Normalize numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5110004283821764}
1993;"
  # Selecting the 8 most important columns for analysis
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5180179722418254}
1996;"
  # Select the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5110004283821764}
1997;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
    
    # One-hot encode categorical variables and drop first category
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    return df
";{0: 0.3453463203463204}
1998;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5125757953710772}
1999;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
              'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5144143686382219}
2001;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # Create new feature columns based on existing data
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2

  # One-hot encode categorical variables and drop the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.33188708646922493}
2002;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Feature engineering: create new features by scaling existing columns
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2

  # One-hot encode categorical variables and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3336884109725362}
2005;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization to the selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5056543730714766}
2009;"
  # Feature selection
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical features and normalization for numerical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5135436993111767}
2015;"
  # Select the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.514554768778622}
2017;"
  # Selecting the most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5117116659355192}
2018;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Performing one-hot encoding on the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardizing selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5071912040200722}
2020;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables while dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.33997950173446867}
2022;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5170984320119405}
2024;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and normalize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.511136251811718}
2028;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5062036262502644}
2029;"
  # Selecting the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5108591355527874}
2039;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5180179722418254}
2041;"
  # Include the feature scaling in the function to preprocess dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Feature scaling for numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5136320073295448}
2042;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encoding for categorical columns with dropping the first categories to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.3453463203463204}
2045;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns using z-score normalization
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5093599635838169}
2046;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5154035931568581}
2047;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5180179722418254}
2048;"
# Improved version of `select_columns_and_return_dataframe_v2`.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
    
    # Perform feature scaling on numerical columns if needed
    
    # Perform one-hot encoding for categorical columns, dropping the first categories to handle multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.34015151515151515}
2049;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical features and normalization for numerical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5110004283821764}
2059;"
  # Select the 8 most important columns for modeling
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
  
  return df
";{0: 0.5108591355527874}
2060;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and normalize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5101748349869235}
2061;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5067625609864143}
2065;"
  # Data preprocessing steps
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5091879501667703}
2068;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5085556066504276}
2069;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns ('International plan' and 'Voice mail plan') dropping the first category
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.3408095238095238}
2071;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables after dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numeric columns and handle missing values by filling with mean
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.5118369567892869}
2073;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical columns and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.33997950173446867}
2076;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
  df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)
  
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5144859634118035}
2079;"
  # Select the relevant columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5022420990709673}
2083;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()

  # Feature scaling: normalize numerical columns to have zero mean and unit variance
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  # Feature engineering: create new features based on existing columns
  df['Total day charge'] = df['Total day minutes'] * 0.5
  df['Total eve charge'] = df['Total eve minutes'] * 0.3
  df['Total night charge'] = df['Total night minutes'] * 0.1
  df['Total intl charge'] = df['Total intl minutes'] * 0.2

  # One-hot encode categorical variables and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.5056580724260055}
2084;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.508368849434808}
2085;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing selected columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5135436993111767}
2087;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns, drop the first column for each one-hot encoded variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5103256645495178}
2088;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Apply one-hot encoding to categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.508368849434808}
2089;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and normalize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5067625609864143}
2092;"
  # Extract the necessary columns from the DataFrame and remove rows with missing values
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']].dropna()
  
  # One-hot encode categorical variables and drop first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34424331376386175}
2095;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding with drop_first on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Apply z-score normalization to selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5108591355527874}
2098;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5075604559019562}
2101;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables, normalize numeric columns, and handle missing values by filling with mean
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.5135436993111767}
2102;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first level
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5126846389084921}
2103;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5135436993111767}
2105;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5153513055751588}
2108;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5110004283821764}
2109;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical variables dropping the first category, normalize numeric columns, and handle missing values by filling with mean
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.511136251811718}
2110;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34096638655462186}
2112;"
  # Selecting the 8 most important columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding on the categorical columns and dropping the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5161914882235606}
2113;"
  # Select the desired columns from the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.511136251811718}
2116;"
  # Selecting the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5108591355527874}
2118;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding on the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardizing selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5107764218910045}
2120;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical variables and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34015151515151515}
2121;"
  # Keeping only the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5125757953710772}
2122;"
  # Select the most important columns for modeling
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical variables and drop the first category to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.34096638655462186}
2127;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization to the selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5064799664667294}
2129;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalization for numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5119573661812195}
2132;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns and normalization for numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5126846389084921}
2133;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5093599635838169}
2135;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5118369567892869}
2138;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.516228263069566}
2139;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalize selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5119573661812195}
2140;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5093599635838169}
2141;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5046674882513233}
2143;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5126846389084921}
2144;"
# Select only the important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5090089632328165}
2146;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5085556066504276}
2147;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5073513055751588}
2148;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5126846389084921}
2149;"
  # Select the desired columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by subtracting mean and dividing by standard deviation
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5136320073295448}
2150;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5126846389084921}
2153;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5100179722418254}
2154;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.509854706935703}
2158;"
  # Include columns with the highest correlation with the target column based on analysis
  df = df[['Account length', 'International plan', 'Total day minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

  # Standardize selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.46195855667283137}
2159;"
  # Keep only selected columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5136320073295448}
2161;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5144859634118035}
2163;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5143398113222852}
2165;"
# Keep the columns of interest
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns using z-score normalization
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
  
  return df
";{0: 0.5107120361687661}
2168;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5101748349869235}
2171;"
  df = df[['Account length', 'International plan', 'Total day minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  return df
";{0: 0.4644580861288826}
2173;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding on the categorical columns and dropping the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5101748349869235}
2174;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5152968838064513}
2177;"
  df = df[['Account length', 'International plan', 'Total day minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  df[['Account length', 'Total day minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length','Total day minutes', 'Total intl minutes','Customer service calls']].std()
  return df
";{0: 0.4644580861288826}
2178;"
  # Include columns with high correlation to the target variable
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalization for numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5328176398764634}
2180;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardization for numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5260033872937099}
2182;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes',
                                                                                                                         'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes',
                                                                                                                                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length',
                                                                                                                                                                                                                                                    'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5119573661812195}
2183;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5136320073295448}
2184;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalization for numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5318653825938594}
2185;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.531985791985792}
2192;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  # Returning the preprocessed DataFrame
  return df
";{0: 0.5125757953710772}
2194;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding and normalization
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5118369567892869}
2195;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization for improved version
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5135436993111767}
2196;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first level to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.508368849434808}
2197;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardization of numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.511136251811718}
2198;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.511136251811718}
2199;"
  # Select the required columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5328176398764634}
2200;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
  
  return df
";{0: 0.5154035931568581}
2201;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5126846389084921}
2202;"
  df = df[['Account length', 'International plan', 'Total day minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

  # Standardize selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.4644105519637014}
2203;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns dropping the first level to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5119573661812195}
2204;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes',
                                                                                                                         'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes',
                                                                                                                                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length',
                                                                                                                                                                                                                                                    'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5091879501667703}
2206;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5099655014963564}
2207;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5101748349869235}
2210;"
  # Select the most important columns based on domain knowledge
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.509854706935703}
2213;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by applying z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5110004283821764}
2215;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5125757953710772}
2220;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5144143686382219}
2221;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5327130647130647}
2230;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-max scale selected columns
  cols_to_scale = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].min()) / (df[cols_to_scale].max() - df[cols_to_scale].min())
  
  return df
";{0: 0.48213167013167013}
2231;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-max scaling on numerical columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].min()) / (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].max() - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].min())
  
  return df
";{0: 0.4883419609594107}
2238;"
  # Selecting the same 8 columns as in v0
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding the categorical columns and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the selected columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5108591355527874}
2241;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding with drop_first=True on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Apply z-score normalization to selected columns for standardization
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
  
  return df
";{0: 0.5067625609864143}
2242;"
  # Select only the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  return df
";{0: 0.51713497003432}
2243;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot-encode categorical columns and drop the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5144859634118035}
2244;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5126846389084921}
2246;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes',
                                                                                                                         'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes',
                                                                                                                                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length',
                                                                                                                                                                                                                                                    'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5180179722418254}
2247;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5162635862769133}
2251;"
  # Select the important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5056543730714766}
2253;"
  # Keep the same 8 selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5067625609864143}
2254;"
  # Select the important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5127892140718908}
2255;"
  # Select specific columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5310288541867489}
2256;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5311646776162905}
2257;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numerical columns by subtracting mean and dividing by standard deviation
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5152968838064513}
2261;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5136320073295448}
2263;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5127892140718908}
2264;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5118369567892869}
2267;"
  # Update the function to include all columns without removing the target column
  selected_columns = ['Account length', 'Area code', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 'Total eve calls', 'Total eve charge', 'Total night minutes', 'Total night calls', 'Total night charge', 'Total intl minutes', 'Total intl calls', 'Total intl charge', 'Customer service calls']

  df = df[selected_columns]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  num_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 'Total eve calls', 'Total eve charge', 'Total night minutes', 'Total night calls', 'Total night charge', 'Total intl minutes', 'Total intl calls', 'Total intl charge', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.33743052143052144}
2268;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  return df
";{0: 0.509854706935703}
2269;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5091879501667703}
2270;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5091879501667703}
2271;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalize selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.516228263069566}
2273;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding on categorical columns, dropping the first column to prevent multicollinearity and dropping any rows with NaN values
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
  
  # Standardizing selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5144859634118035}
2275;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  return df
";{0: 0.5118369567892869}
2278;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  cols_to_normalize = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5318653825938594}
2279;"
  # Select the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5108591355527874}
2281;"
  # Select the necessary columns for preprocessing
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numerical columns
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5108591355527874}
2284;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5118369567892869}
2291;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using Min-Max scaling
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].min()) / (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].max() - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].min())
  
  return df
";{0: 0.4892121299017851}
2294;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5134517621961634}
2295;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization to the selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5058052026340709}
2300;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numerical columns by subtracting mean and dividing by standard deviation
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5075604559019562}
2304;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding and normalization
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
    
    return df
";{0: 0.5127892140718908}
2307;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5293883893883894}
2308;"
# Version 2: Improved function, applying the same operations with more optimal code design
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encoding and dropping the first column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization on selected columns
    columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

    return df
";{0: 0.5093599635838169}
2309;"
  # Select only the relevant columns
  df = df[['Account length', 'International plan', 'Total day minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on the 'International plan' column
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.4624325677875748}
2319;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5059749614891373}
2320;"
  # Select the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns using z-score normalization
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
  
  return df
";{0: 0.5127892140718908}
2323;"
  # Selecting relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and normalizing numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5136320073295448}
2324;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5144143686382219}
2331;"
# Continue working on the improved version of the function 'select_columns_and_return_dataframe_v1'

  # Selecting specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization to selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5100343068631752}
2334;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5100179722418254}
2336;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  numerical_columns = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.4941694471293442}
2338;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot-encode categorical columns and drop the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5118369567892869}
2340;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical features and drop the first column of each
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize selected columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5101748349869235}
2341;"
  # Select the important columns
  selected_columns = ['Account length', 'Area code', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 'Total eve calls', 'Total eve charge', 'Total night minutes', 'Total night calls', 'Total night charge', 'Total intl minutes', 'Total intl calls', 'Total intl charge', 'Customer service calls']

  # Subset the DataFrame with selected columns
  df = df[selected_columns]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  num_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 'Total eve calls', 'Total eve charge', 'Total night minutes', 'Total night calls', 'Total night charge', 'Total intl minutes', 'Total intl calls', 'Total intl charge', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.342036582036582}
2342;"
  # Selecting the specified columns from the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5100179722418254}
2347;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numerical columns
  numerical_columns = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.49346563481262856}
2349;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalize selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  # Return preprocessed dataframe
  return df
";{0: 0.5152968838064513}
2352;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by z-score normalization
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5091879501667703}
2355;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5283972752393804}
2366;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5285840324550002}
2370;"
  selected_columns = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']

  # Subset the DataFrame with selected columns
  df = df[selected_columns]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5126846389084921}
2374;"
  df = pd.get_dummies(df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5110004283821764}
2375;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5336604331341174}
2376;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 
                       'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.516228263069566}
2378;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5073513055751588}
2381;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  # Keep selected columns
  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5135436993111767}
2382;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5135436993111767}
2384;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5143398113222852}
2386;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5144143686382219}
2387;"
  # Keep only the selected columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using Z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5153513055751588}
2389;"
  # Select only the relevant columns for preprocessing
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop the first level to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5108591355527874}
2395;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Standardize selected columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5030399939865093}
2396;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']

  df = df[columns_to_select]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5081641769930453}
2400;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode 'Customer service calls' column as it is a categorical feature
  df = pd.get_dummies(df, columns=['Customer service calls'], drop_first=True)

  # Standardize selected numerical columns using z-score normalization
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  
  return df
";{0: 0.34076025879804916}
2401;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  # Perform one-hot encoding only on 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Standardize selected numerical columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5116710263081137}
2403;"
  selected_columns = ['Account length', 'Area code', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 'Total eve calls', 'Total eve charge', 'Total night minutes', 'Total night calls', 'Total night charge', 'Total intl minutes', 'Total intl calls', 'Total intl charge', 'Customer service calls']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  num_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 'Total eve calls', 'Total eve charge', 'Total night minutes', 'Total night calls', 'Total night charge', 'Total intl minutes', 'Total intl calls', 'Total intl charge', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.341079644237539}
2407;"
  # Select the desired columns for processing
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5054975103263786}
2409;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  z_score_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[z_score_cols] = (df[z_score_cols] - df[z_score_cols].mean()) / df[z_score_cols].std()
  
  return df
";{0: 0.5117116659355192}
2411;"
  # Selecting the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization to the selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5081641769930453}
2414;"
  # Define the selected columns
  selected_columns = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  # Subset the DataFrame with the selected columns
  df = df[selected_columns]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5091879501667703}
2415;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using Min-Max scaling
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].min()) / (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].max() - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].min())

  return df
";{0: 0.48324994970156265}
2417;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5091879501667703}
2421;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  num_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5144859634118035}
2431;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']

  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5067625609864143}
2434;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5136320073295448}
2435;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.51713497003432}
2436;"
  columns_to_select = ['Account length', 'International plan', 'Voice mail plan', 
                       'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']

  # Keep selected columns
  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.509854706935703}
2438;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5171170713409247}
2440;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5310288541867489}
2441;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5144143686382219}
2442;"
  # Select the desired columns from the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5081745717943982}
2443;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5118369567892869}
2444;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 
                      'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5135436993111767}
2445;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization to the selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5054975103263786}
2447;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding with drop_first on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Applying z-score normalization to selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5125757953710772}
2451;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns and drop the first column of each encoded feature to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.530203260791496}
2452;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5040586320914369}
2454;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalization for numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5335721251157493}
2456;"
  # Selecting the essential columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Performing one-hot encoding on categorical columns, dropping the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5110004283821764}
2459;"
  # Keeping the same 8 important columns for analysis
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns and drop the first encoded column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by calculating z-scores
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 
                      'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5118369567892869}
2461;"
  # Only select necessary columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5126846389084921}
2465;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5075604559019562}
2466;"
  # Rearrange columns based on importance
  df = df[['Total day minutes', 'Total eve minutes', 'Total intl minutes', 'Customer service calls', 'Total night minutes', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total intl minutes', 'Customer service calls', 'Total night minutes']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5285840324550002}
2470;"
  # Select relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5098193494068383}
2477;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Normalize selected columns using Min-Max scaling
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
  
  return df
";{0: 0.45062671109650976}
2478;"
  # Select only the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5135436993111767}
2481;"
  # Selecting 8 important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5099655014963564}
2485;"
  # Rearrange and select columns of interest
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5327130647130647}
2486;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numerical columns 
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes','Total eve minutes', 'Total night minutes','Total intl minutes','Customer service calls']].std()
  
  return df
";{0: 0.5108591355527874}
2491;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5101748349869235}
2492;"
  # Select specific columns and reorder them
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  # Return preprocessed dataframe
  return df
";{0: 0.5270060583436379}
2493;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Apply z-score normalization to selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5135436993111767}
2494;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column for each categorical column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalize selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5136320073295448}
2500;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5117116659355192}
2505;"
  # Select the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5144143686382219}
2506;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical features, dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5085556066504276}
2509;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5108591355527874}
2511;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 
                      'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5110004283821764}
2512;"
  # Select important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5336604331341174}
2513;"
  # Selecting the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding categorical columns and dropping the first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.530203260791496}
2514;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan']]

  # One-hot encoding categorical columns and dropping the first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5327130647130647}
2520;"
  return pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls', 'International plan', 'Voice mail plan']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.5237164059805923}
2523;"
  # Select the relevant columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5040351447349808}
2524;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5293883893883894}
2529;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns and drop the first encoded column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by calculating z-scores
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 
                      'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5144859634118035}
2531;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standard scale selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5110004283821764}
2534;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5303540903540903}
2536;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Apply z-score normalization to selected columns for standardization
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()

  return df
";{0: 0.5125757953710772}
2539;"
  # Selecting the 8 most important columns in the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding categorical columns and dropping the first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.530203260791496}
2543;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5275888817065286}
2545;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  # Return preprocessed dataframe
  return df
";{0: 0.5293883893883894}
2546;"
  # Select only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5362566888741386}
2547;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns, dropping the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5171170713409247}
2549;"
  # Select the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numerical columns 
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes','Total eve minutes', 'Total night minutes','Total intl minutes','Customer service calls']].mean()) / df[['Account length', 'Total day minutes','Total eve minutes', 'Total night minutes','Total intl minutes','Customer service calls']].std()

  return df
";{0: 0.5126846389084921}
2550;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5362566888741386}
2551;"
  # Keep the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5328176398764634}
2552;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5292163759713429}
2555;"
  # Include the 'Total intl calls' column in the selected columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5417296940131586}
2557;"
  # Select the top 8 important attributes based on previous data analysis
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5170821335527218}
2560;"
  # Select the relevant columns
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5187225983510814}
2563;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5453884548147766}
2564;"
  # Select relevant columns for preprocessing
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5461737353699517}
2566;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding with drop_first on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Applying z-score normalization to selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()
  
  return df
";{0: 0.5118369567892869}
2567;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5318653825938594}
2570;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5134292972236472}
2572;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode the categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5328176398764634}
2574;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5437519960354606}
2577;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns, drop first column and handle NaN values
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5101748349869235}
2578;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  def preprocess_international_plan(plan):
    return 1 if plan == 'yes' else 0

  def preprocess_voice_mail_plan(plan):
    return 1 if plan == 'yes' else 0

  df['International plan'] = df['International plan'].apply(preprocess_international_plan)
  df['Voice mail plan'] = df['Voice mail plan'].apply(preprocess_voice_mail_plan)

  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3979738210507441}
2581;"
  # Select the columns to be used for modeling
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5187225983510814}
2587;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
    
    return df
";{0: 0.5328176398764634}
2591;"
  # Selecting desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5353797313797314}
2594;"
  # Select specific columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.514554768778622}
2596;"
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5204068088773971}
2599;"
  # Reorder columns and apply one-hot encoding
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5118369567892869}
2600;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5310288541867489}
2601;"
  # Select the specified columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 
                      'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.516228263069566}
2604;"
  # Select only the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
           'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5293883893883894}
2610;"
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5178970049558285}
2615;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total intl minutes', 'Customer service calls', 'Total night minutes', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total intl minutes', 'Customer service calls', 'Total night minutes']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.530203260791496}
2616;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  # Z-score Standardization
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5318653825938594}
2627;"
  return df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].pipe(
      lambda x: (x - x.mean()) / x.std()).join(
          pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)
      )
";{0: 0.5127892140718908}
2629;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5328176398764634}
2631;"
# Improving the preprocessing function to use the StandardScaler from sklearn for standardization
from sklearn.preprocessing import StandardScaler

def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns and drop the first encoded column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize selected columns using z-score normalization with StandardScaler
    selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 
                        'Total night minutes', 'Total intl minutes', 'Customer service calls']
    scaler = StandardScaler()
    df[selected_columns] = scaler.fit_transform(df[selected_columns])
    
    return df
";{0: 0.5119573661812195}
2632;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5465491988326635}
2638;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.531985791985792}
2640;"
  # Select the specified 8 columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 
                      'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5127892140718908}
2645;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-max scale numerical columns
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
  
  return df
";{0: 0.4895068112315818}
2648;"
  # Selecting only the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding categorical columns and dropping the first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5318653825938594}
2651;"
  # Keep the same subset of columns as v1
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop first for each to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5230734755440638}
2652;"
  # Select specific columns to keep in the DataFrame
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5075604559019562}
2655;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5151715968814097}
2657;"
  return df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].apply(lambda x: (x - x.mean()) / x.std()).join(
      pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)
  )
";{0: 0.5110004283821764}
2659;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding categoricals and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.534514389216376}
2662;"
  # Select relevant columns from the dataset
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5426673663794024}
2663;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5445815113477346}
2664;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding categorical columns and dropping the first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.530203260791496}
2665;"
  # Select relevant columns from the dataset
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5146998025079703}
2666;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  num_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.5311646776162905}
2673;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5327130647130647}
2674;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  return df
";{0: 0.543617883572581}
2676;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5196795361501244}
2681;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5083032973956605}
2684;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding on categorical columns and dropping the first level
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
  
  return df
";{0: 0.5118369567892869}
2686;"
  # Select the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5275888817065286}
2689;"
  # Select relevant columns for preprocessing
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5101748349869235}
2692;"
  # Select the desired columns from the dataset
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize selected numerical columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()

  return df
";{0: 0.5091879501667703}
2696;"
  # Select only the required columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns while dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
      
  return df
";{0: 0.5143398113222852}
2699;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding categorical columns and dropping the first for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5292163759713429}
2700;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total intl minutes', 'Customer service calls', 'Total night minutes', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical columns and normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total intl minutes', 'Customer service calls', 'Total night minutes']
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5277899877899878}
2705;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical features with drop_first=True to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical features using z-score normalization
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5118369567892869}
2712;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns while dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
      
  return df
";{0: 0.5152968838064513}
2715;"
  df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5427807450642097}
2718;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

  # Standardize selected columns using z-score normalization
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5463576095999783}
2723;"
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5195591267581918}
2728;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding on categorical columns with drop_first parameter set to True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5152968838064513}
2729;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5144143686382219}
2730;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding on categorical columns with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5437519960354606}
2736;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
           'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5318653825938594}
2737;"
  # Selecting important columns and reordering
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                       'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  return df
";{0: 0.5093599635838169}
2741;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5204068088773971}
2742;"
  # Select the relevant columns
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5164574417887895}
2745;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5285840324550002}
2747;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5318653825938594}
2749;"
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns and drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5187225983510814}
2752;"
  # Select only the required columns for preprocessing
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns by calculating z-scores (subtract mean and divide by standard deviation)
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()

  return df
";{0: 0.5178970049558285}
2756;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-Max Scaling for numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].min()) / (df[numerical_columns].max() - df[numerical_columns].min())
  
  return df
";{0: 0.48438262822504585}
2759;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5287636976244571}
2762;"
  return pd.get_dummies((df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                             'Customer service calls', 'International plan', 'Voice mail plan']] - df[['Total day minutes', 
                             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / 
                         df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                             'Customer service calls']].std(), columns=['International plan', 'Voice mail plan'], drop_first=True)
";{0: 0.40111349840912025}
2763;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-max scaling for selected columns
  cols_to_scale = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].min()) / (df[cols_to_scale].max() - df[cols_to_scale].min())
  
  return df
";{0: 0.48382536382536384}
2770;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5100179722418254}
2771;"
  # Select the specified columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns by subtracting mean and dividing by standard deviation
  selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[selected_columns] = (df[selected_columns] - df[selected_columns].mean()) / df[selected_columns].std()
  
  return df
";{0: 0.5144859634118035}
2776;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Applying z-score normalization to selected numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5372251895086542}
2777;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5418228906580793}
2780;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
2783;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.543617883572581}
2784;"
  # Select top 8 important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5425585228419875}
2785;"
  # Only keep the necessary columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding with drop_first=True for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5418228906580793}
2787;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5293883893883894}
2789;"
  # Selecting the required columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding the categorical columns and dropping the first column for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.530203260791496}
2794;"
  # Keep selected columns, perform one-hot encoding with drop_first, and standardize numeric columns
  df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
  return df
";{0: 0.5445815113477346}
2800;"
  # Select the specified columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding for categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Apply z-score normalization to selected columns for standardization
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()

  return df
";{0: 0.5118369567892869}
2802;"
  # Select the top 8 most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5481095432501507}
2807;"
  # Select columns based on importance
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5417296940131586}
2808;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding the categorical columns and dropping the first column for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5328176398764634}
2809;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on the categorical columns dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5136320073295448}
2820;"
  # Selected columns based on importance and type
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5418228906580793}
2827;"
  # Select only the most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5426673663794024}
2838;"
  # Select the most important columns based on feature importance or domain knowledge
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns to convert them into numerical representations
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Z-score standardization for selected numerical columns to normalize them
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5445815113477346}
2840;"
  # Select the most important columns from the dataset
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5455585228419875}
2843;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  num_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()

  return df
";{0: 0.530203260791496}
2844;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  return df
";{0: 0.530203260791496}
2855;"
  # Selecting specific columns
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Applying z-score normalization to selected numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5407339614384787}
2859;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5427807450642097}
2861;"
  # Select the columns indicated as important
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5445815113477346}
2867;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5473401320373897}
2869;"
  # Select only the desired columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.547135099418564}
2877;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and omitting the first column in each one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5277899877899878}
2879;"
  # Include the 'Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls' columns in the dataframe
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on the categorical columns 'International plan' and 'Voice mail plan' with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5473401320373897}
2880;"
  # Keep only the selected columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5417296940131586}
2881;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5399462779440283}
2888;"
  # Select important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.543617883572581}
2891;"
  # Select relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                  'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.543617883572581}
2892;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding without multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5400029672864319}
2897;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5311646776162905}
2899;"
  # Keep only the selected columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Z-score standardization to normalize numerical columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5418228906580793}
2900;"
  # Select the 8 most important columns along with target column if available
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5390642699684242}
2901;"
  return pd.get_dummies(df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.5040586320914369}
2902;"
  # Select the specified columns from the dataframe
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.50731649487384}
2904;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns using Min-Max scaling
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].min()) / (df[numerical_columns].max() - df[numerical_columns].min())

  return df
";{0: 0.4895068112315818}
2905;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5473401320373897}
2907;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5463576095999783}
2910;"
  # Select the most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5463576095999783}
2912;"
  # Select the top 8 most important columns based on feature importance analysis
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'Account length', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'Voice mail plan']]
  
  # Encode the 'Voice mail plan' column using one-hot encoding
  df = pd.get_dummies(df, columns=['Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.44578231420658226}
2913;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  # Apply standard scaling to numeric columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5452251895086542}
2914;"
  # Include only the selected columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5453884548147766}
2915;"
  # Selecting the 8 most important columns along with International plan and Voice mail plan
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for the categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalization for the selected numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.543617883572581}
2916;"
  # Select columns based on importance
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'Account length', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'Voice mail plan']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['Voice mail plan'], drop_first=True)

  # Apply z-score normalization to numerical columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.444025137807279}
2920;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score standardization to normalize numerical columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5399462779440283}
2921;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding with drop_first=True for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5483363006197652}
2922;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'Account length', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'Voice mail plan']]

  # Perform one-hot encoding on the 'Voice mail plan' column
  df = pd.get_dummies(df, columns=['Voice mail plan'], drop_first=True)

  # Apply z-score normalization to selected numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.44680852725733516}
2927;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding with drop_first=True for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.547135099418564}
2931;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encoding and dropping the first column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization on selected columns
    columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

    return df
";{0: 0.5110004283821764}
2933;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.543617883572581}
2934;"
  # Select the desired columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5444323967158613}
2936;"
  # Select the relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalization for the selected numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5444323967158613}
2938;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on the categorical columns 'International plan' and 'Voice mail plan' with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                  'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5445815113477346}
2947;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Number vmail messages', 'International plan']]
    
  # Perform one-hot encoding on the categorical columns 'International plan'
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Fill missing values in 'Number vmail messages' column with 0
  df['Number vmail messages'].fillna(0, inplace=True)

  # Standardize the selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.36985046502027635}
2949;"
  # Select the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5336604331341174}
2951;"
  # Select the most important columns and target column
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5426673663794024}
2952;"
  # Select relevant columns for analysis
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5445815113477346}
2960;"
  # Select the most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding with drop_first=True for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.547135099418564}
2961;"
  df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']], columns=['International plan', 'Voice mail plan'])
  
  df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] = (df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']] - df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].mean()) / df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].std()

  return df
";{0: 0.5107802906011305}
2964;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
    
    return df
";{0: 0.5107802906011305}
2972;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization to selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5038483875193611}
2973;"
  # Select the most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.547135099418564}
2976;"
  df = df[['Account length', 'Total intl calls', 'Total intl minutes', 'Customer service calls', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Voice mail plan']]

  # Perform one-hot encoding on 'Voice mail plan' column
  df = pd.get_dummies(df, columns=['Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.4494322326658507}
2978;"
  # Select the most important columns based on prior knowledge or feature importance analysis
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5400029672864319}
2980;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns using z-score normalization
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5260033872937099}
2981;"
  # Select the most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5444323967158613}
2982;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5310288541867489}
2983;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns using Min-Max scaling
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].min()) / (df[numerical_columns].max() - df[numerical_columns].min())
  
  return df
";{0: 0.48768130787587716}
2989;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encode categorical columns with dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5093599635838169}
2990;"
  # Select relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                  'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5434891716115624}
2991;"
  # Select the most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.543617883572581}
2993;"
  # Select the most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5481095432501507}
3000;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.531985791985792}
3002;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Standardize numerical columns using z-score normalization
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5051469600621079}
3003;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns and drop the first column of each encoded feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.530203260791496}
3004;"
    df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encoding with dropping the first column to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to selected columns
    columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

    return df
";{0: 0.5110004283821764}
3005;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.516228263069566}
3010;"
    # Keep only selected columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5490973356273756}
3011;"
  # Selecting the most relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5481095432501507}
3013;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical variables and drop the first level to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5090089632328165}
3020;"
  # Select the most relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5481095432501507}
3029;"
  # Selecting specific columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5463576095999783}
3032;"
  # Select the desired columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding for categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numeric columns with z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                  'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5493464016298663}
3034;"
  # Select the most important columns in the dataset
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.544736926597856}
3037;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Implementing Min-Max normalization on selected columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
  
  return df
";{0: 0.491328645401189}
3041;"
  # Select the most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5453884548147766}
3042;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid the dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5455585228419875}
3048;"
  df = df.drop(columns=['State', 'Area code', 'Number vmail messages', 'Total day calls', 'Total day charge', 'Total eve calls', 'Total eve charge', 'Total night calls', 'Total night charge', 'Total intl charge'])
  
  # One-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-max scaling for the selected numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
  
  return df
";{0: 0.49048416967986597}
3051;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns using z-score normalization
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5310288541867489}
3052;"
  # Keep only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5252258852258852}
3059;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Number vmail messages', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding on the categorical columns 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Fill missing values in 'Number vmail messages' column with 0
  df['Number vmail messages'].fillna(0, inplace=True)

  # Standardize the selected numeric columns using z-score normalization
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.3749152692151746}
3060;"
  # Selecting specific columns of interest
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Performing one-hot encoding and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5453884548147766}
3063;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns using z-score normalization
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5353797313797314}
3066;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5426673663794024}
3068;"
  df = df[['Total day minutes', 'Total night minutes', 'Total intl minutes', 'Account length', 'Total eve minutes', 'Total intl calls', 'Customer service calls', 'Voice mail plan']]
  
  # Perform one-hot encoding on the column 'Voice mail plan'
  df['Voice mail plan'] = df['Voice mail plan'].apply(lambda x: 1 if x == 'yes' else 0)

  # Normalize selected numeric columns using min-max scaling
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Total intl calls', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
  
  return df
";{0: 0.3428906002611818}
3071;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 
           'Number vmail messages', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Number vmail messages'].fillna(0, inplace=True)

  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                  'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.3749152692151746}
3074;"
  # Select the relevant columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode the categorical columns with drop_first=True to handle multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns using z-score normalization
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5328176398764634}
3078;"
  # Keep only the selected columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                  'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5445815113477346}
3079;"
  # Filtering and rearranging columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()

  return df
";{0: 0.5293883893883894}
3080;"
  df = df[['Account length', 'Customer service calls', 'Total eve minutes', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total night minutes']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5380529417661493}
3085;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                  'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5461737353699517}
3086;"
  df = df[['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5418228906580793}
3091;"
  df = df[['Account length', 'Customer service calls', 'Total eve minutes', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total night minutes']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5308457345589421}
3094;"
# Updated version of the function with enhanced preprocessing steps

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize selected columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5418228906580793}
3095;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  # Implementing Min-Max normalization on selected columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

  return df
";{0: 0.49039097303494517}
3099;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]
  
  # One-hot encode categorical columns with drop_first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.531985791985792}
3105;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encode categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns using z-score normalization
  numerical_columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  # Returning the preprocessed dataframe
  return df
";{0: 0.531985791985792}
3114;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Z-score normalization for selected columns
  columns_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_normalize] = (df[columns_to_normalize] - df[columns_to_normalize].mean()) / df[columns_to_normalize].std()

  return df
";{0: 0.5022420990709673}
3115;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes',
                  'Customer service calls', 'Total intl calls']
  
  # Standardizing selected numeric columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5434891716115624}
3116;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5457358278065264}
3117;"
    # Keep the same 8 columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity (dummy variable trap)
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408781575451838}
3120;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3124;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
3125;"
    # One-hot encode categorical columns and drop target column if needed
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5398918561753208}
3126;"
    # Select only the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity (dummy variable trap)
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
3128;"
    # Select the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding on categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5483363006197652}
3133;"
  # Select relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5434891716115624}
3135;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5434891716115624}
3138;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
3142;"
  # Select the most important columns
  df = df[['Account length', 'Customer service calls', 'Total eve minutes', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total night minutes']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5397942804202397}
3143;"
  # Select relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5427807450642097}
3145;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'Customer service calls', 'International plan', 'Voice mail plan', 'Account length']]
  
  # Perform one-hot encoding with drop_first=True for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df

";{0: 0.49282929578722384}
3148;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5437519960354606}
3152;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']]
    
    # Convert categorical columns into numerical using one-hot-encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5444323967158613}
3156;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using min-max normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4950188886217649}
3157;"
    # Select the desired columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first for each
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5490973356273756}
3158;"
    # Selecting necessary columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4965531351971073}
3159;"
  # Selecting relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5455585228419875}
3161;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3163;"
    # Select only the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5418228906580793}
3164;"
    selected_cols = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5437519960354606}
3165;"
    return df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]\
        .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
        .assign(**{col: (df[col] - df[col].mean()) / df[col].std() for col in ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']})
";{0: 0.544736926597856}
3167;"
    # Selecting the most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4930936757376479}
3170;"
  # Select the 8 most important columns
  df = df[['Account length', 'Customer service calls', 'Total eve minutes', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total night minutes']]
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5352607455964697}
3171;"
    return df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
               'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].pipe(lambda d: pd.get_dummies(d, columns=['International plan', 'Voice mail plan'], drop_first=True).assign(Account_length=(d['Account length'] - d['Account length'].mean()) / d['Account length'].std(),
                                   Total_day_minutes=(d['Total day minutes'] - d['Total day minutes'].mean()) / d['Total day minutes'].std(),
                                   Total_eve_minutes=(d['Total eve minutes'] - d['Total eve minutes'].mean()) / d['Total eve minutes'].std(),
                                   Total_night_minutes=(d['Total night minutes'] - d['Total night minutes'].mean()) / d['Total night minutes'].std(),
                                   Total_intl_minutes=(d['Total intl minutes'] - d['Total intl minutes'].mean()) / d['Total intl minutes'].std(),
                                   Customer_service_calls=(d['Customer service calls'] - d['Customer service calls'].mean()) / d['Customer service calls'].std(),
                                   Total_intl_calls=(d['Total intl calls'] - d['Total intl calls'].mean()) / d['Total intl calls'].std()))   
";{0: 0.3734030137644595}
3173;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5453884548147766}
3175;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5500987527270449}
3179;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                              'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                          columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std() if x.name in ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls'] else x, axis=0)
";{0: 0.5444323967158613}
3182;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5452251895086542}
3184;"
  # Select 8 most important columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.535238420521534}
3186;"
    # Select the most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first for each
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5437519960354606}
3189;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.49574633976754195}
3191;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5457358278065264}
3192;"
  # Selecting the specific columns needed for analysis
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]

  # Performing one-hot encoding with drop_first=True for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes',
                  'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5455585228419875}
3195;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5382020563980225}
3196;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Account length']]
  
  # Perform one-hot encoding for categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5017413169715365}
3199;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalization for all numeric columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5343494773973083}
3202;"
    # Select the 8 most important columns and perform one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
3203;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Z-score normalization for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5418228906580793}
3204;"
  # Selecting relevant columns for modeling
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5426673663794024}
3207;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'International plan', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46480544075730945}
3209;"
  # Selecting specific columns from the dataframe
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5419200251894052}
3211;"
  # Select relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalization for all numeric columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.532567868201906}
3216;"
    # Select the most important columns
    df_selected = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    for col in numerical_cols:
        df_encoded[col] = (df_encoded[col] - df_encoded[col].mean()) / df_encoded[col].std()
    
    return df_encoded
";{0: 0.5417296940131586}
3218;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49621510702809324}
3220;"
    # Select the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first for each
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5463576095999783}
3222;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']]
    
    # Encode categorical columns using one-hot-encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns by applying z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5437519960354606}
3228;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Apply Robust Scaling to selected columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  Q1 = df[numeric_cols].quantile(0.25)
  Q3 = df[numeric_cols].quantile(0.75)
  IQR = Q3 - Q1
  df[numeric_cols] = (df[numeric_cols] - Q1) / IQR

  return df
";{0: 0.5499746110031666}
3231;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'International plan', 'Voice mail plan', 'Total intl calls', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5324067237871197}
3238;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns using standard scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
3240;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3243;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Applying z-score normalization to all numeric columns
  numeric_cols = df.select_dtypes(include=[np.number]).columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5503707294147574}
3245;"
  # Select columns based on importance
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  # Apply standard scaling to numeric columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5508306316855249}
3247;"
    # Select important columns
    df_selected = df[[ 'Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    for col in numerical_cols:
        df_encoded[col] = (df_encoded[col] - df_encoded[col].mean()) / df_encoded[col].std()

    return df_encoded
";{0: 0.5493464016298663}
3248;"
    # Select target columns and apply one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49600141105917633}
3250;"
    numerical_cols = ['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    df_num = df[numerical_cols]
    
    df_cat = df[['International plan', 'Voice mail plan']]
    
    df_cat_ohe = pd.get_dummies(df_cat, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df_num_norm = (df_num - df_num.mean()) / df_num.std()
    
    return pd.concat([df_num_norm, df_cat_ohe], axis=1)
";{0: 0.5452251895086542}
3252;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.532567868201906}
3253;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Account length']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4946127118563542}
3254;"
    # Select relevant columns
    df_selected = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop first
    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    for col in numerical_cols:
        df_encoded[col] = (df_encoded[col] - df_encoded[col].mean()) / df_encoded[col].std()
    
    return df_encoded
";{0: 0.5425585228419875}
3255;"
  # Select relevant columns for modeling
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.544736926597856}
3258;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5465491988326635}
3259;"
    # Select most important numerical columns
    numerical_cols = ['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Separate numerical columns
    df_num = df[numerical_cols]
    
    # Select categorical columns
    df_cat = df[['International plan', 'Voice mail plan']]
    
    # One-hot encode categorical columns
    df_cat_ohe = pd.get_dummies(df_cat, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns
    df_num_norm = (df_num - df_num.mean()) / df_num.std()
    
    # Combine normalized numerical and one-hot encoded categorical columns
    return pd.concat([df_num_norm, df_cat_ohe], axis=1)
";{0: 0.5463576095999783}
3261;"
  df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5437165148842714}
3263;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5444323967158613}
3266;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Account length']]
  
  # Perform one-hot encoding for categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5233387423112654}
3270;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4974949179867084}
3271;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # Perform one-hot encoding and drop first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Min-max scaling on selected columns
  cols_to_scale = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_scale] = (df[cols_to_scale] - df[cols_to_scale].min()) / (df[cols_to_scale].max() - df[cols_to_scale].min())
  
  return df
";{0: 0.48395065467913156}
3273;"
    # Select the most important columns
    df_selected = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    for col in numerical_cols:
        df_encoded[col] = (df_encoded[col] - df_encoded[col].mean()) / df_encoded[col].std()
    
    return df_encoded
";{0: 0.5408781575451838}
3274;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
3279;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                          columns=['International plan', 'Voice mail plan'], drop_first=True).pipe(lambda d: (d - d.mean()) / d.std())
";{0: 0.5296767117393211}
3280;"
    # Keep only the specified columns and apply one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
3283;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.3104516473255969}
3284;"
  # Select relevant columns from the dataset
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.543617883572581}
3285;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                              'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                          columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.min()) / (x.max() - x.min()) if x.name in df.columns[:-2] else x, axis=0)
";{0: 0.48401258886230636}
3290;"
    df_selected = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    for col in numerical_cols:
        df_encoded[col] = (df_encoded[col] - df_encoded[col].mean()) / df_encoded[col].std()
    
    return df_encoded
";{0: 0.5399462779440283}
3291;"
    selected_columns = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    df_selected = df[selected_columns]
    
    df_selected = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling for selected columns
    df_selected[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']] = (df_selected[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']] - df_selected[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']].min()) / (df_selected[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']].max() - df_selected[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']].min())

    return df_selected
";{0: 0.4930936757376479}
3295;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Min-max normalization for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4950188886217649}
3297;"
    # Select the most important columns
    df_selected = df[[ 'Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    for col in numerical_cols:
        df_encoded[col] = (df_encoded[col] - df_encoded[col].mean()) / df_encoded[col].std()

    return df_encoded
";{0: 0.5442892071686982}
3299;"
    df_selected = df[[ 'Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df_encoded[numerical_cols] = (df_encoded[numerical_cols] - df_encoded[numerical_cols].mean()) / df_encoded[numerical_cols].std()

    return df_encoded
";{0: 0.5483363006197652}
3302;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding for categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numeric columns with z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                  'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5490973356273756}
3303;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize numerical columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
3304;"
    # One-hot encode 'International plan' and 'Voice mail plan' columns and drop original columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.547135099418564}
3306;"
    # Select relevant columns and apply one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5521436044270691}
3309;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Convert categorical columns to dummy variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5481095432501507}
3315;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5500987527270449}
3317;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardization (Z-score normalization) for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5475538280063066}
3320;"
    # Select relevant columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
3326;"
    # Select relevant columns and perform one-hot encoding on categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408046078531731}
3327;"
    # Selecting relevant columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
3333;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop the first level for each column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.543617883572581}
3336;"
  # Selecting specific columns from the dataset
  df = df[['Account length', 'Total intl minutes', 'International plan', 'Voice mail plan', 'Total day minutes',
           'Total eve minutes', 'Total night minutes', 'Customer service calls', 'Total intl calls']]
  
  # Perform one-hot encoding for categorical columns with drop_first=True to deal with multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                  'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5483363006197652}
3339;"
    # Selecting 8 most important columns
    df_selected = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical columns and drop first
    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    for col in numerical_cols:
        df_encoded[col] = (df_encoded[col] - df_encoded[col].mean()) / df_encoded[col].std()

    return df_encoded
";{0: 0.5399462779440283}
3341;"
  df = df[['Account length', 'Total intl calls', 'Total intl minutes', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5450683267635561}
3348;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on the categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.509854706935703}
3351;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_columns] = (df[numerical_columns] - df[numerical_columns].mean()) / df[numerical_columns].std()
  
  return df
";{0: 0.5100179722418254}
3354;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                          columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std(), axis=0)
";{0: 0.5333669549598969}
3356;"
    return df[['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']].apply(lambda x: (x - x.mean()) / x.std(), axis=0)
";{0: 0.40848251351734477}
3362;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first for each
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5463576095999783}
3365;"
  # Select specific columns from the DataFrame
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first level for each column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5463576095999783}
3366;"
    # Selecting the most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding categorical columns with drop_first
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardizing numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3368;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3370;"
    # Select target and relevant features
    df_selected = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical columns and drop first for better model interpretation
    df_encoded = pd.get_dummies(df_selected, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    for col in numerical_cols:
        df_encoded[col] = (df_encoded[col] - df_encoded[col].mean()) / df_encoded[col].std()

    return df_encoded
";{0: 0.5475538280063066}
3372;"
  # Select relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalization for all columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5306272289324997}
3378;"
    # Select relevant columns and one-hot encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5408046078531731}
3379;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Z-score normalization for numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5426673663794024}
3380;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max normalization for all columns except the categorical ones
    df[df.columns[:-2]] = (df[df.columns[:-2]] - df[df.columns[:-2]].min()) / (df[df.columns[:-2]].max() - df[df.columns[:-2]].min())
    
    return df
";{0: 0.49404973383656314}
3383;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # One-hot encoding with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5144143686382219}
3389;"
    # Select the most important columns and encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
3390;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize numerical columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3393;"
# Continue improving the preprocessing function
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'Customer service calls',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical columns with drop_first=True
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize selected numeric columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5425585228419875}
3396;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes',
                  'Customer service calls', 'Total intl calls']
  
  # Apply z-score normalization to selected numeric columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5427807450642097}
3400;"
# Improved version over v2 including encoding and normalization for the dataset
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5461737353699517}
3404;"
    # Select relevant columns and drop target column
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes',
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical columns and drop first to avoid multicollinearity (dummy variable trap)
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5426673663794024}
3405;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
3408;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5425585228419875}
3412;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Implementing Robust Scaling on selected columns for better handling of outliers
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
  
  return df
";{0: 0.5443641729789354}
3414;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  # Implementing Min-Max Scaling on selected columns to scale features in the range [0, 1]
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
  
  return df
";{0: 0.49404973383656314}
3420;"
  # Select only the 8 most important columns
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding and drop first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize selected columns using z-score normalization
  cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
  
  # Return preprocessed dataframe
  return df
";{0: 0.5100179722418254}
3422;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5408781575451838}
3423;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3424;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5426673663794024}
3428;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                              'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                          columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std() if x.name != 'Total day minutes' else x, axis=0)
";{0: 0.39809062214956176}
3431;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding of categorical columns and dropping first level
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5408046078531731}
3438;"
    # Selecting important columns and applying one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
   
    return df
";{0: 0.5426673663794024}
3441;"
  # Select relevant columns
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df = df[columns_to_select]
  
  # Perform one-hot encoding with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5434891716115624}
3443;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns only
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5434891716115624}
3444;"
  # Selecting the necessary columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

  # Perform one-hot encoding with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the selected columns using z-score normalization
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5112669173895048}
3446;"
  # Select relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first column of each encoded feature
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Apply Robust Scaling to selected columns using IQR
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  Q1 = df[numeric_cols].quantile(0.25)
  Q3 = df[numeric_cols].quantile(0.75)
  IQR = Q3 - Q1
  df[numeric_cols] = (df[numeric_cols] - Q1) / IQR

  return df
";{0: 0.5461236505773391}
3447;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.511136251811718}
3450;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df[df.columns[:-2]] = (df[df.columns[:-2]] - df[df.columns[:-2]].min()) / (df[df.columns[:-2]].max() - df[df.columns[:-2]].min())
    
    return df
";{0: 0.49699757964155183}
3452;"
  # Keep the original 8 most important columns
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  # Filter the dataframe to keep only selected columns
  df = df[columns_to_select]
  
  # Perform one-hot encoding with drop_first=True on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.543617883572581}
3458;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
3459;"
  # Selecting important columns and dropping target column
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding categorical columns and dropping the first column to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                  'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5426673663794024}
3460;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns using min-max scaling
    df[numeric_cols] = df[numeric_cols].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
    
    return df
";{0: 0.48946588687495973}
3463;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df[df.columns[:-2]] = (df[df.columns[:-2]] - df[df.columns[:-2]].min()) / (df[df.columns[:-2]].max() - df[df.columns[:-2]].min())
    
    return df
";{0: 0.49227916259436755}
3465;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5453884548147766}
3466;"
  columns_to_select = ['Account length', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls',
                       'International plan', 'Voice mail plan']
  
  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5445815113477346}
3468;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
3474;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3475;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using Min-max scaler
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 
                    'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.48946588687495973}
3476;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize numerical columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5465491988326635}
3477;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
   
    return df
";{0: 0.543617883572581}
3478;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  # Select only the specified columns
  df = df[columns_to_select]
  
  # Perform one-hot encoding with drop_first=True for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  # Standardize numeric columns using standard scaling
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.539026991310456}
3480;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Apply Min-Max Scaling to selected columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

  return df
";{0: 0.49404973383656314}
3481;"
    # Selecting relevant columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numeric columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
   
    return df
";{0: 0.5427807450642097}
3485;"
    # Keep the same columns from v0
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply Min-Max scaling to numeric columns instead
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4950188886217649}
3487;"
  # Add One more important column
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls',
                       'Total day charge']
  
  # Filter the dataframe to keep only selected columns
  df = df[columns_to_select]
  
  # Perform one-hot encoding with drop_first=True on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls',
                  'Total intl calls', 'Total day charge']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5500794554103121}
3489;"
  # Selecting the 8 most important columns from the dataset
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Applying z-score normalization to selected columns
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()

  return df
";{0: 0.5058052026340709}
3491;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df = df[columns_to_select]
  
  # Perform one-hot encoding with drop_first=True on categorical columns and standardize numeric columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.544736926597856}
3492;"
    # Selecting 8 most important columns and performing one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
   
    return df
";{0: 0.5465491988326635}
3496;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5399462779440283}
3497;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5400029672864319}
3500;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding and dropping the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  cols_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[cols_to_standardize] = (df[cols_to_standardize] - df[cols_to_standardize].mean()) / df[cols_to_standardize].std()
  
  return df
";{0: 0.5126846389084921}
3501;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
                       
  df = df[columns_to_select]

  # Perform one-hot encoding with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5428989483739024}
3504;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns and drop the first level to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5119573661812195}
3506;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  # Select only the specific columns
  df = df[columns_to_select]
  
  # Perform one-hot encoding with drop_first=True for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  # Standardize numeric columns using standard scaling
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.547135099418564}
3509;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization (Z-score normalization) for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5398918561753208}
3511;"
    # Keep only the selected columns and apply one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5442892071686982}
3512;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                           columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.5307613413953793}
3514;"
    # Keep only the specified columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns using min-max scaling
    df[numeric_cols] = df[numeric_cols].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
    
    return df
";{0: 0.49421980186377407}
3517;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls',
                       'Total day charge']
  
  df = df[columns_to_select]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls',
                  'Total intl calls', 'Total day charge']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.539972087768698}
3518;"
    # Select the 8 most important columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3520;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using min-max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
3527;"
  df = df[['Account length', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on the categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization for better feature scaling and interpretability
  columns_to_standardize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[columns_to_standardize] = (df[columns_to_standardize] - df[columns_to_standardize].mean()) / df[columns_to_standardize].std()
  
  return df
";{0: 0.5135436993111767}
3533;"
    # Selecting important columns and applying one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
   
    return df
";{0: 0.5463576095999783}
3534;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                       'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                       'Customer service calls']
  
  df = df[columns_to_select]
  
  # Perform one-hot encoding on categorical columns and drop the first level for each column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                  'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5481095432501507}
3536;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max normalization for all columns except the categorical ones
    df[df.select_dtypes(include=[np.number]).columns] = (df.select_dtypes(include=[np.number]) - df.select_dtypes(include=[np.number]).min()) / (df.select_dtypes(include=[np.number]).max() - df.select_dtypes(include=[np.number]).min())
    
    return df
";{0: 0.49483501439173827}
3543;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
   
    return df
";{0: 0.5425585228419875}
3552;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3555;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df[df.columns[:-2]] = (df[df.columns[:-2]] - df[df.columns[:-2]].mean()) / df[df.columns[:-2]].std()
    
    return df
";{0: 0.547135099418564}
3557;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardizing numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
3559;"
    # Selecting the specified columns and performing one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3560;"
    # Select the 8 most important columns and one-hot-encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5503707294147574}
3561;"
    # One-hot encode 'International plan' and 'Voice mail plan', drop first column
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5425585228419875}
3563;"
    # Select specific columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes',
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
3565;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns using z-score normalization
    df[numeric_cols] = df[numeric_cols].apply(lambda x: (x - x.mean()) / x.std())
    
    return df
";{0: 0.5419200251894052}
3567;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls', 'Total day charge']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls',
                  'Total intl calls', 'Total day charge']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5418602773281205}
3568;"
    # One-hot encode 'International plan' and 'Voice mail plan', drop first to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408046078531731}
3572;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Apply z-score normalization using lambda function
    df[numeric_cols] = df[numeric_cols].apply(lambda x: (x - x.mean()) / x.std())

    return df
";{0: 0.5003138188107398}
3578;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns using Min-Max normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49215045063334895}
3579;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Implementing Min-Max Scaling on selected columns for normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
  
  return df
";{0: 0.4930936757376479}
3581;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4932427903695212}
3582;"
  return df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'Total day charge']].pipe(
                 lambda d: pd.concat([d.select_dtypes('number').apply(lambda x: (x - x.mean()) / x.std()),
                                      pd.get_dummies(d.select_dtypes('object'), drop_first=True)], axis=1))
";{0: 0.5475887953854055}
3586;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4950188886217649}
3588;"
# Make it more concise by applying drop_first=True to get_dummies and adding an empty function for future improvements

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5427807450642097}
3593;"
    # One-hot encode 'International plan' and 'Voice mail plan', drop first to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3594;"
    # Selecting columns and one-hot-encoding categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5473401320373897}
3596;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5483363006197652}
3604;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49404973383656314}
3605;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes',
                  'Customer service calls', 'Total intl calls']
  
  # Apply Min-Max scaling to selected numeric columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

  return df
";{0: 0.4932427903695212}
3607;"
  # Selecting essential columns from the dataset
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls']]
  
  # Performing one-hot encoding on categorical columns with drop_first enabled
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 
                  'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5445815113477346}
3611;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5390642699684242}
3612;"
    # Selecting and one-hot encoding categorical columns, dropping first to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408781575451838}
3613;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df[df.select_dtypes(include=[np.number]).columns] = (df.select_dtypes(include=[np.number]) - df.select_dtypes(include=[np.number]).mean()) / df.select_dtypes(include=[np.number]).std()
    
    return df
";{0: 0.5434891716115624}
3616;"
    # One-hot encode 'International plan' and 'Voice mail plan', drop first to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
3617;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']

  df = df[columns_to_select]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5409547932382578}
3618;"
    # One-hot encode the categorical columns and drop the first encoded column to prevent multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
   
    return df
";{0: 0.5465491988326635}
3623;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'Customer service calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']],
                           columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.5322345348685728}
3624;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5065389435442538}
3625;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                         'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                         'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Select only the specified columns
    df = df[columns_to_select]
    
    # Perform one-hot encoding with drop_first=True for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize numeric columns using standard scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3626;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  df = df[columns_to_select]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  # Apply z-score normalization to numeric columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5444323967158613}
3633;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardization for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5444323967158613}
3634;"
  # Selecting relevant columns
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

  # One-hot encoding for categorical features with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5459971193332155}
3636;"
    # One-hot encode categorical columns and normalize numerical columns using Z-score
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408781575451838}
3638;"
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls']]
  
  # Performing one-hot encoding on categorical columns with drop_first enabled
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls',
                  'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5453884548147766}
3639;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49521047785445005}
3640;"
  # Keep only the relevant columns needed for modeling
  df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid the dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5408781575451838}
3641;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
                       
  # Select the desired columns from the dataframe
  df = df[columns_to_select]

  # Perform one-hot encoding with drop_first=True on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.539026991310456}
3643;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # Perform one-hot encoding on categorical columns with drop_first=True to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Applying z-score normalization to all numeric columns
  numeric_cols = df.select_dtypes(include=[np.number]).columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5455585228419875}
3645;"
# Continuing the implementation and comments
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Implementing Min-Max Scaling on selected columns for normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
  
  return df
";{0: 0.4876524729454517}
3649;"
  # Define the columns to be selected
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  # Select only the specified columns
  df = df[columns_to_select]
  
  # Perform one-hot encoding with drop_first=True for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # List of numeric columns to be standardized
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  
  # Standardize numeric columns using standard scaling
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5481095432501507}
3656;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                         'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                         'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Select required columns
    df = df[columns_to_select]
    
    # Perform one-hot encoding with drop_first=True
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
3657;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standard scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5418228906580793}
3662;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding on categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3664;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply z-score normalization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5481095432501507}
3665;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encode categorical columns and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected numeric columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5408046078531731}
3667;"
    # Selecting columns and one-hot encoding categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49421980186377407}
3668;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49039097303494517}
3670;"
    selected_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                        'Total intl minutes', 'Customer service calls', 'Total intl calls',
                        'International plan', 'Voice mail plan']
    
    df = pd.get_dummies(df[selected_columns],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4867997105395731}
3673;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalization using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49039097303494517}
3682;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.491219801863774}
3687;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49521047785445005}
3691;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
              'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns and Z-score normalization for numerical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5455585228419875}
3696;"
    # Get dummies for categorical columns and drop first to avoid dummy variable trap
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numerical columns using Z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5427807450642097}
3697;"
  columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                       'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                       'Total night minutes', 'Total intl minutes', 'Customer service calls']
  
  # Keep only selected columns
  df = df[columns_to_select]
  
  # Perform one-hot encoding with drop_first=True on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5408781575451838}
3698;"
    # Selecting specific columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49600141105917633}
3699;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding on categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3701;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'International plan', 'Voice mail plan', 'Customer service calls']]

  # Perform one-hot encoding on categorical columns with drop_first=True to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns using z-score normalization
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl calls', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
  return df
";{0: 0.5350557304096364}
3702;"
    columns_to_select = ['Account length', 'Total intl calls', 'International plan',
                         'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                         'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Select required columns
    df = df[columns_to_select]
    
    # Perform one-hot encoding with drop_first=True
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5381384315177865}
3703;"
  df = df[['Account length', 'Total intl calls', 'International plan',
           'Voice mail plan', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls']]
  
  # One-hot encoding for categorical variables with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Applying z-score normalization to all numeric columns
  numeric_cols = df.select_dtypes(include=[np.number]).columns
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5473401320373897}
3705;"
    # One-hot encoding for categorical columns and dropping NAs
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']].dropna(),
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalization using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4930936757376479}
3706;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5490973356273756}
3707;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
3708;"
    # Select specific columns from the DataFrame
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding for categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5461737353699517}
3712;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5452251895086542}
3715;"
    selected_columns = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    df = pd.get_dummies(df[selected_columns],
                        columns=['International plan', 'Voice mail plan'], 
                        drop_first=True)
    
    # Standard scaling for all features
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5297900904241283}
3716;"
    # Select the columns with most predictive power
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
3718;"
    # One-hot encode 'International plan' and 'Voice mail plan' columns and drop the original columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Select the most important numeric columns
    columns_to_keep = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df = df[columns_to_keep]

    # Normalize the numeric columns using Min-Max scaling
    df = (df - df.min()) / (df.max() - df.min())

    return df
";{0: 0.362530034619786}
3719;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
3720;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4914420240859962}
3721;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization for numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5455585228419875}
3722;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Feature scaling using standard scaler for numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5490973356273756}
3723;"
    # Selecting only specified columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5400029672864319}
3724;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization (Z-score normalization) for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5455585228419875}
3726;"
    # Use one-hot-encoding and min-max scaling to preprocess the dataset
    # Keep the same columns and steps as v2 but improve if needed
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns using min-max scaling
    df[numeric_cols] = df[numeric_cols].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
    
    return df
";{0: 0.48961607226004444}
3728;"
    # Keep the 8 most important columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49421980186377407}
3734;"
    # Include only selected columns in the dataset
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5465491988326635}
3735;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4932427903695212}
3737;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Applying min-max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4895394365669704}
3740;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3741;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standard scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5418228906580793}
3747;"
    # Selecting the important columns and performing one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5407339614384787}
3749;"
    # Selecting the most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
3754;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()  # Apply z-score normalization to all columns
    
    return df
";{0: 0.5307613413953793}
3756;"
    # Selecting and encoding categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5427807450642097}
3759;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying min-max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49048416967986597}
3760;"
    # Selecting important columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
3763;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numeric columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5409547932382578}
3764;"
    # One-hot encode categorical columns and drop NA values
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply min-max scaling to selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4915602273956889}
3766;"
    # Return a DataFrame with selected columns, one-hot-encoded categorical columns and standardized numerical columns
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                              'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                          columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std() if x.name in ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls'] else x, axis=0)
";{0: 0.5444323967158613}
3768;"
    dummified_df = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)
    numeric_df = (df.select_dtypes(include=['int64', 'float64']) - df.select_dtypes(include=['int64', 'float64']).mean()) / df.select_dtypes(include=['int64', 'float64']).std()

    return pd.concat([numeric_df, dummified_df], axis=1)
";{0: 0.4768657159833631}
3769;"
    # Select the 8 most important columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5455585228419875}
3773;"
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    columns_to_keep = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls', 'Total intl calls']

    df = df[columns_to_keep]

    # Standard scaling for numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.4091191594800777}
3774;"
    # Selecting the important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5418228906580793}
3777;"
    # Select relevant columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding on categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
3778;"
    # Selecting important columns and encoding categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
3784;"
    # Select the relevant columns and apply one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define the numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49439710682831306}
3789;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity (dummy variable trap)
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Feature scaling: standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
3791;"
    # Selecting important columns and applying one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5426673663794024}
3793;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying Min-Max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4914420240859962}
3799;"
# Improved version of `select_columns_and_return_dataframe_v2`
# Handles missing implementation for `select_columns_and_return_dataframe_v3`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3800;"
    # Select specific columns and one-hot encode categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max normalization of numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49048416967986597}
3801;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                          columns=['International plan', 'Voice mail plan'], drop_first=True)
";{0: 0.34131096973202235}
3802;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
3805;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numerical columns using Z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5490973356273756}
3808;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Feature scaling using z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3809;"
    # Select the 8 most important columns and one-hot-encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Perform min-max scaling on numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4950188886217649}
3812;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5310288541867489}
3815;"
    # Select relevant columns for preprocessing
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3816;"
    # One-hot encode categorical columns and drop the original columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3819;"
    # Keep only the selected columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5490973356273756}
3823;"
    # One-hot encode 'International plan' and 'Voice mail plan'
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Selected important columns
    columns_to_keep = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls', 'Total intl calls']

    df = df[columns_to_keep]

    # Normalize the numeric columns using Min-Max scaling
    df = (df - df.min()) / (df.max() - df.min())

    return df
";{0: 0.3655321050131607}
3827;"
    # Selecting specific columns and one-hot encoding for categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5467489990324637}
3829;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Min-max scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4895394365669704}
3830;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Apply z-score normalization without using lambda function
    for col in numeric_cols:
        df[col] = (df[col] - df[col].mean()) / df[col].std()

    return df
";{0: 0.5020843900529353}
3832;"
    # Selecting relevant columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5444323967158613}
3835;"
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    columns_to_keep = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls', 'Total intl calls']

    df = df[columns_to_keep]

    # Normalize the numeric columns using Standard scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.40723265641259304}
3838;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Min-Max scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49039097303494517}
3839;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Min-max scaling for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4932427903695212}
3840;"
    # Selecting and preprocessing the most important columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.544736926597856}
3841;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max normalization of numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4957963784403506}
3847;"
    # Selecting columns and applying one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.48946588687495973}
3849;"
    df = pd.get_dummies(df[['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply min-max normalization to numerical columns
    numeric_cols = ['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.3402603502378783}
3851;"
    # Selecting relevant columns and one-hot encoding categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4914420240859962}
3857;"
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    columns_to_keep = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls', 'Total intl calls']

    df = df[columns_to_keep]

    # Normalize the numeric columns using Min-Max scaling
    df = (df - df.min()) / (df.max() - df.min())

    return df
";{0: 0.3631511526322083}
3859;"
    # Keep selected columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5483363006197652}
3865;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Account length', 'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5093599635838169}
3867;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
3870;"
    # One-Hot-Encoding categorical columns
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5465491988326635}
3873;"
    # Keep numeric and categorical columns, apply one-hot encoding to categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                            'Customer service calls', 'Account length', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls', 'Account length']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5109683559001927}
3874;"
    # Selecting columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3879;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']

    # Apply Min-Max scaling to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.399655786679438}
3880;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Account length', 'Customer service calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5110004283821764}
3883;"
    # Select specific columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.539026991310456}
3884;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Feature scaling: Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
3885;"
    df = pd.get_dummies(df[['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.33471299871299875}
3888;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Perform Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49521047785445005}
3890;"
    # Select relevant columns and one-hot encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
3892;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Selecting relevant columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.547135099418564}
3894;"
    # Selecting the 8 most important columns and one-hot-encoding categorical features
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5425585228419875}
3897;"
    # One-hot encode categorical columns and drop the first encoded column to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
3899;"
    # One-hot encode categorical columns and scale numerical columns using Min-Max scaling
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4957963784403506}
3902;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49227916259436755}
3909;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
3910;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
             'Customer service calls', 'Account length', 'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls', 'Account length']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5073405807466737}
3911;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'Total intl calls',
             'International plan', 'Voice mail plan']]

    df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
    df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5417296940131586}
3912;"
    # Select relevant columns and perform one-hot-encoding for categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.40135364506261373}
3917;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns using standardization
    df[numeric_cols] = df[numeric_cols].apply(lambda x: (x - x.mean()) / x.std())
    
    return df
";{0: 0.5453884548147766}
3923;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standard scaling for numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5463576095999783}
3925;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Min-max scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49227916259436755}
3926;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Applying standardization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
3927;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.491328645401189}
3931;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.547135099418564}
3935;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49421980186377407}
3937;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalization using Robust scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5480229337805533}
3938;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']].dropna(),
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalization using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49421980186377407}
3939;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    # Apply Min-Max scaling normalization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49404973383656314}
3940;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
3943;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalization for numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5463576095999783}
3944;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns to have mean 0 and standard deviation 1
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5457358278065264}
3945;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply z-score normalization to numerical columns
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.5416402005461817}
3948;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize the numeric columns in the range [0, 1]
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
3949;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']

    # Standardize numeric columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.49572292654861466}
3950;"
    # Drop NA values
    df = df.dropna()

    # Get dummies for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5498378021212666}
3951;"
    # Selecting specified columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Scaling selected numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
3952;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']

    # Min-Max scaling for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.40148775752549337}
3954;"
    # Select only the specified columns and perform one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply min-max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4932427903695212}
3957;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply robust scaling to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / np.percentile(df[numeric_cols], 75) - np.percentile(df[numeric_cols], 25)
    
    return df
";{0: 0.3540199030431845}
3959;"
    selected_columns = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                        'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                        'Customer service calls']
    
    df_processed = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_columns = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                       'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df_processed[numeric_columns] = (df_processed[numeric_columns] - df_processed[numeric_columns].mean()) / df_processed[numeric_columns].std()
    
    return df_processed
";{0: 0.5500987527270449}
3963;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
        'Total intl minutes', 'Customer service calls', 'Total intl calls']] = (
        df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']] - df[
            ['Account length', 'Total day minutes', 'Total eve minutes',
             'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']].mean()) / df[
           ['Account length', 'Total day minutes', 'Total eve minutes',
            'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']].std()

    return df
";{0: 0.5453884548147766}
3965;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5427807450642097}
3967;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization (Z-score normalization) for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5011283319540201}
3972;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4031242163048093}
3973;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Perform Standard Scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5457358278065264}
3979;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']

    # Normalize numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.40390949685998445}
3980;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']]
    
    # Convert categorical columns into numerical using one-hot-encoding and dropping first column to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49295048619048487}
3981;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply min-max scaling to selected numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.48946588687495973}
3982;"
    # Selecting columns and one-hot encoding categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5444323967158613}
3984;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
3987;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'Total intl calls',
             'International plan', 'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5444323967158613}
3988;"
    # Selecting and encoding categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using Z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5461737353699517}
3989;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4950188886217649}
3990;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numerical columns using Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.491328645401189}
3994;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Applying z-score normalization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5475538280063066}
3995;"
    # Only keep the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # Perform one-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.48649592303044453}
3997;"
    # Select the specified columns from the dataframe
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes',
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Perform one-hot encoding on categorical columns and drop the first column to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5452251895086542}
4000;"
    # Select required columns and one-hot encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numerical columns using Z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
4008;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization for numerical columns
    numerical_cols = ['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                      'Total intl minutes', 'Customer service calls']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
    
    return df
";{0: 0.5444323967158613}
4013;"
    # Selecting the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # Perform one-hot encoding for the 'International plan' column
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4820809119929169}
4015;"
    # One-hot encode categorical columns and drop redundant columns
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5399462779440283}
4016;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
4017;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5481095432501507}
4021;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standard scaling for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
4022;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using Min-max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.491328645401189}
4023;"
    # Select the 8 most important columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4025;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49039097303494517}
4033;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']] = (df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']] - df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']].std()
    
    return df
";{0: 0.5417296940131586}
4035;"
    # Select relevant columns and apply one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49600141105917633}
4038;"
    # Select relevant columns and apply one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5490973356273756}
4040;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.491219801863774}
4041;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
4042;"
    df = pd.get_dummies(df[['Total eve charge', 'Total night charge', 'Total intl charge', 'Total intl calls', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total eve charge', 'Total night charge', 'Total intl charge', 'Total intl calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.39210788275263625}
4044;"
    # Selecting required columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan'], drop_first=True)

    # Applying min-max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4820809119929169}
4046;"
    # Select the 8 most important columns based on feature importance analysis or domain knowledge
    df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop the original columns
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.4974949179867084}
4047;"
    # Select relevant columns and apply one-hot encoding for categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
4049;"
    df = pd.get_dummies(df[['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply standardization to numerical columns
    numeric_cols = ['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.3360366301184314}
4050;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5335721251157493}
4053;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49677082227193725}
4057;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5311646776162905}
4058;"
    # Selecting relevant columns and performing one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying min-max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4924132750572472}
4060;"
    # Keep only specified columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49600141105917633}
4061;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan']],
                        columns=['International plan'], drop_first=True)
    
    # Normalize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5001625206543111}
4066;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5418228906580793}
4067;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using min-max scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4895068112315818}
4073;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Min-max scaling for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49800768065165285}
4074;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define the numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Robust scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25)
    
    return df
";{0: 0.3896457474423576}
4075;"
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    dummified_df = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)
    
    # Select numerical columns and apply z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    numeric_df = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return pd.concat([numeric_df, dummified_df], axis=1)
";{0: 0.5437519960354606}
4078;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                            'Customer service calls', 'Account length', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls', 'Account length']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5100803067740708}
4079;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns using z-score normalization
    df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
    
    return df
";{0: 0.5463576095999783}
4081;"
    # Select relevant columns and perform one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49227916259436755}
4084;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5427807450642097}
4090;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Min-Max scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4932427903695212}
4096;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5481095432501507}
4098;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls', 'Total intl calls', 
                            'International plan', 'Voice mail plan']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408781575451838}
4099;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5318653825938594}
4102;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply standardization to selected numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5465491988326635}
4103;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Selecting numerical columns for min-max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply min-max scaling to selected numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49421980186377407}
4110;"
    # Selecting relevant columns and one-hot-encoding categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numerics = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                'Customer service calls', 'Total intl calls']

    # Normalize numerical columns using Min-Max scaling
    df[numerics] = (df[numerics] - df[numerics].min()) / (df[numerics].max() - df[numerics].min())

    return df
";{0: 0.4914420240859962}
4111;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot-encode 'International plan' and 'Voice mail plan'
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Min-max scaling for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49030147956796827}
4113;"
    # One-hot encode categorical columns and drop original columns
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numerical columns using z-score normalization
    cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
    
    return df
";{0: 0.5473401320373897}
4114;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5399462779440283}
4115;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Standard scaling for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5399462779440283}
4116;"
    col_selection = ['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Select important columns from the dataset
    df = df[col_selection]
    
    # One-hot encode categorical columns and drop the original columns
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5036940521858426}
4118;"
    # Select relevant columns based on importance
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5418228906580793}
4121;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49600141105917633}
4124;"
    # Select the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes']]

    # One-hot-encode 'International plan' and 'Voice mail plan'
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Total intl calls']

    # Min-max scaling for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.3767277289479124}
4128;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'Total intl calls',
             'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5408046078531731}
4132;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls',
             'Total day charge', 'Total eve charge', 'Total night charge', 'Total intl charge']]

    # Perform one-hot encoding for the 'International plan' column
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

    # Feature scaling for numerical columns using Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day charge', 'Total eve charge', 'Total night charge', 'Total intl charge']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4879152486947893}
4133;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
4135;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
4138;"
    return pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                              'Total intl minutes', 'Customer service calls', 'Total eve calls',
                              'Total day calls', 'Account length']],
                          columns=['Customer service calls'], drop_first=True)
";{0: 0.23571423301794575}
4140;"
    # Keep selected columns and perform one-hot encoding for 'International plan' and 'Voice mail plan'
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply Min-Max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49227916259436755}
4141;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49677082227193725}
4142;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Feature scaling using z-score normalization for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
4144;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numerical columns using z-score normalization
    cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
    
    return df
";{0: 0.5453884548147766}
4145;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan']], 
                        columns=['International plan'], drop_first=True)

    # Normalize numerical columns using z-score normalization
    cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
    
    return df
";{0: 0.49747771664500373}
4147;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'Total intl calls',
             'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardization (Z-score normalization) for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
4149;"
    # Selecting important columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Defining numerical columns for Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Min-Max scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49215045063334895}
4152;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardization for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408781575451838}
4156;"
    # Get dummies and drop NA values
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    # Z-score normalization for numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5465491988326635}
4157;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numerics = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                'Customer service calls', 'Total intl calls']

    # Normalize numerical columns using Min-Max scaling
    df[numerics] = (df[numerics] - df[numerics].min()) / (df[numerics].max() - df[numerics].min())

    return df
";{0: 0.49039097303494517}
4158;"
    # Select relevant columns and apply one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Scale numerical columns using Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4950188886217649}
4159;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4924132750572472}
4162;"
# Improved version of select_columns_and_return_dataframe_v2 function
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                            'Customer service calls', 'Account length', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls', 'Account length']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.514646516819733}
4163;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply Standardization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
4166;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes',
                           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Normalizing the numerical columns using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49404973383656314}
4167;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls',
             'Total day charge', 'Total eve charge', 'Total night charge', 'Total intl charge']]

    # One-hot encoding for the 'International plan' column
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day charge', 'Total eve charge', 'Total night charge', 'Total intl charge']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4826342029431553}
4168;"
    # Selecting relevant columns and performing one-hot encoding
	df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                        	'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                        	'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
	numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
	df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

	return df
";{0: 0.5463576095999783}
4171;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.530203260791496}
4177;"
    # Select relevant columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply min-max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49521047785445005}
4183;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan']],
                        columns=['International plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.49836071885250927}
4184;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply Z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5444323967158613}
4186;"
    # Selecting and encoding relevant columns
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4187;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan']], 
                        columns=['International plan'], drop_first=True)

    # Normalize numerical columns using Min-Max scaling
    cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].min()) / (df[cols_to_normalize].max() - df[cols_to_normalize].min())

    return df
";{0: 0.48649592303044453}
4193;"
    # Select relevant columns and one-hot encode categorical features
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Normalize numerical columns using z-score normalization
    df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
    
    return df
";{0: 0.5434891716115624}
4195;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standardization to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5490973356273756}
4201;"
    # One-hot encode 'International plan' and 'Voice mail plan', drop first to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4203;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'],
                        drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.48601012248986003}
4207;"
# Selecting columns and applying one-hot encoding for categorical variables
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5398918561753208}
4208;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                           'Total intl minutes', 'Customer service calls', 'Total intl calls', 
                           'International plan', 'Voice mail plan']],
                           columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Z-score normalization of numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5427807450642097}
4210;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Perform standardization on numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5303540903540903}
4215;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.50994376219402}
4219;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5442892071686982}
4220;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply min-max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49421980186377407}
4237;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    # Standardization for numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.547135099418564}
4239;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardizing numerical columns to have zero mean and unit variance
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
4241;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4930936757376479}
4247;"
    # Select relevant columns and one-hot-encode categorical variables
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49699757964155183}
4249;"
    # Select relevant columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5463576095999783}
4251;"
    # Keep only the specified columns and apply one-hot-encoding
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5336604331341174}
4255;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5444323967158613}
4257;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numerical columns using z-score normalization
    cols_to_normalize = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[cols_to_normalize] = (df[cols_to_normalize] - df[cols_to_normalize].mean()) / df[cols_to_normalize].std()
    
    return df
";{0: 0.5463576095999783}
4258;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply z-score normalization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5455585228419875}
4259;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan']], 
                        columns=['International plan'], drop_first=True)

    # Standardize numerical columns using Z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.4992379118349654}
4264;"
# Improved version of select_columns_and_return_dataframe_v2

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Select specific columns and perform one-hot encoding
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.530203260791496}
4265;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']]

    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5153513055751588}
4267;"
    # Selecting relevant columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls', 'Total intl calls', 
                            'International plan', 'Voice mail plan']],
                            columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5437519960354606}
4270;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encoding for the 'International plan' column
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

    # Applying min-max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4786177085297135}
4271;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.534514389216376}
4278;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Robust scaling for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / np.percentile(df[numeric_cols], 75) - np.percentile(df[numeric_cols], 25)

    return df
";{0: 0.34958624146666584}
4281;"
    # Select relevant columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encode categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5463576095999783}
4284;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Standardize numerical columns using Z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5408046078531731}
4286;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    # One-hot encoding for the 'International plan' column
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)

    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4812151111271161}
4288;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Robust Scaling to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25)

    return df
";{0: 0.38872066128237215}
4290;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5336604331341174}
4293;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4837998048621551}
4297;"
    # Select relevant columns and encode categorical variables
    df = pd.get_dummies(df[['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls',
                            'International plan', 'Voice mail plan']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply min-max normalization to numerical columns
    numeric_cols = ['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.34120392215419837}
4302;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5418228906580793}
4303;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5371454971454972}
4305;"
    return pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                              'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                              'Customer service calls', 'Account length', 'International plan', 'Voice mail plan']],
                          columns=['International plan', 'Voice mail plan'], drop_first=True)
";{0: 0.31403541150891034}
4307;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply standard scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
4309;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Scale numerical columns using Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4950188886217649}
4310;"
    col_selection = ['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Select the specified columns
    df = df[col_selection]
    
    # Perform one-hot encoding for categorical column and drop original columns
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
    
    # Apply z-score standardization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.4957966162884067}
4311;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    # Z-score normalization for numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5418228906580793}
4312;"
    # Select relevant columns and perform one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49439710682831306}
4313;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan'], drop_first=True)

    # Standardization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.4939747539402286}
4315;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Z-score normalization for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5453884548147766}
4316;"
    # Drop NA values
    df.dropna(inplace=True)

    # Select and preprocess chosen columns
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Perform min-max scaling on numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49045417965263455}
4317;"
    df = pd.get_dummies(df[['Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply min-max normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4201235521235521}
4318;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                           'Total intl minutes', 'Customer service calls', 'Total intl calls', 
                           'International plan', 'Voice mail plan']],
                           columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Min-Max scaling of numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4886075569658148}
4322;"
# Finalizing the function with the most effective preprocessing steps
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    # Selecting relevant columns and performing one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns for better scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
4324;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardization for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5444323967158613}
4326;"
    # One-hot encode categorical columns and drop target column
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.530203260791496}
4327;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5465491988326635}
4328;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4329;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using Robust Scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25)
    
    return df
";{0: 0.3941659756379237}
4330;"
    # Selecting specific columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5425585228419875}
4331;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5419200251894052}
4335;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4336;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply min-max scaling to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49045417965263455}
4337;"
    dummified_df = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)
    
    # Select numerical columns and apply z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    numeric_df = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return pd.concat([numeric_df, dummified_df], axis=1)
";{0: 0.5473401320373897}
4344;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardization (Z-score normalization) for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5418228906580793}
4346;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'],
                        drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5293883893883894}
4348;"
    # Include necessary columns and perform one-hot encoding with drop_first
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls', 'Total intl calls', 
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5473401320373897}
4350;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardization for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5408781575451838}
4351;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Account length', 'Customer service calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5118369567892869}
4352;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes','Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5463576095999783}
4354;"
    # One-hot encode categorical columns and select important numeric columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
4358;"
    df = pd.get_dummies(df[['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply min-max scaling (normalization) to numerical columns
    numeric_cols = ['Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.3305225225225225}
4362;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardizing numerical columns using mean normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4950188886217649}
4363;"
    # Selecting relevant columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
4370;"
    df.dropna(inplace=True)

    # Select and preprocess chosen columns
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Perform min-max scaling on numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.484583734308505}
4371;"
    # Select relevant columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5381200440947839}
4372;"
    # Select only the important columns and one-hot-encode categorical variables
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5481095432501507}
4373;"
    # Selecting relevant columns and applying one-hot encoding with drop_first
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4376;"
    df = pd.get_dummies(df[['Total day charge', 'Total night charge', 'Total intl charge', 'Customer service calls', 'Total intl calls', 
                            'International plan', 'Voice mail plan']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day charge', 'Total night charge', 'Total intl charge', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.4819325010629359}
4377;"
    # Drop rows with missing values
    df.dropna(inplace=True)

    # Select and preprocess chosen columns
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5455585228419875}
4378;"
    # Keep only the relevant columns for analysis
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls']], drop_first=True)
    
    # Standardize numerical columns using mean and standard deviation
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.40184942914505106}
4380;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using min-max scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4896113863949806}
4384;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardizing numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5475538280063066}
4388;"
    # Select specific columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]

    # One-hot encode categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5467489990324637}
4390;"
# Improved version of select_columns_and_return_dataframe_v2 function

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49048416967986597}
4392;"
    return pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
";{0: 0.34500940500940497}
4395;"
    return pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                             'Account length', 'Customer service calls', 'International plan', 'Voice mail plan']],
                          columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
";{0: 0.34433525087887507}
4396;"
    # Select relevant columns and apply one-hot encoding
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                            'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply min-max scaling (normalization) to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.5089287553340587}
4398;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply log transformation to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']
    df[numeric_cols] = np.log1p(df[numeric_cols])
    
    return df
";{0: 0.3954506442958907}
4401;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
4405;"
    # One-hot encode categorical columns and drop first to prevent multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5473401320373897}
4406;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls']], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.4035377408333627}
4407;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                            'Customer service calls', 'Account length', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls', 'Account length']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5128200328014682}
4413;"
    # Select only the specified columns
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop the first column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5310288541867489}
4414;"
    df = df.dropna()   

    # Get dummies for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5465491988326635}
4418;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    # Normalize numerical columns using min-max scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.46091604040137285}
4419;"
    # Keep only selected columns and one-hot encode categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5426673663794024}
4423;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan']], columns=['International plan'], drop_first=True)

    # Standardization for numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.49050419403686546}
4426;"
    # Selecting important columns and performing one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
4429;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using Robust Scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5362225049803998}
4430;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
4431;"
    # Selecting columns and one-hot encoding categorical variables
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    # Removing rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.5418228906580793}
4434;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using min-max scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.48865912911237663}
4436;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4932427903695212}
4438;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
4440;"
    # Retain the original DataFrame
    df_copy = df.copy()
    
    # One-hot encoding for categorical columns and dropping NAs
    df = pd.get_dummies(df_copy[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4977586146491621}
4441;"
    # Select important columns and use one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5496061418896064}
4442;"
    df.dropna(inplace=True)

    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.48865912911237663}
4449;"
    # Select the 8 most important columns and encode categorical features
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Account length', 'Customer service calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize selected columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5144859634118035}
4450;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Account length', 'Customer service calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Account length', 'Customer service calls']
    
    # Apply z-score normalization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5101748349869235}
4455;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
4457;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                            'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.511601036529235}
4459;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Account length', 'Customer service calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Account length', 'Customer service calls']
    
    # Normalize selected numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5118369567892869}
4462;"
    # Select relevant columns related to customer activity data and churn prediction
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # Perform one-hot encoding for categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.531985791985792}
4463;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49130813573489307}
4469;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'],
                        drop_first=True)

    # Normalize numerical columns between 0 and 1
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4869970073100133}
4470;"
    df = pd.get_dummies(df[['Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply standardization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5113793929722201}
4472;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5461737353699517}
4473;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'Total intl minutes', 'Customer service calls', 
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total intl calls', 'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.3293951049323506}
4476;"
    return pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                              'Total intl minutes', 'Account length', 'Customer service calls', 
                              'International plan', 'Voice mail plan']],
                          columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply z-score normalization to all numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
";{0: 0.34064625850340136}
4481;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max scaling to selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4886642463082184}
4482;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5310288541867489}
4486;"
    # Select relevant columns and apply one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5399462779440283}
4488;"
    def preprocess_data(df: pd.DataFrame) -> pd.DataFrame:
        df = df[['Account length', 'Total intl calls', 'International plan', 'Total day minutes', 
                 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
        
        # One-hot encoding for the 'International plan' column
        df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
        
        # Applying min-max scaling to numerical columns
        numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                        'Total intl minutes', 'Customer service calls', 'Total intl calls']
        df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
        
        return df
";{0: 0.4812151111271161}
4494;"
    # Selecting columns of interest and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.5445815113477346}
4496;"
    df_copy = df.copy()
    
    # One-hot encoding for categorical columns and dropping NAs
    df = pd.get_dummies(df_copy[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49621510702809324}
4498;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    df.dropna(inplace=True)
    
    return df
";{0: 0.544736926597856}
4499;"
# Improved version of select_columns_and_return_dataframe_v2
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4950188886217649}
4501;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'Total intl calls',
             'International plan', 'Voice mail plan']]

    # One-hot encoding for categorical columns
    df[['International plan', 'Voice mail plan']] = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Min-Max scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4895394365669704}
4504;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply min-max scaling (normalization) to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49215045063334895}
4506;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply min-max normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
4508;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                            'Customer service calls', 'Account length', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls', 'Account length']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5137635146122275}
4509;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standardization to selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5465491988326635}
4513;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize numerical columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5503707294147574}
4518;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
             'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.5408781575451838}
4520;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    
    # Standardize numerical columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5118369567892869}
4530;"
    # Select relevant columns and perform one-hot encoding for categorical features
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score standardization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5362199140281332}
4538;"
    # Encode categorical variables and drop redundant columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5444323967158613}
4539;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4592413992530474}
4541;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Standardization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408781575451838}
4542;"
    # Selecting the most important columns and performing one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardizing numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4543;"
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
4544;"
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply min-max scaling to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.48865912911237663}
4548;"
    # Select columns and one-hot encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
4549;"
    # Select columns based on importance and one-hot-encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5473401320373897}
4551;"
    # Selecting 8 most important columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5418228906580793}
4553;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan']],
                        columns=['International plan'], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.49050419403686546}
4556;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Z-score normalization for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    # Drop rows with missing values
    df.dropna(inplace=True)
    
    return df
";{0: 0.5427807450642097}
4557;"
# Improved version of `select_columns_and_return_dataframe_v2` with additional columns
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls', 'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5173131834863997}
4560;"
    # Select necessary columns for preprocessing
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encode categorical features and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using min-max scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4895068112315818}
4562;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply min-max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49421980186377407}
4564;"
    # One-hot encode categorical columns and drop first to prevent multicollinearity
    dummified_df = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)
    
    # Select numerical columns and apply z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    numeric_df = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return pd.concat([numeric_df, dummified_df], axis=1)
";{0: 0.5442892071686982}
4565;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Robust Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5527332316928217}
4567;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls', 'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5155597588288654}
4568;"
    df.dropna(inplace=True)

    # Select and preprocess chosen columns
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Perform standardization on numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.530203260791496}
4573;"
    # Select relevant columns and perform one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply min-max scaling to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.48634757556279207}
4575;"
    # Copy the dataframe to work with
    df_copy = df.copy()
    
    # Perform one-hot encoding for categorical columns and drop NAs
    df = pd.get_dummies(df_copy[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    # Apply Min-Max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4932427903695212}
4577;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Account length', 'Customer service calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Account length', 'Customer service calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5135436993111767}
4580;"
    # Keep the same columns as in v0, adding the 'Area code' column
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Area code']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.37410690083256465}
4581;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan']],
                        columns=['International plan'], drop_first=True)

    # Z-score normalization for numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.4859657562474243}
4582;"
    # Selecting relevant columns for analysis
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls', 'International plan', 'Voice mail plan']]
    
    # One-hot encoding categorical features and drop the first column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardizing numerical columns using min-max scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4869970073100133}
4584;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.530203260791496}
4585;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Standard Scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
4586;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                            'Customer service calls', 'Account length', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max scaling to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Total day calls', 'Total eve calls', 'Total night calls', 'Total intl calls',
                    'Customer service calls', 'Account length']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.48143900484849844}
4587;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls', 'Total intl calls', 
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling for selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.491328645401189}
4589;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Standardization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
4591;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49215045063334895}
4593;"
    df_copy = df.copy()
    
    # One-hot encoding for categorical columns and dropping NAs
    df = pd.get_dummies(df_copy[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    # Standardization for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5490973356273756}
4594;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 
                            'Total night minutes', 'Total intl minutes', 'Customer service calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standardization to selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
4596;"
    # Select relevant columns and apply one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Area code']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.3751419784633869}
4599;"
    # Select relevant columns and apply one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5091879501667703}
4603;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan']], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.4852414399133518}
4604;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Defining numerical columns for Robust scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Robust scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5462523625383578}
4607;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5478918561753208}
4608;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.547135099418564}
4610;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Robust Scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5472159903135114}
4611;"
    # Keep selected columns and one-hot encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Robust Scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5435892722040346}
4612;"
    # One-hot encode 'International plan' and 'Voice mail plan', drop first columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Robust Scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5407545230605606}
4613;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
4618;"
    # Select 8 most important columns and apply one-hot-encoding to categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Define numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.543617883572581}
4619;"
    # One-hot encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Define numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5426673663794024}
4621;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5470668756816381}
4627;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Robust Scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5483703067723033}
4628;"
    # Define selected feature columns
    selected_cols = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                     'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                     'Customer service calls']

    # One-hot encoding for categorical columns
    df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Define numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5416402005461817}
4629;"
    # filtering and one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # applying Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49048416967986597}
4636;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using Standardization (Z-score scaling)
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
4638;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
4639;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'],
                        drop_first=True)

    # Standardization for numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.530203260791496}
4640;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4641;"
    # One-hot encode 'International plan' and 'Voice mail plan', drop first to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
4642;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5462523625383578}
4643;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Customer service calls']]
    
    # Convert categorical columns into one-hot encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.547135099418564}
4644;"
    # Select columns and perform one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Robust Scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5499746110031666}
4648;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Account length']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5152968838064513}
4653;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.491328645401189}
4654;"
    df = df.dropna()

    # Get dummies for categorical columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply Min-Max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4895394365669704}
4660;"
    # Selecting only important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    # One-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Robust scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5505263351410976}
4661;"
    # One-hot encode 'International plan' and 'Voice mail plan' columns and drop the original columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5443641729789354}
4662;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Standardization (Z-score normalization) to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4665;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total day calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numeric columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Total day calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5062432691419648}
4667;"
    # Select and one-hot encode important columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Robust Scaling to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5501883069720834}
4668;"
    df.dropna(inplace=True)

    # Select and preprocess chosen columns
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan']],
                        columns=['International plan'], drop_first=True)

    # Perform min-max scaling on numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4720713802565493}
4669;"
    # Select specific columns and apply one-hot-encoding to categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize selected numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5417296940131586}
4670;"
    # Forward fill to handle missing values
    df.fillna(method='ffill', inplace=True)

    # Select and preprocess chosen columns
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.534514389216376}
4671;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4672;"
    # Selecting relevant columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5470668756816381}
4673;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5445815113477346}
4674;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 
                            'Total night minutes', 'Total intl minutes', 'Customer service calls',
                            'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['Customer service calls'], drop_first=True)
    
    # Normalize selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Total day calls', 'Total eve calls', 'Total night calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.26985325206936334}
4675;"
    df = pd.get_dummies(df[['Account length', 'Total day calls', 'Total eve calls', 'Total intl calls',
                            'Total night calls', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize selected columns
    numeric_cols = ['Account length', 'Total day calls', 'Total eve calls', 'Total intl calls',
                    'Total night calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.3027612493129735}
4679;"
# Using get_dummies for one-hot encoding and scaling numerical columns using min-max scaling

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49421980186377407}
4682;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Scale numerical columns using Z-score standardization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5465491988326635}
4683;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes', 
                            'Total night minutes', 'Total intl minutes', 'Customer service calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize the selected numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5457358278065264}
4685;"
    # Select relevant columns and perform one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define the numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
4693;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls', 'Total intl calls', 
                            'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['Customer service calls'], drop_first=True)

    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Total intl calls', 'Total day calls', 'Total eve calls', 'Total night calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.27596023925728863}
4694;"
    # Selecting specific columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5473401320373897}
4695;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls', 'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5128568076474735}
4696;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls']], drop_first=True)

    # Normalize numerical columns by dividing by the maximum absolute value
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = df[numeric_cols] / np.max(np.abs(df[numeric_cols]))

    return df
";{0: 0.2783435192258722}
4698;"
# Fill in the implementation of the improved function here
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5427807450642097}
4699;"
    # Selecting important columns and applying one-hot encoding with drop_first=True
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalizing numeric columns using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49600141105917633}
4701;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply min-max scaling to all numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
4704;"
    # Select 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5427807450642097}
4706;"
    # Selecting the most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.547135099418564}
4708;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Specify the numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max scaling to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49048416967986597}
4709;"
    # Keep selected columns and perform one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-max scaling for selected columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4932427903695212}
4712;"
    df = pd.get_dummies(df[['Account length', 'Customer service calls', 'International plan', 
                            'Voice mail plan', 'Total intl calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total intl calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.32854257717982777}
4716;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49339820561964254}
4718;"
    # Select relevant columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Robust Scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5462523625383578}
4719;"
    # Drop rows with missing values
    df.dropna(inplace=True)

    # Select relevant columns and perform one-hot encoding
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply min-max scaling to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.48865912911237663}
4722;"
    # Make a copy of the dataframe to avoid modifying the original one
    df = df.copy()
    
    # Filter out the important columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define the numeric columns for Robust Scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Robust Scaling to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5517318145931525}
4724;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49876003174883154}
4725;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardizing numerical columns using Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4977586146491621}
4726;"
    # Include one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5473714055636327}
4736;"
    # Dummify categorical columns and drop the first level
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Scale numeric features using median and IQR
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5435126365109606}
4738;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-max scaling for selected columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49404973383656314}
4739;"
    # Encode categorical columns, scale numerical ones using standard scaling
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Perform standard scaling for numerical columns and min-max scaling for 'Total intl calls'
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    df['Total intl calls'] = (df['Total intl calls'] - df['Total intl calls'].min()) / (df['Total intl calls'].max() - df['Total intl calls'].min())

    return df
";{0: 0.5209388266812164}
4746;"
    selected_cols = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                     'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                     'Customer service calls']

    # One-hot encoding for categorical columns
    df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Define numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5461737353699517}
4748;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan',
                            'Voice mail plan', 'State']], columns=['International plan', 'Voice mail plan',
                                                                  'State'], drop_first=True)
    
    # Apply z-score standardization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.4892470473471757}
4750;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls', 'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5173131834863997}
4751;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply z-score normalization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5434891716115624}
4752;"
    # Selecting important columns and performing one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5435892722040346}
4753;"
    # Select columns and one-hot encode categorical features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Robust Scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5472159903135114}
4755;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply RobustScaler to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25)

    return df
";{0: 0.3940897887991507}
4756;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49048416967986597}
4758;"
    # Select relevant columns and apply one-hot encoding to categorical variables
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5465491988326635}
4760;"
    # Selecting columns
    selected_cols = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                     'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                     'Customer service calls']
    
    # One-hot encoding for categorical columns and dropping first column for each
    df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5437519960354606}
4762;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalizing numeric columns using Standard scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5473401320373897}
4763;"
    # Include only relevant columns and perform one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns by applying Z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5455585228419875}
4767;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numeric columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.544736926597856}
4768;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls', 'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    
    # Normalize numeric columns to have zero mean and unit variance
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5099845121577283}
4771;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize all selected numeric columns in the dataframe
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5453884548147766}
4773;"
    # Select a subset of columns
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'Total intl calls',
             'International plan', 'Voice mail plan']]

    # Perform one-hot encoding for categorical columns
    df[['International plan', 'Voice mail plan']] = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)

    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5419200251894052}
4776;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply robust scaling to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5405733821733822}
4784;"
    # Select and preprocess chosen columns
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5311646776162905}
4788;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
             'Total intl minutes', 'Total intl calls', 'Customer service calls', 'International plan']]
    
    # One-hot encoding for the 'International plan' column
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
    
    # Feature scaling for numerical columns using Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Total intl calls', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4829581049753731}
4790;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize all selected numeric columns in the dataframe
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5399462779440283}
4791;"
    # Select relevant columns and apply one-hot encoding
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Account length', 'Customer service calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize selected columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5118369567892869}
4794;"
    # Select the required columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5444323967158613}
4796;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize all selected numeric columns in the dataframe
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.544736926597856}
4797;"
    df = pd.get_dummies(df[['Account length', 'International plan', 'Voice mail plan', 
                            'Total intl calls', 'Total day minutes', 'Total eve minutes', 
                            'Total night minutes', 'Total intl minutes', 'Customer service calls',
                            'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.514646516819733}
4798;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max scaling to selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4914420240859962}
4803;"
    # Selecting desired columns and applying one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalizing numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5480229337805533}
4805;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan']],
                        columns=['International plan'], drop_first=True)

    # Apply standard scaling to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.4887465547560462}
4806;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standard Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5459971193332155}
4807;"
    # Select relevant columns and one-hot encode categorical variables
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Standardize numerical columns using Z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5425585228419875}
4808;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]

    # Perform one-hot encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Min-Max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4955994928130014}
4809;"
    # Selecting important columns and applying one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numeric columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5475538280063066}
4810;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5461737353699517}
4812;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Robust Scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5462523625383578}
4813;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Standard scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.547135099418564}
4814;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Perform z-score normalization for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5434891716115624}
4815;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalizing numeric columns using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4914420240859962}
4817;"
    df = pd.get_dummies(df[['Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls']
    
    # Apply mean normalization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.40342897084276397}
4818;"
    selected_cols = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                     'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                     'Customer service calls']

    # One-hot encoding for categorical columns and dropping the first column to prevent multicollinearity
    df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Define numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5453884548147766}
4821;"
    # Selecting the relevant columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]

    # One-hot encode categorical columns and drop the first column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5453884548147766}
4822;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Account length', 'Customer service calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max Scaling to selected numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Account length', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.483114126272021}
4824;"
    # Selecting the most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    # One-hot encode categorical columns and drop first to prevent multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Robust Scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5435126365109606}
4825;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49699757964155183}
4826;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Applying min-max scaling to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.5019224047617381}
4829;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply MinMaxScaler to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4924132750572472}
4830;"
    df = pd.get_dummies(df[['Account length', 'Customer service calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    
    # Normalize numeric columns to have zero mean and unit variance
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5108591355527874}
4832;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5435126365109606}
4834;"
    selected_cols = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                     'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                     'Customer service calls']

    # One-hot encoding for categorical columns and dropping first dummy variables
    df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Define numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    # Apply z-score normalization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5408046078531731}
4837;"
    # Selecting relevant columns and applying one-hot-encoding
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Applying z-score normalization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.530203260791496}
4841;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Standardization to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5427807450642097}
4844;"
    df = pd.get_dummies(df[['Account length', 'International plan', 'Voice mail plan',
                            'Total intl calls', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls',
                            'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5108906482751321}
4850;"
    # Select the most important columns and apply one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize selected numeric columns using median and quantiles
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5517318145931525}
4851;"
    df.dropna(inplace=True)
    
    # Select columns and perform one-hot encoding
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardization for numerical columns using z-score scaling
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5326042211756498}
4855;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using Z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5444323967158613}
4858;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standard Scaling to selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5437519960354606}
4859;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 
                            'Total night minutes', 'Total intl minutes', 'Customer service calls',
                            'Total intl calls', 'Total day calls', 'Total eve calls',
                            'Total night calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 
                    'Total night minutes', 'Total intl minutes', 'Customer service calls',
                    'Total intl calls', 'Total day calls', 'Total eve calls',
                    'Total night calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5164125212347439}
4860;"
    # Select columns and one-hot encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns using Robust Scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5470668756816381}
4861;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Min-Max scaling to selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
4862;"
    # Select only the desired columns and apply one-hot encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply z-score normalization to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
4866;"
    # Selecting specific columns and one-hot encoding categorical columns
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalizing numerical columns using Z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5267909867909868}
4869;"
    # Perform one-hot encoding on categorical columns and standardize numerical columns
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'],
                        drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.530203260791496}
4870;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'Total intl calls',
             'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5418228906580793}
4871;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
4874;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'],
                        drop_first=True)

    # Normalize numerical columns using z-score standardization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                    'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.534514389216376}
4877;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan']],
                        columns=['International plan'], drop_first=True)

    # Standardize numerical columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.4859657562474243}
4878;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls',
                            'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize numerical columns using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4924132750572472}
4879;"
    df = pd.get_dummies(df[['Account length', 'International plan', 'Voice mail plan',
                            'Total intl calls', 'Total day minutes', 'Total eve minutes',
                            'Total night minutes', 'Total intl minutes', 'Customer service calls',
                            'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Normalize numeric columns using Min-Max Scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.481494969777143}
4880;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan', 'Total day minutes', 
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']
    
    # Applying z-score normalization to numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5353797313797314}
4881;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls',
                            'International plan', 'Voice mail plan']], columns=['International plan', 'Voice mail plan'],
                        drop_first=True)

    # Applying min-max scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.4914420240859962}
4886;"
    df = pd.get_dummies(df[['Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply standardization to numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.530046398046398}
4888;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standard Scaling to selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5438918561753208}
4891;"
    # Keep the same columns as previous version
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standard Scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5437519960354606}
4893;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls', 'Total day calls', 'Total eve calls', 'Total night calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls',
                    'Total day calls', 'Total eve calls', 'Total night calls']
    
    # Normalize selected numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5128568076474735}
4896;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49048416967986597}
4898;"
    # Selecting specified columns and performing one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49227916259436755}
4901;"
    # Selecting columns and one-hot-encoding 'International plan' and 'Voice mail plan'
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49339820561964254}
4903;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49421980186377407}
4904;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5501883069720834}
4905;"
    # Selecting and processing relevant columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49039097303494517}
4906;"
    # Keep only the desired columns for preprocessing
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Robust scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5497695783843408}
4908;"
    # One-hot encode 'International plan' and 'Voice mail plan' columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Select the most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'Account length', 'Total intl calls']]
    
    # Robust scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.41693680809614975}
4909;"
    # One-hot encode categorical columns and select important features
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Robust Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5463864750012374}
4910;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Standard Scaling to selected numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408046078531731}
4911;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standard Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4914;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardizing numeric columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.547135099418564}
4915;"
    # Select columns and one-hot encode categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Robust Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5481930018077643}
4917;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-Hot Encoding of categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standard Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5372251895086542}
4918;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5472159903135114}
4920;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']

    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49339820561964254}
4922;"
    # Select specific columns and apply one-hot encoding for categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns using robust scaler
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5461236505773391}
4923;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4930936757376479}
4925;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5481930018077643}
4929;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5444323967158613}
4931;"
    selected_cols = ['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']

    df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49058130421119184}
4933;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan',
                            'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5344427944427944}
4935;"
    # Selecting and encoding columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standard Scaling numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4936;"
    df = df.copy()
    
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for Min-Max Scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Apply Min-Max Scaling to numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.49421980186377407}
4940;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply Min-Max Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49421980186377407}
4944;"
    # Select the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-Hot Encoding of categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standard Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
4945;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    # One-hot encode categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max Scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4895394365669704}
4946;"
    # Selecting the relevant columns and applying one-hot-encoding
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Robust Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5480229337805533}
4947;"
    # Select columns and apply one-hot encoding with dropping the first category
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numeric columns using z-score normalization
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5463576095999783}
4949;"
    # Perform one-hot encoding on selected columns and drop first to avoid multicollinearity
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes',
                            'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize selected numeric columns using standard scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
4952;"
    # Selecting and encoding important columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-Max scaling to numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4930936757376479}
4953;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4924132750572472}
4954;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalize numerical columns using Min-Max scaling
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4977586146491621}
4957;"
# Import libraries as needed
import pandas as pd

def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'Account length', 'Total intl calls']]
    
    # Robust scaling for numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.4188233111636344}
4959;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
                            'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Perform Robust Scaling on numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5444573696238562}
4960;"
    # One-hot encode categorical variables and drop the target column (if necessary)
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5372251895086542}
4961;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Z-score normalization to selected numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5453884548147766}
4962;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'Total intl calls', 
                            'International plan', 'Voice mail plan']], 
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalizing numeric columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Min-max scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4930936757376479}
4964;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Robust scaling to selected numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5470668756816381}
4965;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Normalizing numeric columns using z-score normalization
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
4967;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                          'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                          'Customer service calls']],
                    columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Define numerical columns for scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Feature scaling using Robust Scaler for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5478596684744309}
4968;"
    # Selecting columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-Hot-Encoding categorical columns and dropping the first column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply Robust Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5472159903135114}
4969;"
    # Keep selected features and drop others
    df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
             'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Apply one-hot encoding to categorical features
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns to have zero mean and unit variance
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5310288541867489}
4972;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Robust Scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5426374462522088}
4973;"
    # Select the 8 most important columns
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # One-Hot Encoding of categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Apply Standard Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5408046078531731}
4974;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standard scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.5426673663794024}
4975;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.543617883572581}
4976;"
    # Selecting relevant columns and one-hot encoding categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize numeric columns using Min-Max scaling
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())
    
    return df
";{0: 0.4914420240859962}
4979;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standardize numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5426673663794024}
4981;"
    # Select columns and apply one-hot encoding to categorical columns
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply Robust Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5499746110031666}
4982;"
    df = df[['International plan', 'Voice mail plan', 'Total day minutes', 'Total eve minutes', 
             'Total night minutes', 'Total intl minutes', 'Customer service calls']]
    
    # Apply one-hot encoding to categorical features
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize selected numeric columns using z-score normalization
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.530203260791496}
4984;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Standard scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5445815113477346}
4988;"
    # Select relevant columns
    df = df[['International plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical columns and drop first category
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
    
    # Robust Scaling for numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5238701052034386}
4989;"
    df = pd.get_dummies(df[['International plan', 'Voice mail plan',
                        'Total day minutes', 'Total eve minutes', 'Total night minutes',
                        'Total intl minutes', 'Customer service calls']],
                    columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    
    # Z-score normalization for numeric columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.531985791985792}
4990;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5491836777984402}
4992;"
    # One-hot encode categorical columns and drop NAs
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()

    # Select the most important columns based on expert knowledge
    df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]

    # Normalize numerical columns using Min-Max scaling
    df = (df - df.min()) / (df.max() - df.min())

    return df
";{0: 0.3885033944967352}
4995;"
    df = df[['International plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.527882450882451}
4996;"
    df = pd.get_dummies(df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                            'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    
    # Normalize numeric columns to have zero mean and unit variance
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

    return df
";{0: 0.5119573661812195}
4997;"
    # Select specific columns
    df = df[['International plan', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls']]
    
    # One-hot encode categorical column
    df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
    
    # Robust Scaling for numerical columns
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))
    
    return df
";{0: 0.5293340637856767}
4998;"
    df = df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan',
             'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
             'Customer service calls']]
    
    # One-Hot-Encoding categorical columns and dropping the first column to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Apply Robust Scaling to numerical columns
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].median()) / (df[numeric_cols].quantile(0.75) - df[numeric_cols].quantile(0.25))

    return df
";{0: 0.5499746110031666}
4999;"
    df = pd.get_dummies(df[['Account length', 'Total intl calls', 'International plan', 'Voice mail plan', 
                            'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                            'Customer service calls']],
                        columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Total intl calls']
    
    # Min-Max Scaling for numerical columns
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].min()) / (df[numeric_cols].max() - df[numeric_cols].min())

    return df
";{0: 0.49699757964155183}
