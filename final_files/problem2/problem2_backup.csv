2;"
  # Selecting the 8 most important columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # Processing each column as needed
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3290754504021445}
3;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.29081359816653934}
6;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.32467905400574804}
7;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.29409090909090907}
9;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.264487799175221}
10;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3190736118288773}
11;"
  # Selecting the 8 most important columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2530260842464239}
12;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3248359167508461}
14;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.29339826839826844}
16;"
  return df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes']]
";{0: 0.21827214440551512}
17;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31478196228315297}
20;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Returning the updated dataframe
  return df
";{0: 0.30751985142229044}
21;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Returning the updated dataframe
  return df
";{0: 0.30381827323003796}
22;"
  # Selecting important columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2591897859301879}
23;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3032406050370122}
24;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3088146421479755}
25;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.31015653148322553}
27;"
  # Selecting specific columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2618387925527045}
28;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.29603042942459}
29;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Feature scaling for numeric columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes','Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.33041557655848647}
30;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.28771126134139835}
31;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.29311072139539296}
32;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3032406050370122}
33;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Feature scaling for numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
  
  return df
";{0: 0.24445975435349648}
34;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
  
  return df
";{0: 0.24748704963885632}
35;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2625053167996602}
36;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.25645641603943836}
37;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
  
  df = df.select_dtypes(include=[np.number])
  
  return df
";{0: 0.2560794280966137}
38;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  df.dropna(inplace=True)
  
  return df
";{0: 0.2889727179295525}
39;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3182646395913336}
40;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.2901910133661959}
41;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.26283439235714023}
42;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]

  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.2543332737889076}
43;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  return df
";{0: 0.3052059052059052}
44;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Handling missing values if any
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3135665695774829}
45;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  return df
";{0: 0.3088146421479755}
46;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3088146421479755}
47;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Handling missing values if any
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.311959079734699}
48;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2616392098619669}
49;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3108179032707335}
50;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31667905400574803}
51;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Handling missing values if any
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3135665695774829}
52;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Feature scaling for numeric columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes','Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.3360822432251531}
53;"
  # Selecting the specified columns
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31658451053462644}
54;"
  # Selecting the columns with the most important features
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Handling missing values by dropping rows with any NA values
  df.dropna(inplace=True)

  # Performing one-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3173644851401044}
55;"
  # Reordering columns to have numerical features first
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.32179470026425144}
56;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
  
  return df
";{0: 0.25315106304480517}
57;"
  # Selects the 8 most important columns from the dataset
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Returns the updated dataframe
  return df
";{0: 0.3071004013679173}
58;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3095353656980817}
59;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3173644851401044}
60;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
  
  return df
";{0: 0.2525623184560606}
61;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  
  return df
";{0: 0.31746652604154224}
62;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2610843286412282}
63;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Additional preprocessing steps can be added here

  return df
";{0: 0.3104262337795272}
64;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df['Account length'] = (df['Account length'] - df['Account length'].mean()) / df['Account length'].std()
  df['Number vmail messages'] = (df['Number vmail messages'] - df['Number vmail messages'].mean()) / df['Number vmail messages'].std()
  df['Total day minutes'] = (df['Total day minutes'] - df['Total day minutes'].mean()) / df['Total day minutes'].std()
  df['Total eve minutes'] = (df['Total eve minutes'] - df['Total eve minutes'].mean()) / df['Total eve minutes'].std()
  df['Customer service calls'] = (df['Customer service calls'] - df['Customer service calls'].mean()) / df['Customer service calls'].std()
  
  return df
";{0: 0.47034657198098334}
65;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df['Account length'] = (df['Account length'] - df['Account length'].mean()) / df['Account length'].std()
  df['Number vmail messages'] = (df['Number vmail messages'] - df['Number vmail messages'].mean()) / df['Number vmail messages'].std()
  df['Total day minutes'] = (df['Total day minutes'] - df['Total day minutes'].mean()) / df['Total day minutes'].std()
  df['Total eve minutes'] = (df['Total eve minutes'] - df['Total eve minutes'].mean()) / df['Total eve minutes'].std()
  df['Customer service calls'] = (df['Customer service calls'] - df['Customer service calls'].mean()) / df['Customer service calls'].std()
  
  return df
";{0: 0.46956659737550543}
67;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.311959079734699}
68;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.3161279651490566}
69;"
  # Selecting the desired columns
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes',
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Return the updated dataframe
  return df
";{0: 0.3144430448778275}
70;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] = (df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] - df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].mean()) / df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].std()
  
  return df
";{0: 0.33525442865561667}
71;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes',
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Return the updated dataframe
  return df
";{0: 0.3069896287287592}
72;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.292476002258611}
73;"
  # Selecting specified columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.25348939193236747}
74;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3083021800002932}
75;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes',
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Return the updated dataframe
  return df
";{0: 0.3088146421479755}
76;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3195693215554671}
77;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31389994677623717}
78;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3135665695774829}
79;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.32606810663282226}
80;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan', 'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31693774260809865}
81;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.30625626047312793}
82;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.31375291375291375}
83;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3020206846293803}
84;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3143061636607303}
85;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 
      'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes',
        'Total eve minutes', 'Customer service calls']] / 
    df[['Account length', 'Number vmail messages', 'Total day minutes',
        'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.31532985159926524}
86;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  num_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in num_cols:
      df[col] = (df[col] - df[col].mean()) / df[col].std()
  
  return df
";{0: 0.46841607005048136}
87;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
  
  return df
";{0: 0.2484315995018122}
88;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan', 'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3197689585790605}
89;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46991982944897764}
90;"
# Feature selection based on importance
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 
             'International plan', 'Total day calls', 'Total eve minutes', 
             'Voice mail plan', 'Total eve calls']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    return df
";{0: 0.31693774260809865}
91;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.30999180633885415}
93;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Additional preprocessing steps can be added here

  return df
";{0: 0.3002027782515587}
94;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
  
  df = df.select_dtypes(include=[np.number])
  
  return df
";{0: 0.2571555870370111}
95;"
  # Selecting the 8 most important columns from the dataset
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Additional preprocessing steps can be added here

  return df
";{0: 0.310617262764502}
96;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3032406050370122}
97;"
  # Keep only relevant columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
            'Number vmail messages', 'Total day minutes', 'Total eve minutes',
            'Customer service calls']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31363143495812895}
98;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)

  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.25793687739251114}
99;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31389994677623717}
100;"
  # Select the relevant columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.25564046333139123}
101;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Feature scaling for numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

  return df
";{0: 0.24989565178939394}
102;"
# Improved version of `select_columns_and_return_dataframe_v2` function
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(axis=0, how='any', inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    # Min-max scaling
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
    
    df = df.select_dtypes(include=[np.number])
    
    return df
";{0: 0.258008958297956}
103;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']:
      df[col] = df[col] / df[col].max()
  
  return df
";{0: 0.24456231845606063}
104;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Drop rows with missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # Perform one-hot encoding on categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize numerical columns using min-max scaling
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

  return df
";{0: 0.24989565178939394}
105;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.311959079734699}
106;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3109521904925156}
107;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31909698687260607}
108;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3124065470695835}
109;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.312116010859372}
110;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

  return df
";{0: 0.24702385691759904}
111;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.31746652604154224}
112;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3135665695774829}
113;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.30578645672985294}
114;"
  # Selecting important columns
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31389994677623717}
116;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2547633813157893}
117;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Dropping rows with any NA values
  df.dropna(inplace=True)

  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3150555536921001}
118;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.31376533762086617}
119;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes',
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Additional preprocessing steps or feature engineering can be done here

  return df
";{0: 0.30325529957431796}
120;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3044169505707967}
121;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
            'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
    # Drop rows with missing values
    df.dropna(inplace=True)

    # One-hot encoding for categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    return df
";{0: 0.32035356693713324}
122;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31347703604717586}
123;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.31746652604154224}
124;"
  return df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes']]
";{0: 0.21655386268723337}
125;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]

  df.dropna(axis=0, how='any', inplace=True)

  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)

  return df
";{0: 0.2606225819650082}
126;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Handling missing values if any
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31581493559055485}
127;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3014072347405681}
129;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.2927375256322625}
130;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3096905482586217}
131;"
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

    return df
";{0: 0.25090466079840296}
132;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Handling missing values by dropping rows with any NA values
  df.dropna(inplace=True)

  # Performing one-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3195693215554671}
134;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2610843286412282}
135;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.26014982859875097}
136;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

  return df
";{0: 0.24535885525259743}
138;"
  # Selecting relevant columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'State']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Account length', 'Number vmail messages', 
                    'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.4757519773863888}
139;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardization for numeric columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes','Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.3347664537514689}
140;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 
           'International plan', 'Total day calls', 'Total eve minutes', 
           'Voice mail plan', 'Total eve calls']]

  df.dropna(inplace=True)

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  return df
";{0: 0.3200671878428071}
141;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.30570928730437935}
142;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3150555536921001}
143;"
  # Rearrange columns to put numerical features first
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31478196228315297}
144;"
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.25564046333139123}
145;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2574652648403617}
146;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  num_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in num_cols:
      df[col] = (df[col] - df[col].mean()) / df[col].std()
  
  return df
";{0: 0.4727510454199395}
147;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3112153830178479}
148;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 
           'Total eve minutes', 'Total eve calls', 'Total eve charge', 
           'Total night minutes', 'Customer service calls']]
  return df
";{0: 0.30387637054303723}
149;"
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

    return df
";{0: 0.24989565178939394}
150;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.30930846930846934}
152;"
  # Keep only selected columns
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Drop rows with missing values
  df.dropna(inplace=True)

  # Perform one-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3161809486624502}
153;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3112837779504446}
154;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes',
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3088146421479755}
155;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.26313830523544846}
156;"
  # Selecting the 8 most important columns for modeling
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  
  # Additional preprocessing steps such as handling missing values, encoding categorical variables, or feature engineering can be added here

  return df
";{0: 0.30625626047312793}
157;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3171539398504969}
158;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31581493559055485}
160;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.25711105156668534}
161;"
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

    return df
";{0: 0.24702385691759904}
162;"
  # Selecting the 8 most important columns based on domain knowledge or feature importance techniques
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3068842268842269}
163;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

  return df
";{0: 0.24189565178939393}
164;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3094741007784486}
165;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.31478196228315297}
166;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]

  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])

  df.dropna(inplace=True)

  for col in ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[col] = (df[col] - df[col].mean()) / df[col].std()

  return df
";{0: 0.46841607005048136}
168;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31271289477422826}
169;"
    df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.28924041075203866}
170;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

  # Returning the preprocessed dataframe
  return df
";{0: 0.24656656474056166}
171;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3163525233935031}
172;"
  return df[['Total day minutes', 'Total eve minutes', 'Total intl minutes', 'Customer service calls']]
";{0: 0.29123789382989135}
173;"
    df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
            'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
    # Drop rows with missing values
    df.dropna(inplace=True)

    # One-hot encoding for categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    return df
";{0: 0.31879532774741753}
174;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.2623332737889076}
175;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 
             'Total eve minutes', 'Total eve calls', 'Total eve charge', 
             'Total night minutes', 'Customer service calls']]
";{0: 0.30578645672985294}
176;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(axis=0, how='any', inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.2584149064419688}
177;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31462344622885274}
178;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes',
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3101418026418027}
180;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.31590201206314317}
181;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardization for numeric columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes','Total night minutes']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.3342848576042381}
182;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 
             'Total eve minutes', 'Total eve calls', 'Total eve charge', 
             'Total night minutes', 'Customer service calls']]
";{0: 0.30088741667689034}
183;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3069896287287592}
184;"
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.2543332737889076}
185;"
  # Keep selected columns
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Remove rows with missing values
  df.dropna(inplace=True)

  # Perform one-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31693774260809865}
186;"
  return df[['Total day minutes', 'Total eve minutes', 'Total intl minutes', 'Customer service calls']]
";{0: 0.2909701562127561}
187;"
    df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.29409090909090907}
188;"
  # Selecting specified columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.25855268307160795}
189;"
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)

    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] / df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

    return df
";{0: 0.2541763535437799}
190;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.257796477252111}
191;"
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

    return df
";{0: 0.25090466079840296}
192;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.31746652604154224}
193;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'International plan', 'Voice mail plan']]

  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] = (df[['Account length', 'Number vmail messages',
                                                                                                                          'Total day minutes', 'Total eve minutes', 'Total night minutes']] - df[['Account length',
                                                                                                                                          'Number vmail messages', 'Total day minutes', 'Total eve minutes', 
                                                                                                                                          'Total night minutes']].min()) / (df[['Account length',
                                                                                                                                          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
                                                                                                                                          'Total night minutes']].max() - df[['Account length',
                                                                                                                                          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
                                                                                                                                          'Total night minutes']].min())

  return df
";{0: 0.29885338196036776}
194;"
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
             'Total day minutes', 'Total eve minutes', 'Total night minutes']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
    
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

    return df
";{0: 0.24535885525259743}
195;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.29123376623376623}
197;"
  # Selecting relevant columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.32015108979993145}
198;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3026418026418026}
199;"
  df = df[['Total day minutes', 'Total eve minutes', 'State', 'Customer service calls', 'Account length', 
           'International plan', 'Voice mail plan']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.309993668189639}
200;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.323670044996739}
202;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  # Min-max normalization for the numerical columns
  
  return df
";{0: 0.32254237956347104}
203;"
  return df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
";{0: 0.29605352457632694}
204;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3190736118288773}
205;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3020500866654713}
207;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.48298941616745167}
208;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31590201206314317}
209;"
  # Selecting specific columns
  df = df[['Total day minutes', 'Total eve minutes', 'State', 'Customer service calls', 'Account length',
           'International plan', 'Voice mail plan']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3177080050430487}
210;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes',
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3097846597846598}
211;"
  # Selecting the 8 most important columns
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.30625626047312793}
212;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  # Feature scaling for numeric columns
  
  return df
";{0: 0.4765793353566038}
213;"
    df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.28667890080933567}
214;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3165328843085035}
215;"
  return df[['Account length', 'Total day minutes', 'Total day charge', 'Total eve minutes', 'Total eve charge', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
";{0: 0.28566231871109926}
217;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 
                    'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.46841607005048136}
218;"
    return df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
";{0: 0.30319638171918417}
219;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  # Handling missing values if any
  df.dropna(inplace=True)

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.31879532774741753}
220;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'International plan', 'Voice mail plan']]

  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 
      'Total night minutes']] = (df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 
                                    'Total night minutes']] - df[['Account length', 'Number vmail messages', 'Total day minutes', 
                                    'Total eve minutes','Total night minutes']].min()) / (df[['Account length',
                                    'Number vmail messages','Total day minutes','Total eve minutes','Total night minutes']].max() -
                                    df[['Account length','Number vmail messages','Total day minutes','Total eve minutes',
                                    'Total night minutes']].min())

  return df
";{0: 0.29791644502343084}
221;"
  df = df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
           'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
  return df
";{0: 0.3081632750344407}
222;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 
             'Total eve minutes', 'Total eve calls', 'Total eve charge', 
             'Total night minutes', 'Customer service calls']]
";{0: 0.310617262764502}
223;"
  # Dropping NA values and selecting the 8 most important columns
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']].dropna()
";{0: 0.30563581461785055}
224;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.25971629656323464}
225;"
  # Selecting 8 most important columns along with target column
  df = df[['Total day minutes', 'Total eve minutes', 'State', 'Customer service calls',
           'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.30277434413284016}
226;"
  return df[['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes',
             'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3108179032707335}
227;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31478196228315297}
228;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns

  return df
";{0: 0.315561936888631}
229;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]

  # Dropping rows with missing values
  df.dropna(inplace=True)

  # Normalizing the selected columns
  df = (df - df.min()) / (df.max() - df.min())

  return df
";{0: 0.4049151223477282}
230;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.3146966560206623}
231;"
  # Selecting specific columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  num_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in num_cols:
      df[col] = (df[col] - df[col].mean()) / df[col].std()
      
  return df
";{0: 0.47413035576476714}
233;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.3138757128968043}
234;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.32254237956347104}
235;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Account length', 'Number vmail messages', 
                    'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.46999242473028435}
236;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing selected columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.3252090462301377}
237;"
  return df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls']]
";{0: 0.2996949811589601}
238;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.3994457949271813}
239;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.4012712786803759}
240;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'International plan', 'Voice mail plan']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] = (df[['Account length', 'Number vmail messages',
                                                                                                                          'Total day minutes', 'Total eve minutes', 'Total night minutes']] - df[['Account length',
                                                                                                                                          'Number vmail messages', 'Total day minutes', 'Total eve minutes', 
                                                                                                                                          'Total night minutes']].min()) / (df[['Account length',
                                                                                                                                          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
                                                                                                                                          'Total night minutes']].max() - df[['Account length',
                                                                                                                                          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
                                                                                                                                          'Total night minutes']].min())

  return df
";{0: 0.29885338196036776}
241;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.4030895948899997}
242;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = df.fillna(df.mean())
  
  return df
";{0: 0.3095401217140347}
243;"
  # Selecting the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31667905400574803}
244;"
    df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes']]
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
    df.dropna(inplace=True)
    
    return df
";{0: 0.2918504157712791}
245;"
  df = df[['Total day minutes', 'Customer service calls', 'Total intl minutes', 'International plan',
           'Total day calls', 'Total eve minutes', 'Voice mail plan', 'Total eve calls']]
  
  df.dropna(inplace=True)

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  return df
";{0: 0.32035356693713324}
246;"
  # Selecting specific columns of interest
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]

  # Dropping rows with missing values
  df.dropna(inplace=True)

  # Normalizing the selected columns
  df = (df - df.min()) / (df.max() - df.min())

  return df
";{0: 0.4012712786803759}
247;"
  return df.dropna().loc[:, ['Total day minutes', 'Total day calls', 'Total day charge', 'Total eve minutes', 
                              'Total eve calls', 'Total eve charge', 'Total night minutes', 'Customer service calls']]
";{0: 0.3014369833646942}
248;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing specific columns by dividing them by their max values
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.31454237956347103}
249;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls']]

  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])

  # Dropping NA values
  df.dropna(inplace=True)

  return df
";{0: 0.31667905400574803}
250;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]

  # Removing rows with missing values
  df.dropna(inplace=True)

  # Normalizing the selected columns
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.4085001943430265}
251;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = df.fillna(df.mean())
  
  return df
";{0: 0.30767676767676766}
252;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.47225116113389465}
253;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46919884891545205}
254;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.40661810979180385}
255;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.4440079365079366}
256;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df.fillna(df.mean(), inplace=True)
  
  return df
";{0: 0.3107442523393444}
257;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47193857494284924}
258;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Normalizing all selected columns
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.40617980166118806}
259;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43406891211769266}
260;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]

  df.dropna(inplace=True)

  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.43832611832611834}
261;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  # Feature scaling for numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()

  return df
";{0: 0.24597728444245517}
262;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.47193857494284924}
263;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.32089325675645347}
264;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4776202886506732}
266;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47034657198098334}
267;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47034657198098334}
268;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47493572489228386}
269;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46841607005048136}
270;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
 
  return df
";{0: 0.2555911354241277}
271;"
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Select top 8 important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan','Voice mail plan','Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.49938409105075776}
272;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.3122775393808226}
273;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
    
  df.dropna(inplace=True)
    
  # Normalizing all selected columns
  df = (df - df.min()) / (df.max() - df.min())
    
  return df
";{0: 0.40485705033843666}
274;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3190736118288773}
275;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan','Voice mail plan','Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.49938409105075776}
276;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Fill or remove any missing values
  df.dropna(inplace=True)
  
  # Normalize numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47146368909810044}
277;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] /= df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max()
  
  return df
";{0: 0.24365003775430621}
278;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop rows with NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31746652604154224}
280;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
             'Number vmail messages', 'Total day minutes', 'Total eve minutes',
             'Customer service calls']]
    
    # Perform one-hot encoding of categorical columns
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
    
    # Drop rows with missing values
    df.dropna(inplace=True)
    
    # Normalize selected numerical columns
    numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
    df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())
    
    return df
";{0: 0.3206989791160438}
282;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalize selected columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  # Feature scaling
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    (df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] -
     df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].mean()) /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].std()
  )
  
  return df
";{0: 0.4774180269976438}
283;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4676438692782806}
284;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan','Voice mail plan','Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.501987906987907}
285;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
    
  df.dropna(inplace=True)
    
  # Normalizing all selected columns
  df = (df - df.min()) / (df.max() - df.min())
    
  return df
";{0: 0.40914276462415106}
287;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43650793650793657}
288;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47946368909810044}
289;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47385824692122974}
290;"
  # Select 8 most important columns
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 
           'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
           'Customer service calls', 'State']]
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Normalize numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 
                  'Total eve minutes', 'Total night minutes', 'Total intl minutes',
                  'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  # One-hot encode the 'State' column
  df = pd.get_dummies(df, columns=['State'])
  
  return df
";{0: 0.41418555475507324}
291;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.3198757128968044}
293;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]

  df.dropna(inplace=True)
  
  # Normalizing the selected columns
  df = (df - df.min()) / (df.max() - df.min())

  return df
";{0: 0.4037419207422944}
294;"
  # Keeping only the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.44301681224758155}
295;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4765793353566038}
296;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47493572489228386}
297;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  # Feature scaling on numerical columns
  # One-hot encode categorical columns
  
  return df
";{0: 0.4676438692782806}
298;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encode the categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  # Normalize numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46956659737550543}
299;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4711371584858555}
300;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan','Voice mail plan','Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5018532268532269}
303;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total day charge', 'Total eve charge', 'Total intl minutes', 'Total intl calls']]

  # Dropping rows with missing values
  df.dropna(inplace=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.4177814620876618}
304;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4395754211705132}
306;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.3111163309983496}
307;"
  # Selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.505927300927301}
308;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Scaling numerical columns
  numerical_cols = ['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
                    'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.47413035576476714}
309;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Number vmail messages', 'Total intl minutes', 'Total intl calls', 'Total night charge']]

  # Handling missing values by imputing with mean
  df.fillna(df.mean(), inplace=True)

  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.4623547472408952}
312;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']].dropna().apply(lambda x: (x - x.min()) / (x.max() - x.min()))
";{0: 0.4030749003526939}
313;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
    
    df.dropna(inplace=True)
    
    df = pd.get_dummies(df, columns=['Customer service calls'], drop_first=True)
    
    return df
";{0: 0.2785563827802446}
314;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Total day minutes', 'Total eve minutes']] = df[['Account length', 'Total day minutes', 'Total eve minutes']].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
  
  return df
";{0: 0.37568280466484055}
315;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Normalizing the selected columns using Min-Max scaling
  df[['Account length', 'Total day minutes', 'Total eve minutes']] = df[['Account length', 'Total day minutes', 'Total eve minutes']].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
  
  return df
";{0: 0.37506974506974505}
316;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Adding interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5656754769380188}
317;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5659084142778744}
318;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Normalizing the selected columns using Standard Scaling
  df[['Account length', 'Total day minutes', 'Total eve minutes']] = (df[['Account length', 'Total day minutes', 'Total eve minutes']] - df[['Account length', 'Total day minutes', 'Total eve minutes']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes']].std()
  
  return df
";{0: 0.44121557454890786}
319;"
  return df[['Account length', 'Number vmail messages', 'Total day minutes',
             'Total eve minutes', 'Customer service calls']]
";{0: 0.31675613321706636}
320;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5592064742426011}
321;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'International plan', 'Voice mail plan']]

  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] 
      - df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].min()) / (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max() 
      - df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].min())

  return df
";{0: 0.2983817694082183}
322;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.564665982886823}
323;"
  # Selecting subset of columns
  df = df[['Total day minutes', 'Total eve minutes', 'State', 'Customer service calls', 'Account length', 
           'International plan', 'Voice mail plan']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3222608800657224}
324;"
  # Select relevant columns
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encode the categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  # Normalize numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4711371584858555}
325;"
  # Selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4347115293223077}
326;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.31072255974365126}
327;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5649207599568868}
328;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47493572489228386}
330;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalize selected columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.3133380784882022}
331;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5641260579701318}
332;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Account length_squared'] = df['Account length'] ** 2
  
  return df
";{0: 0.5398537368807185}
333;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.31776677330399367}
334;"
  return df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes',
             'Customer service calls']]
";{0: 0.3169819943124927}
335;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5636304373762416}
336;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3190736118288773}
337;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Standardize numerical columns
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.47034657198098334}
338;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3171539398504969}
339;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46956659737550543}
340;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4394319131161237}
341;"
  # Keep only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  # Fill missing values with the mean of each column
  df = df.fillna(df.mean())
  
  return df
";{0: 0.31005772005772003}
342;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'State', 'International plan', 'Voice mail plan']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Standardize numeric columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4711371584858555}
343;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Account length_squared'] = df['Account length'] ** 2

  return df
";{0: 0.5406346553086958}
344;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5046674882513233}
345;"
  # Keep the most relevant columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Customer service calls', 'International plan', 'Voice mail plan',
           'Number vmail messages', 'State']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3106039988181101}
346;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]

  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])

  df.dropna(inplace=True)

  for col in ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[col] = (df[col] - df[col].mean()) / df[col].std()

  return df
";{0: 0.4774180269976438}
347;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5613764561594184}
349;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5739408525146642}
350;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43527336860670196}
351;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5107764218910045}
352;"
    # Selecting specific columns of interest
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
    
    # Dropping rows with missing values
    df.dropna(inplace=True)
    
    # Normalizing the selected columns
    df = (df - df.min()) / (df.max() - df.min())

    return df
";{0: 0.40609055578880965}
353;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Total intl minutes', 'Customer service calls', 'International plan']]
  
  df = pd.get_dummies(df, columns=['International plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46511199867092295}
354;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4412698412698413}
355;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5689713928682791}
356;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]

  # One-hot encode the 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Normalize numerical columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.509111545414098}
357;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4395754211705132}
358;"

  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47146368909810044}
359;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.3161279651490566}
360;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5688297759261914}
361;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.36426840633737184}
362;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5573390606104816}
363;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  df = pd.get_dummies(df, columns=['Customer service calls'], drop_first=True)
  
  return df
";{0: -1}
364;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.31376533762086617}
365;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  # Min-max normalization for the numerical columns
  
  return df
";{0: 0.31801441535765446}
366;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Account length_squared'] = df['Account length'] ** 2

  return df
";{0: 0.5372563342833159}
367;"
import pandas as pd

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
             'Number vmail messages', 'Total day minutes', 'Total eve minutes',
             'Customer service calls']]
    
    df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
    
    df.dropna(inplace=True)
    
    numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
    df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
    
    return df
";{0: 0.46956659737550543}
368;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5038483875193611}
369;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
    
    df.dropna(inplace=True)
    
    df = df.fillna(df.mean())
    
    return df
";{0: 0.3131982400694057}
370;"
  # Function to preprocess the dataset and return a dataframe with the 4 most important columns
  def preprocess_dataset(df: pd.DataFrame) -> pd.DataFrame:
      # Selecting the 4 most important columns
      df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
      
      # Dropping rows with missing values
      df.dropna(inplace=True)
      
      # Normalizing selected columns using Min-Max scaling
      df[['Account length', 'Total day minutes', 'Total eve minutes']] = df[['Account length', 'Total day minutes', 'Total eve minutes']].apply(lambda x: (x - x.min()) / (x.max() - x.min()))
      
      return df
";{0: 0.3703078403078403}
371;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.47413035576476714}
372;"
  # Keep only the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43768440709617185}
373;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
    df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.31720904623013774}
374;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # One-hot encode the categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  # Normalize numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46841607005048136}
375;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  # Perform one-hot encoding for the categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.3182646395913336}
376;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Total intl minutes', 'Customer service calls', 'International plan']]
  
  df = pd.get_dummies(df, columns=['International plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4673530852583593}
377;"
  # Extracting relevant columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.4664591228880548}
378;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Min-Max scaling the selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes']] = (df[['Account length', 'Total day minutes', 'Total eve minutes']] - df[['Account length', 'Total day minutes', 'Total eve minutes']].min()) / (df[['Account length', 'Total day minutes', 'Total eve minutes']].max() - df[['Account length', 'Total day minutes', 'Total eve minutes']].min())
  
  return df
";{0: 0.3775668414692805}
379;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5776524197081848}
380;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5038483875193611}
381;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5741956295847279}
383;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43774250440917106}
384;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.4931022463077257}
385;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  df.dropna(inplace=True)
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4407503607503608}
386;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5719870406276728}
387;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']] /
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']].max()
  )
  
  return df
";{0: 0.32089325675645347}
388;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.36156570363466917}
389;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]

  df.dropna(inplace=True)

  df = pd.get_dummies(df)  # One-hot encode categorical variables if any

  return df
";{0: 0.30647194839965924}
390;"
  df = df[['Total day minutes', 'Total eve minutes', 'State', 'Customer service calls', 'Account length', 
           'International plan', 'Voice mail plan']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.3051772925123362}
391;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43527336860670196}
392;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Total intl minutes', 'Customer service calls', 'International plan']]
  
  df = pd.get_dummies(df, columns=['International plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46325192326246045}
393;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5741956295847279}
394;"
# Continue the implementation here
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5850132396476211}
395;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]

  # Dropping rows with missing values
  df.dropna(inplace=True)

  # Normalizing the selected columns
  df = (df - df.min()) / (df.max() - df.min())

  return df
";{0: 0.40485705033843666}
396;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages',
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  # Handling missing values
  df.dropna(axis=0, how='any', inplace=True)
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.26283439235714023}
397;"
  # Keep selected columns and drop others
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]

  # One-hot encode selected categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Drop rows with missing values
  df.dropna(inplace=True)

  # Standardize numeric columns
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5054975103263786}
398;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.36169099448843683}
400;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5032411000699684}
401;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.48131730007116663}
402;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5799817931067406}
403;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5699207599568867}
404;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43650793650793657}
405;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']].dropna().apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.43712143344045185}
406;"
  # Selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43888888888888894}
407;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  df.dropna(inplace=True)

  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5022420990709673}
408;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.48432520436512083}
409;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5081641769930453}
410;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5107764218910045}
411;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5751832839057156}
412;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['Customer service calls'], drop_first=True)
  
  return df
";{0: 0.2713707540377296}
413;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5046674882513233}
414;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.4922722242326706}
416;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.4931022463077257}
417;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total intl minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.4944031012785442}
418;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  num_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  for col in num_cols:
      df[col] = (df[col] - df[col].mean()) / df[col].std()
  
  return df
";{0: 0.5088562510940317}
419;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5012168085719926}
420;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.509893906722775}
421;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5116214597415932}
422;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5749503465658601}
423;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5072707566812127}
424;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5780665973266634}
425;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Scaling numerical columns
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.4765793353566038}
426;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]

  df.dropna(inplace=True)

  df = df.fillna(df.mean())

  return df
";{0: 0.31005772005772003}
427;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Feature scaling
  df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
      'Customer service calls', 'Number vmail messages']] = (
    df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
        'Customer service calls', 'Number vmail messages']] - df[['Total day minutes', 'Total eve minutes',
                                                                 'Total night minutes', 'Total intl minutes',
                                                                 'Customer service calls', 'Number vmail messages']].mean()) / df[['Total day minutes', 'Total eve minutes',
                                                                                                                           'Total night minutes', 'Total intl minutes',
                                                                                                                           'Customer service calls', 'Number vmail messages']].std()
  
  return df
";{0: 0.5132531613732948}
428;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5048395016683699}
430;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.50731649487384}
432;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5056543730714766}
433;"
  # Selecting specific columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5148394945032522}
434;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5677758764983082}
435;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.511470630178999}
436;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Min-Max scaling numerical columns
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.40723800271938904}
438;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df[['Account length', 'Customer service calls']] = (df[['Account length', 'Customer service calls']] - df[['Account length', 'Customer service calls']].mean()) / df[['Account length', 'Customer service calls']].std()

  return df
";{0: 0.3063195853053865}
439;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5131327519813623}
440;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  num_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5113137674339009}
441;"
  df = df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'International plan', 'Voice mail plan']]

  df.dropna(inplace=True)
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] = (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']] 
      - df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].min()) / (
      df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].max() 
      - df[['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Total night minutes']].min())

  return df
";{0: 0.30753048011115014}
442;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  df.dropna(inplace=True)
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4334023464458247}
443;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total intl minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5023889042954031}
444;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  df.dropna(inplace=True)

  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.50731649487384}
446;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5071912040200722}
447;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total intl minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5043679147901556}
448;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5749503465658601}
449;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5809037041188894}
450;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.576146849096923}
451;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Standardizing the selected columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43406891211769266}
452;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.36169099448843683}
453;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5122962235742518}
454;"

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Normalizing all selected columns
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.40661810979180385}
455;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5757146169265001}
456;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5744410283577341}
457;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5099655014963564}
458;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  # Standardizing the selected columns
  df[['Account length', 'Total day minutes', 'Total eve minutes']] = (df[['Account length', 'Total day minutes', 'Total eve minutes']] - df[['Account length', 'Total day minutes', 'Total eve minutes']].mean()) / df[['Account length', 'Total day minutes', 'Total eve minutes']].std()
  
  return df
";{0: 0.4392851592851593}
460;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.49105658420726905}
461;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
           'Total day minutes', 'Total eve minutes', 'Total night minutes',
           'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5063386736373406}
462;"
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.2563152395860446}
463;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
          'Total day minutes', 'Total eve minutes', 'Total night minutes',
          'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5080553334556303}
464;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4401223943392618}
465;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  return df
";{0: 0.35921400128296677}
466;"
  df = df[['State', 'International plan', 'Voice mail plan', 'Number vmail messages', 
           'Total day minutes', 'Total eve minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Number vmail messages', 'Total day minutes', 'Total eve minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.46213383047892}
468;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.4866878318933113}
469;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls']]

  df.dropna(inplace=True)

  return df
";{0: 0.3107442523393444}
470;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  df.dropna(inplace=True)

  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()

  return df
";{0: 0.5071912040200722}
472;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  df.dropna(inplace=True)
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.4390079365079365}
473;"
  # Selecting a different set of columns for processing
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.36242983307022714}
474;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  df.dropna(inplace=True)
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.43774250440917106}
475;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes']]
  
  df.dropna(axis=0, how='any', inplace=True)
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'], drop_first=True)
  
  return df
";{0: 0.25992467163836996}
476;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5784192320692}
477;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)
  
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.40786531951437055}
478;"
  df = df[['International plan', 'Voice mail plan', 'Number vmail messages', 
           'Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Number vmail messages', 'Total day minutes', 
                  'Total eve minutes', 'Total night minutes', 
                  'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5140850092639663}
479;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5644012794374063}
480;"
  df = df[['Account length', 'International plan', 'Voice mail plan',
            'Total day minutes', 'Total eve minutes', 'Total night minutes',
            'Total intl minutes', 'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Account length', 'Total day minutes', 'Total eve minutes',
                  'Total night minutes', 'Total intl minutes', 'Customer service calls']
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.509111545414098}
481;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.566439747298659}
482;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length']]
  
  df.dropna(inplace=True)

  # Normalizing all selected columns
  df = (df - df.min()) / (df.max() - df.min())
  
  return df
";{0: 0.40433945199475135}
483;"
# Continuation of the code provided
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.576146849096923}
484;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the data
  df = (df - df.mean()) / df.std()
  
  # Adding interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5741956295847279}
486;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5098514018425031}
487;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.48914822331922}
488;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5834639222676549}
489;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5801215555106538}
490;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.512154930744863}
491;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.577272552661651}
494;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5174872834156361}
496;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5631597536675785}
497;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5090573571774907}
498;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5824975163771807}
499;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5166471007672342}
500;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5113137674339009}
501;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5122962235742518}
502;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.38658485015627875}
504;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5768950160877955}
505;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5751832839057156}
506;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.565588034648019}
507;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5709658159201316}
508;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Dropping NA values
  df.dropna(inplace=True)

  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5106557587758922}
509;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.573450287969821}
510;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5113137674339009}
511;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5785858734871671}
512;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  # One-hot encoding for categorical columns like 'State', 'International plan', and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  return df
";{0: 0.31363143495812895}
513;"
  columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5157817586038788}
514;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5731829713568798}
516;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.566871979469082}
517;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5649207599568868}
519;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Fill NA values with mean
  df.fillna(df.mean(), inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5104837453588458}
520;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5721443475334459}
521;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5810248978774109}
522;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5790363939159381}
523;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.4877689129743924}
524;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  return df
";{0: 0.573450287969821}
525;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5801215555106538}
526;"
  # Selecting columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.577272552661651}
528;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5784192320692}
529;"
  columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5122962235742518}
531;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5731829713568798}
532;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5825906913131231}
533;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
      'Customer service calls', 'Number vmail messages']] = (
      df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
         'Customer service calls', 'Number vmail messages']] - df[['Total day minutes', 'Total eve minutes', 
                                                                 'Total night minutes', 'Total intl minutes',
                                                                 'Customer service calls', 'Number vmail messages']].mean()) / df[['Total day minutes', 
                                                                                                                              'Total eve minutes',
                                                                                                                              'Total night minutes',
                                                                                                                              'Total intl minutes',
                                                                                                                              'Customer service calls',
                                                                                                                              'Number vmail messages']].std()
  
  return df
";{0: 0.5108211984317778}
534;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Account length_squared'] = df['Account length'] ** 2

  return df
";{0: 0.5416635399808442}
535;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5140850092639663}
536;"
  columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  # Selecting the specified columns
  df = df[columns]
  
  # One-hot encoding the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  # Standardizing numerical columns
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5132531613732948}
538;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5801215555106538}
539;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5113137674339009}
540;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  num_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 
              'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5106557587758922}
541;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5759347600195106}
542;"
  # Select the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5757146169265001}
543;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5131327519813623}
544;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  df.dropna(inplace=True)

  # Min-Max scaling numerical columns
  df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
      'Customer service calls', 'Number vmail messages']] = (
      df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
         'Customer service calls', 'Number vmail messages']] - df[['Total day minutes', 'Total eve minutes', 
                                                                 'Total night minutes', 'Total intl minutes',
                                                                 'Customer service calls', 'Number vmail messages']].min()) / (
                                                                 df[['Total day minutes', 'Total eve minutes',
                                                                 'Total night minutes',
                                                                 'Total intl minutes',
                                                                 'Customer service calls',
                                                                 'Number vmail messages']].max() - df[['Total day minutes',
                                                                                                        'Total eve minutes',
                                                                                                        'Total night minutes',
                                                                                                        'Total intl minutes',
                                                                                                        'Customer service calls',
                                                                                                        'Number vmail messages']].min()
  )

  return df
";{0: 0.45370975647013073}
545;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5833881761685789}
546;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5754077507968491}
547;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  return df
";{0: 0.5631597536675785}
548;"
  # Selecting the columns which are considered important
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5774660698363002}
549;"
  columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5166471007672342}
550;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5768950160877955}
551;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.38330673332977483}
552;"
  # Selecting the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Handling missing values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.511470630178999}
553;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5139804341005676}
554;"
  # Feature selection based on correlation or other importance metrics
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardization of numerical features
  df = (df - df.mean()) / df.std()
  
  # Generating interaction features by multiplication
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5799817931067406}
555;"
  num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
  
  df = df[num_cols + ['International plan', 'Voice mail plan']]
  
  df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
  df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(num_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in num_cols:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5723664755854309}
556;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5806472424879537}
557;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5818029915479181}
558;"

  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  df.fillna(df.mean(), inplace=True)

  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5080583561784897}
559;"
  num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
  
  df = df[num_cols + ['International plan', 'Voice mail plan']]
  
  df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
  df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(num_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in num_cols:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5682282783262145}
560;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5729053070040828}
562;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.573450287969821}
564;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Dropping NA values
  df.dropna(inplace=True)

  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5148394945032522}
565;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.566439747298659}
566;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',  
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Standardize numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',  
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5149278025216202}
567;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    df['Account length_squared'] = df['Account length'] ** 2

    return df
";{0: 0.5339216044969733}
568;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5703246618427924}
569;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5810248978774109}
570;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5090573571774907}
571;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5157101638302973}
572;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  return df
";{0: 0.5744410283577341}
573;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5721443475334459}
574;"
# Keep the same code structure as v1
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
    
    df = df[num_cols + ['International plan', 'Voice mail plan']]
    
    df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
    df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(num_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5728332551826452}
575;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',  
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',  
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5139804341005676}
576;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5776524197081848}
577;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5082734277311408}
578;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5122962235742518}
579;"
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']

    df = df[num_cols + ['International plan', 'Voice mail plan']]

    df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
    df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(num_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5706517675292594}
580;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5727141481032465}
581;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.511470630178999}
582;"
  # Selects the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop NA values
  df.dropna(inplace=True)
  
  # Normalize numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5113137674339009}
583;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  num_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 
              'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5106557587758922}
584;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  return df
";{0: 0.5799817931067406}
587;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5157817586038788}
588;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 
           'Total intl minutes', 'Customer service calls', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5090573571774907}
589;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5140850092639663}
590;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5798366552257536}
591;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Dropping NA values
  df.dropna(inplace=True)

  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5072707566812127}
592;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5706513257872595}
593;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5157101638302973}
594;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5724346232954197}
595;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5737078247066792}
596;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5731829713568798}
597;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5688453111133903}
598;"
  # Selecting the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5072707566812127}
601;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5080583561784897}
602;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Account length_squared'] = df['Account length'] ** 2
  
  return df
";{0: 0.5398537368807185}
603;"
  # Selecting and encoding relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  return df
";{0: 0.5782462624961203}
604;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5713930818140274}
605;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5713930818140274}
606;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Handling missing values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5104837453588458}
608;"
  # Selecting columns with data of interest
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Dropping NA values
  df = df.dropna()

  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5148394945032522}
609;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5721443475334459}
610;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5757146169265001}
611;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5106557587758922}
612;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5790363939159381}
613;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5090573571774907}
614;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5747084500975485}
616;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5104837453588458}
617;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  df.dropna(inplace=True)

  # Min-Max scaling numerical columns
  df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
      'Customer service calls', 'Number vmail messages']] = (
      df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
         'Customer service calls', 'Number vmail messages']] - df[['Total day minutes', 'Total eve minutes', 
                                                                 'Total night minutes', 'Total intl minutes',
                                                                 'Customer service calls', 'Number vmail messages']].min()) / (
                                                                 df[['Total day minutes', 'Total eve minutes',
                                                                 'Total night minutes',
                                                                 'Total intl minutes',
                                                                 'Customer service calls',
                                                                 'Number vmail messages']].max() - df[['Total day minutes',
                                                                                                        'Total eve minutes',
                                                                                                        'Total night minutes',
                                                                                                        'Total intl minutes',
                                                                                                        'Customer service calls',
                                                                                                        'Number vmail messages']].min()
  )

  return df
";{0: 0.45632413555509804}
618;"
  # Updated preprocessing steps for improved version
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5116214597415932}
619;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5139804341005676}
620;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5096646446268834}
621;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.580256235645334}
622;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5731829713568798}
623;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5706513257872595}
625;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5641260579701318}
626;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages', 'State']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.31209739852476376}
627;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Account length_squared'] = df['Account length'] ** 2
  
  return df
";{0: 0.5416635399808442}
628;"
  # Selecting specific columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping NA values
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5106557587758922}
630;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(df.select_dtypes(include='number').columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
    for col in df.select_dtypes(include='number').columns:
        df[f'{col}_squared'] = df[col] ** 2
    
    return df
";{0: 0.5042868759147829}
631;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5157817586038788}
632;"
  # Selecting relevant columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Normalize numerical columns
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.4866878318933113}
633;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3807260881684845}
634;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',  
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',  
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5106557587758922}
637;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.315561936888631}
638;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
    
    df = df[num_cols + ['International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5744410283577341}
639;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Feature scaling using Min-Max scaling
  df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
      'Customer service calls', 'Number vmail messages']] = (
    df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
        'Customer service calls', 'Number vmail messages']] - df[['Total day minutes', 'Total eve minutes',
                                                                 'Total night minutes', 'Total intl minutes',
                                                                 'Customer service calls', 'Number vmail messages']].min()) / (
    df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
        'Customer service calls', 'Number vmail messages']].max() - df[['Total day minutes', 'Total eve minutes',
                                                                   'Total night minutes', 'Total intl minutes',
                                                                   'Customer service calls', 'Number vmail messages']].min())
  
  return df
";{0: 0.45370975647013073}
640;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5747084500975485}
641;"
  columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.51003106701196}
642;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5779586494777583}
643;"
  columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
             'Total intl minutes', 'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.511470630178999}
644;"
  df = df[['State', 'Account length', 'International plan', 'Voice mail plan',
          'Number vmail messages', 'Total day minutes', 'Total eve minutes',
          'Customer service calls']]
  
  df = pd.get_dummies(df, columns=['State', 'International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  return df
";{0: 0.3182646395913336}
645;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5727141481032465}
647;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5140850092639663}
648;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.51003106701196}
649;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Account length_squared'] = df['Account length'] ** 2
  
  return df
";{0: 0.5401184403301353}
650;"
  # Select relevant columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Standardize numerical columns
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.48280159271295453}
651;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5841154556345645}
652;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5780665973266634}
653;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Performing min-max scaling on numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].min()) / (df[numerical_cols].max() - df[numerical_cols].min())

  return df
";{0: 0.45802088489501064}
654;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5665423815785083}
655;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5744410283577341}
656;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
658;"
  # Dropping irrelevant columns and selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.601286873382875}
659;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Fill NA values with mean
  df.fillna(df.mean(), inplace=True)
  
  # Standardize numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5113137674339009}
660;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.581391350471435}
661;"
  # Selecting the desired columns from the dataframe
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
662;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes', 
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                  'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numeric_cols] = (df[numeric_cols] - df[numeric_cols].mean()) / df[numeric_cols].std()
  
  return df
";{0: 0.5140850092639663}
663;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
665;"
  # Keep the columns of interest
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  # Drop rows with missing values
  df.dropna(inplace=True)
  
  # Standardize numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5132531613732948}
666;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  return df
";{0: 0.573450287969821}
667;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Account length', 'Number vmail messages', 'Total day minutes',
                    'Total eve minutes', 'Total intl minutes', 'Customer service calls']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.4858897183435199}
668;"
  columns = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
             'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5088562510940317}
669;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  df.dropna(inplace=True)

  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.5157817586038788}
670;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5763513182074824}
671;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5132531613732948}
672;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597555820137636}
673;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5706513257872595}
674;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
675;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5131327519813623}
676;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5607381542902703}
677;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5736761490652474}
678;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5641754183419799}
679;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Dropping rows with missing values
  df.dropna(inplace=True)
  
  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5091373343146535}
680;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.fillna(df.mean(), inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5131327519813623}
681;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df.dropna(inplace=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.5097953429726622}
682;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

  # Dropping NA values
  df = df.dropna()

  # Standardizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes',
                    'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.512154930744863}
683;"
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Total intl minutes',
           'Customer service calls', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
  
  df.dropna(inplace=True)
  
  # Normalizing numerical columns
  num_cols = ['Total day minutes', 'Total eve minutes', 'Total night minutes', 
              'Total intl minutes', 'Customer service calls', 'Number vmail messages']
  df[num_cols] = (df[num_cols] - df[num_cols].mean()) / df[num_cols].std()
  
  return df
";{0: 0.5096646446268834}
685;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.591509273703452}
687;"
  num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
  
  df = df[num_cols + ['International plan', 'Voice mail plan']]
  
  df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
  df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(num_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in num_cols:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5671269838943263}
688;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  return df
";{0: 0.5764886232153013}
689;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding of categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Adding cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
690;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5935449378990041}
691;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5990838836110417}
692;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  return df
";{0: 0.5844401309592399}
693;"
  # Same initial column selection
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Adding squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Adding cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
694;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5754859521653731}
695;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5815958195819944}
697;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5656754769380188}
698;"
  # Select only the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding for categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create pairwise interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5744410283577341}
699;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5955134146706338}
700;"
    # Include only selected columns and one-hot-encode categorical variables
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize the data
    df = (df - df.mean()) / df.std()
    
    # Create new interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5681455616976778}
702;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  return df
";{0: 0.5772315420021846}
703;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5216171615590219}
704;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5768950160877955}
705;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  return df
";{0: 0.5859029466578987}
706;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.57627355166265}
707;"
  num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
  
  df = df[num_cols + ['International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(num_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in num_cols:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.576078596797552}
708;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5741956295847279}
709;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5770871958497882}
711;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5681196802176393}
712;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5955250555699312}
714;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5829464392177299}
715;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.581141737369159}
716;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5747084500975485}
717;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
  
    return df
";{0: 0.5922546153183588}
718;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5972546153183589}
719;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5787465277883207}
720;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding for categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create pairwise interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5706513257872595}
721;"
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']

    df = df[num_cols + ['International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(num_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5626695058884612}
722;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
723;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Create triple interaction features
  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5941408357473457}
724;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5955250555699312}
725;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5912419570905108}
726;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
     df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
728;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
729;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
730;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
     df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
731;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5793490038178568}
732;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
733;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
734;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6030722253812519}
735;"
  num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
  
  df = df[num_cols + ['International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in num_cols:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(num_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5635785967975521}
736;"
  # Feature selection based on importance
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5770871958497882}
737;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5935449378990041}
738;"
  # Selecting only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Applying one-hot-encoding to categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5727141481032465}
739;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.576695629584728}
740;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.581391350471435}
741;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5994511166982565}
742;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5774660698363002}
743;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  return df
";{0: 0.5811792613940224}
744;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize the data
    df = (df - df.mean()) / df.std()
    
    # Create new interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5586753319742834}
745;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.56710465630762}
746;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5801948479403719}
747;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5785858734871671}
748;"
  # Taking the subset of important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Applying one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the numerical columns by subtracting the mean and dividing by standard deviation
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features from combinations of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5731829713568798}
749;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
     df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
750;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5759347600195106}
751;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
752;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5621182121861861}
753;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
754;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.595331538395282}
755;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5757146169265001}
756;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5800506972816839}
757;"
  # Keep the original dataset
  df = df.copy()
  
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot-encoding on categorical columns and drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the dataset
  df = (df - df.mean()) / df.std()
  
  # Generate interaction features for the selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5706513257872595}
758;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5981805412442848}
759;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5927674358311793}
760;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.56922830932329}
761;"
  num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
  
  df = df[num_cols + ['International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in num_cols:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5801215555106538}
762;"
    def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
        df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
                 'International plan', 'Voice mail plan', 'Number vmail messages']]
        
        df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
        
        df = (df - df.mean()) / df.std()
        
        for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
            df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
        for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                    'Total night minutes', 'Number vmail messages']:
            df[f'{col}_squared'] = df[col] ** 2
        
        for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
            df[f'{col}_cubed'] = df[col] ** 3
        
        return df
";{0: 0.5981805412442848}
763;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5922546153183588}
764;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5610075145596306}
765;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(df.select_dtypes(include='number').columns, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in df.select_dtypes(include='number').columns:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.49990459153249855}
766;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5935449378990041}
767;"
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
    
    df = df[num_cols + ['International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5721443475334459}
768;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5883836475764234}
769;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5796046563076199}
770;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
  
    return df
";{0: 0.5912419570905108}
771;"
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
  
    df = df[num_cols + ['International plan', 'Voice mail plan']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(num_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.572288274216907}
772;"
  num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
  
  df = df[num_cols + ['International plan', 'Voice mail plan']]
  
  df[['International plan', 'Voice mail plan']] = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(num_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in num_cols:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.57152731474627}
773;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5780150330861319}
774;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5742603449303745}
775;"
  # Selecting the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first dummy column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the numeric columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features between pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5744410283577341}
776;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical variables and dropping the first encoded column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Generating interaction terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Adding cubed terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5909642927377137}
777;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.603900184938612}
778;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
779;"
  df = df.copy()

  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Perform one-hot encoding on categorical columns and drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  # Generate interaction features for the selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5784192320692}
780;"
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
    
    df = df[num_cols + ['International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col1, col2 in itertools.combinations(num_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    return df
";{0: 0.5720971153160705}
781;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
782;"
  df = df.copy()

  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Perform one-hot-encoding on categorical columns and drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the dataset
  df = (df - df.mean()) / df.std()
  
  # Generate interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5731829713568798}
783;"
  # Select the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Apply one-hot encoding for categorical columns and drop first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numeric columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  
  
  return df
";{0: 0.5912419570905108}
784;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5218166245432951}
785;"
  # Select columns based on importance
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot-encoding on categorical columns and drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the dataset
  df = (df - df.mean()) / df.std()
  
  # Generate interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.569195629584728}
787;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.597095379649569}
788;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5729053070040828}
790;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
791;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5932422696393465}
792;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5739408525146642}
793;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5827105712108122}
794;"
  # Selecting only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5759347600195106}
795;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5897546153183588}
796;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5930093322994909}
797;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5614742941568449}
800;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5804277852802275}
801;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.577272552661651}
802;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
803;"
  # Selecting only the necessary columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5713930818140274}
806;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5688453111133903}
807;"
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
    
    df = df[num_cols + ['International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col1, col2 in itertools.combinations(num_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    return df
";{0: 0.5664620323803742}
808;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5663901870798422}
809;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5799817931067406}
810;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
811;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
     df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
812;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.5907731338368774}
813;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5815841646165751}
815;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5719870406276728}
816;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5790363939159381}
817;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    # Generating polynomial features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] *df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    return df
";{0: 0.5793490038178568}
819;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5894401309592399}
820;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5784192320692}
821;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5782462624961203}
822;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.6006496770467539}
823;"
  # Selecting the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Applying one-hot-encoding to categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  return df
";{0: 0.5754859521653731}
824;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5969299399936835}
825;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  return df
";{0: 0.5779586494777583}
826;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5947546153183588}
828;"
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']
    df = df[num_cols + ['International plan', 'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(num_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5728332551826452}
829;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5907731338368774}
830;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5830764945956035}
831;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5264656464075068}
833;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5799817931067406}
834;"
  # Selecting columns of interest
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Generating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5744410283577341}
835;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5739408525146642}
836;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
     df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
837;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.595321234908641}
838;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5749503465658601}
839;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5883039980344082}
840;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5739408525146642}
841;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5861786659512702}
842;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5988368937993716}
843;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5927674358311793}
844;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.596478217802831}
845;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5951304323118228}
846;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5765133016909472}
848;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5780665973266634}
849;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5738437867424026}
850;"
    num_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']

    df = df[num_cols + ['International plan', 'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(num_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in num_cols:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5802866713317136}
851;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5978956409593845}
852;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5793490038178568}
853;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5860224094402525}
854;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5708143337269748}
855;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5739408525146642}
856;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5908608421162653}
857;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
858;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5816956295847279}
859;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    return df
";{0: 0.5631597536675785}
860;"
  df = df.copy()

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Perform one-hot encoding on categorical columns and drop the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  # Generate interaction features for the selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5713930818140274}
861;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
862;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5879778857586104}
863;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining and transforming existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
864;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5738437867424026}
865;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for combinations of numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
866;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872546153183589}
867;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
        
    return df
";{0: 0.5916829050864161}
868;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5999654586918528}
869;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
871;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5922546153183588}
872;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
873;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
874;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.591509273703452}
875;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5958909789547225}
876;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.573046088986753}
877;"
  # Keep the same columns selected in v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction and squared features for selected numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5937795029412402}
878;"
  # Keep the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Apply one-hot encoding for categorical features and drop first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the dataset
  df = (df - df.mean()) / df.std()

  # Create interaction terms for pairs of selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
879;"
  # Selecting the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns and dropping original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing the numerical columns
  df = (df - df.mean()) / df.std()

  # Creating interaction features for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Creating cubed features for selected numeric columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
880;"
  # Selecting the 8 most important columns for modeling
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5932422696393465}
881;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5751832839057156}
883;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying and transforming existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for specific columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
884;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
885;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
886;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
  
    return df
";{0: 0.5972546153183589}
887;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
     df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
888;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5961255830602943}
889;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5963052482297513}
891;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5890248016537626}
893;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
894;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]

  return df
";{0: 0.5700533742563378}
895;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5921340435275247}
896;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
897;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
898;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
899;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599861977281549}
900;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
  
    return df
";{0: 0.5902033332670767}
901;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying and transforming existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for specific columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
902;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
903;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
904;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.596478217802831}
905;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.597095379649569}
907;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
908;"
  # Selecting the most important columns based on feature importance analysis or domain knowledge
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Feature engineering - creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
909;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59176681044031}
910;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]

  return df
";{0: 0.5522196357717518}
911;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the dataframe
  df = (df - df.mean()) / df.std()

  # Create interaction features for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5981805412442848}
912;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6014471619022098}
913;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
914;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.596478217802831}
915;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
917;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
918;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
919;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
922;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
923;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5782462624961203}
925;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
926;"
  # Selecting the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5987062282215847}
927;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
928;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
929;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
932;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5997546153183588}
934;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
935;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction and squared features for selected numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5806516753206589}
936;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
937;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
938;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.5879778857586104}
939;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5903269044749854}
942;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5922546153183588}
943;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5762603747010387}
944;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
945;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction and squared features for selected numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945714284070787}
946;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
947;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5782725698229899}
949;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5904936090290507}
953;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5873168271800848}
954;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5887103115208905}
955;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
956;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5883451188458251}
957;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)
  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5947546153183588}
958;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5937795029412402}
959;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5999654586918528}
960;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5972546153183589}
961;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].pipe(pd.get_dummies, columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std() if x.dtype != 'O' else x)
";{0: 0.5018532268532269}
962;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for combinations of numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared and cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5566518511201852}
963;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
964;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5907731338368774}
965;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
966;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
967;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.573450287969821}
968;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3 

  return df
";{0: 0.5930093322994909}
969;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
970;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
971;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5737603747010387}
972;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by combining and transforming existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5972546153183589}
973;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
974;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6023159650116103}
975;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5943325373962809}
976;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
977;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5988368937993716}
978;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
979;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
980;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Normalize the data
    df = (df - df.mean()) / df.std()
    
    # Create new interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5624650345447579}
981;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by combining and transforming existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5949540018214263}
982;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5968055135219517}
983;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.599861977281549}
984;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
986;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5890248016537626}
987;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
988;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
989;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5972546153183589}
990;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding for categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing the data by subtracting the mean and dividing by standard deviation
  df = (df - df.mean()) / df.std()

  # Create interaction terms for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubic terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
991;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5895714284070788}
993;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
994;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5741449900856541}
995;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
996;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
997;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].pipe(pd.get_dummies, columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std() if np.issubdtype(x.dtype, np.number) else x)
";{0: 0.5075822895680282}
998;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.558836086637754}
999;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1001;"
  # Selecting the top 8 most important columns based on prior analysis
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding the categorical variables and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by combining and transforming existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1002;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5649190222748193}
1003;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5933765653867056}
1004;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]

  return df
";{0: 0.5697517151311493}
1005;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Add the further data preprocessing or feature engineering steps here

  return df
";{0: 0.5721443475334459}
1006;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction and squared features for selected numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897708149101462}
1007;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5485796763813438}
1008;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].pipe(pd.get_dummies, columns=['International plan', 'Voice mail plan'], drop_first=True).apply(lambda x: (x - x.mean()) / x.std() if np.issubdtype(x.dtype, np.number) else x)
";{0: 0.5034374444385954}
1009;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5969299399936835}
1010;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1011;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5774660698363002}
1012;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1013;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5930093322994909}
1014;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5919998382482952}
1015;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5499652473321321}
1016;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5957114054418156}
1017;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1018;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592015094360275}
1019;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5885904157488508}
1020;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction and squared features for selected numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5880590827280663}
1021;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1022;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909027429675353}
1023;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1024;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1025;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5947546153183588}
1026;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  

  return df
";{0: 0.5955250555699312}
1027;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1028;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5740558758198151}
1029;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
1030;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922248026402075}
1031;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1034;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5947546153183588}
1035;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5984080119275861}
1036;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction and squared features for selected numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930021563667326}
1037;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5910294455332623}
1038;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
1039;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5731572878865673}
1040;"
  # Selecting the most important columns based on domain knowledge or feature importance
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
1041;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1042;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591302234365978}
1043;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5738437867424026}
1045;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5863260867921718}
1046;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5785858734871671}
1049;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.599861977281549}
1051;"
  # Selecting the most important columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.594205834830554}
1052;"
  # Keep only the selected columns for processing
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
1053;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5738437867424026}
1054;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1055;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
1056;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5888105588418613}
1057;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1058;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6023159650116103}
1059;"
  # Selecting the columns of interest
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1060;"
  # Keep the same columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Drop NA values
  df = df.dropna()
  
  # One-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
1061;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5865836235290299}
1062;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919121927382889}
1063;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6013685393689918}
1064;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1065;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]

  return df
";{0: 0.5742603449303745}
1066;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5793490038178568}
1068;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
1069;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890226479192738}
1070;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1071;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1072;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1073;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1074;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5887103115208905}
1075;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5889515234553402}
1076;"
  # Selecting the columns of interest
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Removing rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1077;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5824007577898561}
1078;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5978956409593845}
1079;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955338019363529}
1080;"
  # Selected columns and target column
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
1081;"
  # Retaining the same columns selection
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Removing rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1082;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5908608421162653}
1083;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(df.columns, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in df.columns:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5191828601743602}
1085;"
# Keep the same columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6039316339518992}
1086;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1087;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1088;"
  # Keeping the columns that were previously selected
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Removing rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1089;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5905282185305355}
1090;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597555820137636}
1091;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1092;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction and squared features for selected numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5861489756846396}
1093;"
  # Select the top 8 important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
1094;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5798366552257536}
1095;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5969299399936835}
1096;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1097;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1098;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1099;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1100;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5748894069591033}
1102;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1103;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599861977281549}
1104;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907077920434423}
1105;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.592500014091365}
1106;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1107;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1108;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5977448113967903}
1109;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5944715275069403}
1110;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
1111;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5879388652274921}
1113;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5910424941062377}
1114;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5713593146927131}
1115;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.593773602660131}
1116;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59176681044031}
1117;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5736761490652474}
1118;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1119;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1120;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
1121;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5906906538901229}
1122;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]

    return df
";{0: 0.5960786385290303}
1123;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1124;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1125;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5843334093342267}
1126;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
      
  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5970120923080126}
1127;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5873168271800848}
1128;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1129;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1130;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5883836475764234}
1131;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1132;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897062404364724}
1133;"
  # Selecting only 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Removing rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5934667365304801}
1134;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5574186634812005}
1135;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1136;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5882061818404333}
1137;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.592500014091365}
1138;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(df.columns, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in df.columns:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5139019372946336}
1139;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6023750972460696}
1140;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
1141;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  return df
";{0: 0.5654335804697073}
1142;"
  # Select only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1143;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1144;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
1145;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5718498792375561}
1146;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1147;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1148;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
1149;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1150;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1151;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5713930818140274}
1152;"
  # Keep same columns with v2
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interactions between features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Include squared terms of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Include cubed terms for specific columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1153;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5773705577300015}
1154;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1155;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5879778857586104}
1156;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5748040428106874}
1157;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5907731338368774}
1158;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1159;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5736236436493921}
1160;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5974079895514877}
1161;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5887103115208905}
1162;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955562768919271}
1163;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5793978019140631}
1164;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls',
           'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1165;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
1166;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1167;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947822717805726}
1168;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Customer service calls',
           'Account length', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
1169;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
1170;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
1171;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
1172;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897708149101462}
1173;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1174;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1175;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5981805412442848}
1176;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1177;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1178;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5920714284070787}
1179;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1180;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1181;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5905282185305355}
1182;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5838416147424824}
1183;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1184;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1185;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1186;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1187;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
  
    return df
";{0: 0.5983152213789649}
1188;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59920072310279}
1190;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(selected_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in selected_cols:
      df[f'{col}_cubed'] = df[col] ** 3
          
  for col in df.columns:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.46160455798687705}
1191;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5987062282215847}
1192;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894334511661835}
1197;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5715851757881394}
1198;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]

    return df
";{0: 0.5921340435275247}
1199;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5931320344676847}
1200;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return df
";{0: 0.5718498792375561}
1201;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1202;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1203;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1204;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1205;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
1206;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes'], 3):
      df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
  
  return df
";{0: 0.5951218484055736}
1207;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
1208;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
             'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5919998382482952}
1209;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1210;"
  # Selecting only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Dropping rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1211;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1212;"
  # Selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1213;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.permutations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5913217166109604}
1214;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
1217;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599643150350206}
1218;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
              
  return df
";{0: 0.5966448592207978}
1219;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5850751281388716}
1220;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1221;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1223;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
1224;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
1225;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1226;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: pd.concat([df, (df[['Total day minutes', 'Total eve minutes', 'Customer service calls']]
                                           .assign(product=lambda x: x.prod(1))
                                           .add_suffix('_product'))], axis=1))\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                          'Customer service calls', 'Account length',
                                                                          'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                       'Customer service calls']})
";{0: 0.4618562695582563}
1227;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1228;"
  # Drop NA values
  df.dropna(inplace=True)
  
  # Select 8 important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5861786659512702}
1229;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1230;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                        'Customer service calls', 'Account length',
                                                                        'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
";{0: 0.44462031020273035}
1231;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df

";{0: 0.597095379649569}
1232;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6023159650116103}
1233;"
  # Select only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
1234;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1235;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1236;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1237;"
  # Select the most important columns in the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872546153183589}
1238;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5865836235290299}
1240;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1241;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5842889467682235}
1242;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the data
  df = (df - df.mean()) / df.std()

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1243;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909423961490142}
1244;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                        'Customer service calls', 'Account length',
                                                                        'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
";{0: 0.3848675492910566}
1245;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1246;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
              
  return df
";{0: 0.5922546153183588}
1247;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5969299399936835}
1248;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1250;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1251;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
              
  return df
";{0: 0.595331538395282}
1252;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5934667365304801}
1253;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding the categorical variables and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns using z-score normalization
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features for certain columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1255;"
  # Select the relevant columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5988368937993716}
1256;"
  def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
      df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
      
      df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
      
      df = (df - df.mean()) / df.std()
      
      for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
          df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
      for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
          df[f'{col}_squared'] = df[col] ** 2
          df[f'{col}_cubed'] = df[col] ** 3

      return df
";{0: 0.5897708149101462}
1257;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1258;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()  # Removing rows with missing values
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)  # One-hot encoding
  
  df = (df - df.mean()) / df.std()  # Standardizing numerical columns
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]  # Creating interaction features
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2  # Creating squared features
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  # Creating cubed features

  return df
";{0: 0.6004597435234871}
1259;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
1260;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1261;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
1262;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1263;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5911072120780947}
1264;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  return df
";{0: 0.5919998382482952}
1265;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5893277860500662}
1266;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
              
  return df
";{0: 0.595146181583419}
1267;"
  # Selecting specific columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding and dropping the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()

  # Creating interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1268;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5888105588418613}
1269;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1271;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
1272;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6005565021108117}
1273;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596757926576637}
1274;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5882835496191998}
1275;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables and standardize numerical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  # Generate new features with interactions and powers
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1276;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1277;"
  # Keep the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the data
  df = (df - df.mean()) / df.std()

  # Create interaction features for combinations of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubic features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1278;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding and dropping the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()

  # Creating interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1279;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59920072310279}
1281;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1284;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1285;"
  # Select the most important columns based on domain knowledge or feature importance analysis
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the data
  df = (df - df.mean()) / df.std()

  # Create interaction features for combinations of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubic features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1286;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(df.columns, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5673076961177648}
1287;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encoding for categorical columns and dropping the original columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize the numerical columns
    df = (df - df.mean()) / df.std()
    
    # Create interaction features for combinations of numerical columns
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        df[f'{col1}_squared'] = df[col1] ** 2
    
    # Create cubed features for selected numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.5636221216864373}
1288;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5953733151995315}
1289;"
  # Keep only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1290;"
  # Selecting the same 8 columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns using z-score normalization
  df = (df - df.mean()) / df.std()
  
  # Generating interaction features by multiplying 2 existing features
  for col1, col2 in list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for certain columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1291;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5864629767361274}
1292;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1293;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1294;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5899016741418882}
1295;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5941048976884691}
1296;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1297;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1298;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872872950569209}
1299;"
# Continuing from the code snippet above
# Added more preprocessing steps based on the previous functions v0, v1, and v2

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      # Interaction features
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Square numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Cubed numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
1300;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1301;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        df[f'{col1}_squared'] = df[col1] ** 2
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    return df
";{0: 0.5686202473892987}
1302;"
  # Selecting important columns for the model
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding the categorical variables and dropping first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns using z-score normalization
  df = (df - df.mean()) / df.std()
  
  # Creating new features through feature engineering
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1303;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1304;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1305;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
1306;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = pd.DataFrame()
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      interactions[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = pd.DataFrame()
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      squares[f'{col}_squared'] = df[col] ** 2
        
  cubes = pd.DataFrame()
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      cubes[f'{col}_cubed'] = df[col] ** 3

  df = pd.concat([df, interactions, squares, cubes], axis=1)

  return df
";{0: 0.5922546153183588}
1307;"
  # Selecting the same 8 columns and applying similar preprocessing steps as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6007394638032073}
1308;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1309;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
              
  return df
";{0: 0.5935449378990041}
1310;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.590341868658651}
1311;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1312;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6005565021108117}
1313;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
1314;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                        'Customer service calls', 'Account length',
                                                                        'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
";{0: 0.4453943164915314}
1316;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1317;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1318;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  cols_to_combine = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(cols_to_combine, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  cols_to_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in cols_to_transform:
      df[f'{col}_squared'] = df[col] ** 2

  cols_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1319;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1320;"
  # Selecting the columns that will be used
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1321;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  cols_to_combine = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(cols_to_combine, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  cols_to_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in cols_to_transform:
      df[f'{col}_squared'] = df[col] ** 2

  cols_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1322;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  return df
";{0: 0.5904936090290507}
1323;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
1324;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1325;"
  # Keep selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for combinations of all columns
  for col1, col2 in itertools.combinations(df.columns, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  # Create cubed features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5616611687321069}
1326;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5647728099505194}
1327;"
  # Simplified data preprocessing with feature engineering
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5945476089489321}
1328;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1330;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6024321301112583}
1332;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939515234553403}
1333;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5900460263613037}
1334;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1335;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
               .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
               .pipe(lambda df: (df - df.mean()) / df.std())\
               .pipe(lambda df: pd.concat([df, (df[['Total day minutes', 'Total eve minutes', 'Customer service calls']]
                                               .assign(product=lambda x: x.prod(1))
                                               .add_suffix('_product'))], axis=1))\
               .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                              'Customer service calls', 'Account length',
                                                                              'Total night minutes', 'Number vmail messages']})\
               .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                           'Customer service calls']})
";{0: 0.4562785475394172}
1336;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1337;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
1338;"
  # Selecting specific columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Removing rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1339;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns using z-score normalization
  df = (df - df.mean()) / df.std()

  # Creating new features by multiplying existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generating cubed features for certain columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1341;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897062404364724}
1342;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = pd.DataFrame()
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      interactions[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = pd.DataFrame()
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      squares[f'{col}_squared'] = df[col] ** 2
        
  cubes = pd.DataFrame()
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      cubes[f'{col}_cubed'] = df[col] ** 3

  df = pd.concat([df, interactions, squares, cubes], axis=1)

  return df
";{0: 0.5945476089489321}
1343;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  return df
";{0: 0.5904936090290507}
1344;"
  # Selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1345;"
  # Select the important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
1346;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5899391777763279}
1347;"
  # Keeping the same columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1348;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1349;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_day_minutes_x_Total_eve_minutes=lambda x: x['Total day minutes'] * x['Total eve minutes'],
                   Total_day_minutes_x_Customer_service_calls=lambda x: x['Total day minutes'] * x['Customer service calls'],
                   Total_eve_minutes_x_Customer_service_calls=lambda x: x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                          'Customer service calls', 'Account length',
                                                                          'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                       'Customer service calls']})
";{0: 0.5294674513806765}
1350;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1351;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5560708779901924}
1352;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.38346951991756706}
1353;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
            'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.44968360134197083}
1354;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1355;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5983152213789649}
1356;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(df.columns, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in df.columns:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5165509439171502}
1357;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1358;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1359;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns using z-score normalization
  df = (df - df.mean()) / df.std()
  
  # Generating interaction features by multiplying 2 existing features
  for col1, col2 in list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for certain columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1360;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5931751259398123}
1361;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5855295229571451}
1362;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
               .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
               .pipe(lambda df: (df - df.mean()) / df.std())\
               .pipe(lambda df: pd.concat([df, (df[['Total day minutes', 'Total eve minutes', 'Customer service calls']]
                                               .assign(product=lambda x: x.prod(1))
                                               .add_suffix('_product'))], axis=1))\
               .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                              'Customer service calls', 'Account length',
                                                                              'Total night minutes', 'Number vmail messages']})\
               .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                           'Customer service calls']})
";{0: 0.4611688691055781}
1363;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1364;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                                           'Account length', 'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5889515234553402}
1365;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  col_pairs = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(col_pairs, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  col_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in col_transform:
      df[f'{col}_squared'] = df[col] ** 2

  col_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in col_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1366;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1367;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
1368;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1369;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      df[f'{col1}_squared'] = df[col1] ** 2
      df[f'{col2}_squared'] = df[col2] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897708149101462}
1370;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                   'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(selected_cols, 2):
      col_name = f'{col1}_x_{col2}'
      df[col_name] = df[col1] * df[col2]
      df[f'{col_name}_squared'] = df[col_name] ** 2
  
  for col in selected_cols:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5460804890473765}
1371;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1372;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6006496770467539}
1373;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5882061818404333}
1374;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .apply(lambda x: (x - x.mean()) / x.std())\
             .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.38804864449669163}
1375;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1376;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1377;"
  # Selecting only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding the categorical variables and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns using z-score normalization
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features for certain columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
1378;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1379;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1380;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1381;"
  # Select 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1382;"
  # Keep only the required columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1383;"
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[cols]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1384;"
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[cols]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1386;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1387;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = df.dropna()

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()

  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1388;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes','Total eve minutes','Customer service calls','Account length',
              'Total night minutes','Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872546153183589}
1389;"
  # Filter the dataset to include only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6006496770467539}
1390;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes','Total eve minutes','Customer service calls','Account length',
              'Total night minutes','Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5983152213789649}
1391;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1392;"
  # Remove irrelevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1393;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1396;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.37981949667107295}
1397;"
  # List of selected columns
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  # Select the necessary columns
  df = df[selected_columns]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1398;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1399;"
  # Selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()

  # Creating interaction terms for selected pairs of columns
  col_pairs = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(col_pairs, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Creating squared features for selected columns
  col_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in col_transform:
      df[f'{col}_squared'] = df[col] ** 2

  # Creating cubic features for selected columns
  col_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in col_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1400;"
  # Simplify the code by combining feature engineering steps
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying and generating power features of selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5551462805089236}
1402;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1403;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1404;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1406;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1408;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1410;"
  # Remove rows with missing values
  df.dropna(inplace=True)
  
  # Select only the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5910424941062377}
1411;"
  # Select important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1412;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes','Customer service calls']})
";{0: 0.37754151976944017}
1414;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1416;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  cols_to_combine = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(cols_to_combine, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  cols_to_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in cols_to_transform:
      df[f'{col}_squared'] = df[col] ** 2

  cols_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1417;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6007394638032073}
1418;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1419;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1420;"
  # Keep the selected columns
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  # Apply one-hot-encoding and normalize the data
  df = df[cols]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1421;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1422;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  cols_to_combine = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(cols_to_combine, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  cols_to_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in cols_to_transform:
      df[f'{col}_squared'] = df[col] ** 2

  cols_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1423;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1424;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6014471619022098}
1425;"
  # Select the desired columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5943325373962809}
1426;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1427;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6023159650116103}
1428;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1430;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  cols_to_combine = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(cols_to_combine, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  cols_to_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in cols_to_transform:
      df[f'{col}_squared'] = df[col] ** 2

  cols_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
1431;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1432;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5721387199524095}
1433;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5728438481575377}
1434;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1435;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5905282185305355}
1436;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5680955100758662}
1437;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1438;"
  # Select 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1439;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5839429270066705}
1440;"
  df.dropna(inplace=True)
  
  # Select only the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
1441;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1442;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes','Customer service calls']})
";{0: 0.3855399168842468}
1443;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying two existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Adding cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5865403296040731}
1444;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
1445;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  col_pairs = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(col_pairs, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  col_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in col_transform:
      df[f'{col}_squared'] = df[col] ** 2

  col_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in col_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5944103039411134}
1446;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1447;"
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  # Apply one-hot-encoding and normalize the data
  df = df[cols]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599861977281549}
1448;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1449;"
  df_final = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df_final = pd.get_dummies(df_final, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_final = (df_final - df_final.mean()) / df_final.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_final[f'{col1}_x_{col2}'] = df_final[col1] * df_final[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_final[f'{col}_squared'] = df_final[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_final[f'{col}_cubed'] = df_final[col] ** 3

  return df_final
";{0: 0.5919998382482952}
1450;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Generating new features by multiplying and creating squared and cubed columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
1451;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1452;"
  # Keep only the selected columns for feature engineering
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1453;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
1455;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1456;"
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[cols]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5832223572538427}
1457;"
  # Selecting the most important columns
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  # Subsetting the dataframe with selected columns
  df = df[cols]

  # One-hot encoding categorical columns and standardizing the numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Creating interaction features for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1458;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5516161136283074}
1459;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1460;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes','Total eve minutes','Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
1461;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5979356259379428}
1462;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  cols_to_combine = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(cols_to_combine, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  cols_to_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in cols_to_transform:
      df[f'{col}_squared'] = df[col] ** 2

  cols_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1463;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5978956409593845}
1464;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5858030024151331}
1465;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1466;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5988368937993716}
1467;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1469;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1470;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1471;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1472;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  cols_to_combine = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(cols_to_combine, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  cols_to_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in cols_to_transform:
      df[f'{col}_squared'] = df[col] ** 2

  cols_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1473;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1474;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3795865593312174}
1475;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()  # Removing rows with missing values
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)  # One-hot-encoding
  
  df = (df - df.mean()) / df.std()  # Standardizing numerical columns

  # Creating interaction, squared, and cubed features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1476;"
  # Selecting the required columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
1477;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .pipe(lambda df: pd.concat([df, (df[['Total day minutes', 'Total eve minutes', 'Customer service calls']]
                                             .assign(product=lambda x: x.prod(1))
                                             .add_suffix('_product'))], axis=1))\
             .assign(**{f'{col1}_x_{col2}': df[col1]*df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                                                              'Account length', 'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.38381584026388743}
1478;"
  # Selecting and sorting columns based on importance
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Performing one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1479;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  df = (df - df.mean()) / df.std()

  # Generating interactions between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1480;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create interactions between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1481;"
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[cols]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1482;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1483;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1484;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1485;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  col_pairs = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(col_pairs, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  col_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in col_transform:
      df[f'{col}_squared'] = df[col] ** 2

  col_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in col_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1486;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding the categorical columns and dropping the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the numeric columns
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      # Creating interaction features between columns
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      # Creating squared features for numeric columns
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      # Creating cubed features for selected columns
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1487;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5988368937993716}
1488;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1489;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.5902033332670767}
1490;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5953733151995315}
1491;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

  # Calculate squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Calculate cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6005565021108117}
1492;"
# Continuing from `select_columns_and_return_dataframe_v2` function

  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5863260867921718}
1493;"
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[cols]

  # One-hot encoding for categorical columns and standardization
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Feature engineering with interactions
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Feature engineering with squared values
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Feature engineering with cubic values
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
1494;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1495;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
1496;"
  # Keeping the 8 most important columns and one-hot-encoding categorical columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features by multiplying pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
1497;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599643150350206}
1498;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1499;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.3763864052188852}
1502;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1504;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1505;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1506;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5888105588418613}
1507;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6006496770467539}
1508;"
  # Drop NA values
  df.dropna(inplace=True)
  
  # Keep only the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns (dropping the first column)
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1509;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1510;"
  df.dropna(inplace=True)
  
  # Keep only the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns (dropping the first column)
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1511;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5870714284070787}
1512;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.590341868658651}
1513;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1514;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1516;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
1517;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1518;"
  # Function to preprocess the dataset and select important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Generate new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1519;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5541827153177161}
1520;"
  # Drop NA values
  df.dropna(inplace=True)
  
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns, drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1521;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1522;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1523;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
1524;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  col_pairs = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(col_pairs, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  col_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in col_transform:
      df[f'{col}_squared'] = df[col] ** 2

  col_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in col_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
1525;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5858348622319391}
1526;"
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[cols]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
1527;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1528;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5719114472251368}
1529;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col in df.select_dtypes(include=['float64', 'int64']).columns:
    df[col] = (df[col] - df[col].mean()) / df[col].std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5809890589784945}
1531;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5928575919290913}
1532;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1533;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5879249794440884}
1535;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes','Total eve minutes','Customer service calls','Account length',
              'Total night minutes','Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1536;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  col_pairs = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(col_pairs, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  col_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in col_transform:
      df[f'{col}_squared'] = df[col] ** 2

  col_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in col_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
1537;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1538;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1539;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
1540;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()  # Removing rows with missing values
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)  # One-hot encoding
  
  df = (df - df.mean()) / df.std()  # Standardizing numerical columns
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]  # Creating interaction features
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2  # Creating squared features
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  # Creating cubed features

  return df
";{0: 0.6015229080012856}
1541;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5912419570905108}
1542;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5762103172946436}
1543;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1544;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5887103115208905}
1545;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                        'Customer service calls', 'Account length',
                                                                        'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
";{0: 0.38831800476605194}
1546;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1547;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927124540481044}
1548;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5908543845167031}
1549;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes','Total eve minutes','Customer service calls','Account length',
              'Total night minutes','Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1550;"
  # Selecting the most important columns
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  # Filtering the dataframe by selected columns
  df = df[cols].copy()

  # One-hot encoding for categorical columns and standardization
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Feature engineering with interactions
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Feature engineering with squared values
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Feature engineering with cubic values
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1551;"
  cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[cols]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  features_to_square = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']
  features_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls'] 

  for col in features_to_square:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in features_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
1552;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
1553;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1554;"
  df.dropna(inplace=True)
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5987062282215847}
1556;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  cols_to_combine = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(cols_to_combine, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  cols_to_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in cols_to_transform:
      df[f'{col}_squared'] = df[col] ** 2

  cols_to_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
1557;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  col_pairs = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(col_pairs, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  col_transform = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'Number vmail messages']
  for col in col_transform:
      df[f'{col}_squared'] = df[col] ** 2

  col_cube = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in col_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5900460263613037}
1558;"
  # Keep selected columns and drop unused columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying pairs of selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599643150350206}
1559;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5920714284070787}
1560;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)},
                   **{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                 'Customer service calls', 'Account length',
                                                                 'Total night minutes', 'Number vmail messages']},
                   **{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                              'Customer service calls']})
";{0: 0.38172524792939266}
1561;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1562;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5878261453882108}
1563;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
           
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1564;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Encode categorical variables using one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1565;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5754563300153027}
1566;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1567;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Encode categorical variables using one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1568;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1570;"
  # Keep only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1571;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1572;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
1573;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927365430292022}
1574;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  df = (df - df.mean()) / df.std()

  # Generating interactions between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1575;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1576;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6022546153183589}
1577;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
   
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1578;"
  # Keep only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Apply one-hot-encoding to categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
       
  return df
";{0: 0.596478217802831}
1579;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
1581;"
  # Retain only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot-encoding on categorical columns while dropping the first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5963052482297513}
1582;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1583;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5560708779901924}
1584;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1585;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1586;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5944103039411134}
1587;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1589;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1590;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5887103115208905}
1591;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1592;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5865403296040731}
1593;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5961255830602943}
1594;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
1595;"
  # Keep only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1596;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6014471619022098}
1598;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Apply one-hot-encoding to categorical columns and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
       
  return df
";{0: 0.5891377322014757}
1600;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
1601;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1604;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1605;"
  # Selecting the desired columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Dropping rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1606;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5971327781003303}
1608;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912950308915508}
1609;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1610;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927365430292022}
1611;"
  # Select important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize selected columns
  df = (df - df.mean()) / df.std()
  
  # Generate interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1612;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
1613;"
  # Selecting the desired columns from the dataframe
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns and standardizing numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Generating new features based on interactions and higher-order terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1615;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5651515404652301}
1616;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
1617;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5861786659512702}
1618;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1619;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1620;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.589962994672139}
1621;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Encode categorical variables using one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1622;"
  # Selecting the 8 most important columns based on feature importance or domain knowledge
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Applying one-hot-encoding to categorical columns and dropping the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
       
  return df
";{0: 0.5919998382482952}
1623;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949212819850255}
1624;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
1626;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1627;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5891377322014757}
1628;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1629;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1630;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1632;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1633;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: pd.concat([df, (df[['Total day minutes', 'Total eve minutes', 'Customer service calls']]
                                           .assign(product=lambda x: x.prod(1))
                                           .add_suffix('_product'))], axis=1))\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                          'Customer service calls', 'Account length',
                                                                          'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                       'Customer service calls']})
";{0: 0.4551318681318682}
1634;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
1635;"
  # Keep the same steps as in v0, but with slight improvements
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Applying one-hot-encoding and standardizing in one step for categorical and numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  # Creating interaction terms for all combinations of selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for all selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5712270818400129}
1636;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1637;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1638;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total night minutes', 'Account length']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5456525182134939}
1639;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Encode categorical variables using one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls','Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1640;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5912419570905108}
1641;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
1642;"
  # Select the same columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1643;"
  # Select columns based on importance
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  df = (df - df.mean()) / df.std()
  
  # Interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1644;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5818087554457474}
1646;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1647;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                        'Customer service calls', 'Account length',
                                                                        'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
";{0: 0.3866032967098805}
1650;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1651;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
1652;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1654;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897708149101462}
1657;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.570057481814889}
1658;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  # Include interaction and polynomial features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
1659;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1660;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1661;"
  # Selecting specific columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Removing rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1662;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1663;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6015229080012856}
1664;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1665;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
1666;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1667;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5711954061985811}
1668;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.3602119594276457}
1669;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5811792613940224}
1670;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1671;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes','Customer service calls']})
";{0: 0.3788318423500853}
1672;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1673;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.449552935764184}
1674;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5978956409593845}
1675;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and standardize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  # Creating interaction terms for all combinations of selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                                           'Total night minutes', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for all selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5663645682467241}
1677;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5888105588418613}
1678;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1679;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1680;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1681;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1682;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.596478217802831}
1683;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1684;"
  # Selecting specific columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Generating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1685;"
  def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5853660568851657}
1686;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1687;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912950308915508}
1688;"
  # Keep only the specified 8 columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1689;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5820714284070787}
1690;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    df[[f'{col}_squared' for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                                     'Account length', 'Total night minutes', 'Number vmail messages']]] = df[[col for col in
                                                                                                               ['Total day minutes',
                                                                                                                'Total eve minutes',
                                                                                                                'Customer service calls',
                                                                                                                'Account length',
                                                                                                                'Total night minutes',
                                                                                                                'Number vmail messages']]]**2
    
    df[[f'{col}_cubed' for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']]] = df[[col for col in
                                                                                                                 ['Total day minutes',
                                                                                                                  'Total eve minutes',
                                                                                                                  'Customer service calls']]]**3
    
    return df
";{0: 0.5990838836110417}
1691;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912950308915508}
1692;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.594205834830554}
1693;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5880016609652181}
1694;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1695;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5873854990133631}
1696;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:    
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5745750256848936}
1697;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1698;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1699;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
1700;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6023750972460696}
1701;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1702;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1703;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1704;"
  # Selecting the specified columns from the dataframe
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns and standardizing numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Generating new features based on interactions and higher-order terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1705;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Account length', 'Total night minutes', 'International plan', 
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5827105712108122}
1706;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1707;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599643150350206}
1710;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59176681044031}
1712;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = df.dropna()

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()

  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1713;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1715;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1716;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot-encoding on categorical columns while dropping the first to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5947546153183588}
1717;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
1718;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
1719;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1720;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Generating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1721;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5983152213789649}
1722;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5987062282215847}
1723;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5905282185305355}
1724;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1725;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5835516814693885}
1726;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1727;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .apply(lambda x: (x - x.mean()) / x.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                             'Customer service calls']})
  return df
";{0: 0.38598582218070476}
1728;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927365430292022}
1729;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5661577072941817}
1730;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1731;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912950308915508}
1734;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3782189285238012}
1735;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1736;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1737;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls','Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1738;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1739;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597555820137636}
1740;"
  # Keeping the DataFrame with the required columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1742;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5912419570905108}
1744;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
1745;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1747;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1748;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
1749;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1750;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in df.select_dtypes(include=['float64', 'int64']).columns:
      df[col] = (df[col] - df[col].mean()) / df[col].std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5844891957025854}
1751;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5885820015444263}
1752;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1754;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5821958046418135}
1755;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1756;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
1758;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1759;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'Number vmail messages']
  
  for col in selected_columns:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1760;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the dataset
  df = (df - df.mean()) / df.std()
  
  # Creating new interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Adding cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1762;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1763;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5955250555699312}
1764;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1765;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes','Customer service calls']})
";{0: 0.3763318423500853}
1766;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5934667365304801}
1767;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919121927382889}
1768;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1770;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5919998382482952}
1771;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1772;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1773;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6039316339518992}
1774;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1775;"
  # Selecting specific columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1777;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1778;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599861977281549}
1779;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5897546153183588}
1781;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1782;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5899012222838034}
1783;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1784;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1785;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6030238460875896}
1786;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5905017497741666}
1787;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5885820015444263}
1788;"
# Function implementation
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1789;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1790;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
1791;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945714284070787}
1794;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.38019163935727146}
1795;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5961255830602943}
1796;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1797;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1798;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
     df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
1799;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_day_minutes_x_Total_eve_minutes=lambda x: x['Total day minutes'] * x['Total eve minutes'],
                   Total_day_minutes_x_Customer_service_calls=lambda x: x['Total day minutes'] * x['Customer service calls'],
                   Total_eve_minutes_x_Customer_service_calls=lambda x: x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                          'Customer service calls', 'Account length',
                                                                          'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                       'Customer service calls']})
";{0: 0.5301945588562502}
1800;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5846729159719536}
1801;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5709545094260937}
1802;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1803;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5904936090290507}
1804;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1805;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5865403296040731}
1806;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5961255830602943}
1807;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls']})
";{0: 0.37864100644587906}
1808;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1809;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1810;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.3842628156866358}
1811;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls']})
";{0: 0.3794114466974514}
1812;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5860224094402525}
1813;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1814;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5883699124670136}
1815;"
  # Keeping only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical columns and standardizing numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Generating new features based on interactions, higher-order terms, and cubed terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1816;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1817;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
1818;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.587553356117922}
1819;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1820;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
1821;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1822;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5961255830602943}
1823;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1824;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1826;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5914616723095177}
1827;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1828;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1829;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1830;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5927674358311793}
1831;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.582408851719962}
1832;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5963052482297513}
1833;"
  ### Fill in the function implementation for select_columns_and_return_dataframe_v3
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5801948479403719}
1834;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5891377322014757}
1835;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5799321747918675}
1836;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5868316751004687}
1837;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1838;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5923726332263557}
1840;"
  # Keep the same columns as in v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot-encode categorical columns and drop the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction terms for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1841;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1]*df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.38077272952846897}
1843;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1844;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1845;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Generate interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
1846;"
  # Selecting specific columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Performing one-hot encoding on categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1847;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5861786659512702}
1848;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = df.dropna()

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1849;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5883039980344082}
1850;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5904936090290507}
1851;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
1852;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
1853;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6022546153183589}
1854;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5825101399879961}
1855;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
1856;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5683277528723389}
1857;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5910424941062377}
1858;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode the categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Generate new features by multiplication
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1859;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
1860;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5900875721556879}
1861;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1862;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls']})
";{0: 0.3771286607668667}
1863;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Generate new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
1864;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1865;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1866;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1867;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5934667365304801}
1868;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
1869;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5643839428823458}
1870;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5816898140726867}
1871;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5934667365304801}
1872;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1874;"

  # Select the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Perform one-hot encoding on categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction terms between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df

";{0: 0.5939937457531415}
1875;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1876;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5858030024151331}
1877;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5887103115208905}
1879;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
1880;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1881;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
1882;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  return df
";{0: 0.596478217802831}
1883;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1884;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5870714284070787}
1885;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.37864100644587906}
1886;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
1887;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
1888;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1889;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5988368937993716}
1890;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.590341868658651}
1891;"
  df = (df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
        .dropna()
        .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))
        .pipe(lambda df: (df - df.mean()) / df.std())
        .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])
        .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                            'Customer service calls', 'Account length',
                                                            'Total night minutes', 'Number vmail messages']})
        .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']}))
  return df
";{0: 0.3725967026484107}
1892;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                              'Customer service calls', 'Account length',
                                                              'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                              'Customer service calls']})
";{0: 0.37843400007645234}
1893;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5848248828806478}
1894;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5999654586918528}
1895;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5865403296040731}
1896;"
  # Select relevant columns
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  # Filter the dataset with selected columns
  df = df[selected_columns]
  
  # Perform one-hot encoding for categorical columns and standardize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate polynomial features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1897;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1898;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1899;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5728438481575377}
1900;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1901;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1902;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1903;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5990838836110417}
1904;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1905;"
  # Dropping columns that are not needed
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables and dropping first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
1906;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1908;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5930093322994909}
1909;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1910;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5910210259346701}
1911;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
1913;"
  # Selecting the required columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
1914;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1915;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.599643150350206}
1916;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5987062282215847}
1917;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5906814149436235}
1918;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                   'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_cols]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1919;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                        'Customer service calls', 'Account length',
                                                                        'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
";{0: 0.38241356156099526}
1921;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1922;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5177027297909421}
1923;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6015959326836283}
1924;"
  # Remove NA values
  df = df.dropna()

  # Keep only numerical columns
  df = df.select_dtypes(include=[np.number])

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.42037916938010894}
1925;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1926;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5877420177516927}
1927;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872546153183589}
1928;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.37843400007645234}
1929;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    # One-hot encode categorical columns and drop NA values
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
  
    # Standardize numerical features
    df = (df - df.mean()) / df.std()
    
    # Create interaction features
    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']
  
    # Add squared features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    # Add cubic features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5149981284562039}
1930;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
1931;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
1932;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.37689572342701116}
1934;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5893301685352986}
1936;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
1937;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Account length', 'Total night minutes', 'International plan', 
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5796515887213561}
1938;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1939;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5883836475764234}
1940;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5988368937993716}
1941;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
1942;"
  # Keeping relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and drop first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the dataset
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1943;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5885482720703852}
1945;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1946;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1947;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
1948;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the data
  df = (df - df.mean()) / df.std()

  # Interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
1949;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5861786659512702}
1950;"
  # Select the relevant columns
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create pairwise interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared and cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5552729830746506}
1951;"
  # Keep the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interactions between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
1952;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597555820137636}
1953;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
1954;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
1955;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1956;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5969299399936835}
1957;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5951304323118228}
1958;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5861113015127505}
1959;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
1960;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Account length', 'Total night minutes', 'International plan', 
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls', 'Number vmail messages']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.573110818585482}
1962;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1963;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.6023750972460696}
1964;"
  # Keep only selected relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5887103115208905}
1965;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
1966;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
1967;"
  # Select the top 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1968;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
1969;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
1970;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
1971;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                        'Customer service calls', 'Account length',
                                                                        'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
";{0: 0.38241356156099526}
1973;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Generate interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate polynomial features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890226479192738}
1974;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59176681044031}
1975;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5934667365304801}
1977;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
1978;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5893301685352986}
1979;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(product=lambda x: x['Total day minutes'] * x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total eve minutes']})
";{0: 0.21957683698717068}
1980;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
1981;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.59176681044031}
1982;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5957114054418156}
1983;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
1984;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
1986;"
  # Select most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubic features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5891377322014757}
1987;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5983152213789649}
1988;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
1989;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5948359102373593}
1990;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3790772411230915}
1991;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
1992;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.26872813383240396}
1993;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3776599937876512}
1994;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1]*df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.38241356156099526}
1996;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5978956409593845}
1997;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5959388258446746}
1998;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubic features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
1999;"
  # Select the specified columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables and drop the first encoded column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5900460263613037}
2000;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2001;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop NA values
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
  
  # Standardize numerical features
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']
  
  # Add squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Add cubic features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.514523242611455}
2002;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2003;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying pairs of existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2004;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.588583128010269}
2005;"
  # Select the important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5891377322014757}
2006;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.601286873382875}
2007;"
# selecting only the important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # one-hot-encoding categorical columns and standardizing numeric columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  # create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
2008;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5814417200167612}
2009;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
          'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5900460263613037}
2010;"
  # Retaining only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Removing rows with missing values
  df = df.dropna()
  
  # Performing one-hot-encoding for categorical columns and dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
2011;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5909642927377137}
2012;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
2013;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
2014;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5743404111001871}
2015;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
2016;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2017;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
2018;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls']})
";{0: 0.3751283482180309}
2019;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5865403296040731}
2020;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5895714284070788}
2021;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
2022;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2023;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
2024;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
            'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599861977281549}
2025;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907077920434423}
2027;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2028;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3794114466974514}
2029;"
  # Select only the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
2030;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
2031;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
2032;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2033;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6014471619022098}
2034;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2036;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5988368937993716}
2037;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5865403296040731}
2038;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3831103728917534}
2039;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    # One-hot encode categorical columns and drop NA values
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
  
    # Standardize numerical features
    df = (df - df.mean()) / df.std()
    
    # Create interaction features
    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']
    
    # Add interaction features for selected columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Add squared features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    # Add cubic features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5861493082484713}
2040;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59920072310279}
2041;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.598748447040619}
2042;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
2044;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
2045;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls']})
";{0: 0.37843400007645234}
2046;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5727141481032465}
2049;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955562768919271}
2050;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2051;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
2052;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(International_plan=df['International plan'].apply(lambda x: 1 if x == 'Yes' else 0))\
             .assign(Voice_mail_plan=df['Voice mail plan'].apply(lambda x: 1 if x == 'Yes' else 0))\
             .drop(['International plan', 'Voice mail plan'], axis=1)\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3727558929829967}
2053;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
2054;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2055;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2056;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(International_plan=df['International plan'].apply(lambda x: 1 if x == 'Yes' else 0))\
             .assign(Voice_mail_plan=df['Voice mail plan'].apply(lambda x: 1 if x == 'Yes' else 0))\
             .drop(['International plan', 'Voice mail plan'], axis=1)\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.37981949667107295}
2057;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5934667365304801}
2058;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
2059;"
  # Keep the same columns as in v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Create cubic features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
2060;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2061;"
  # Select the same 8 columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
2062;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5659290425330548}
2063;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2065;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df['International plan'] = pd.get_dummies(df['International plan'], drop_first=True)
  df['Voice mail plan'] = pd.get_dummies(df['Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2066;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
2067;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
         .dropna()\
         .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
         .pipe(lambda df: (df - df.mean()) / df.std())\
         .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
         .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
         .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
         .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.2626871932403277}
2068;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2069;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
2070;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5720272549842568}
2071;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2072;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5978956409593845}
2073;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
2074;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2075;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6005565021108117}
2076;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Account length', 'Total night minutes', 'International plan', 
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5813990981121776}
2077;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5763035567109037}
2078;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.577881530822266}
2079;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
2080;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6004597435234871}
2081;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5693404111001871}
2082;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2083;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
2084;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5759226895811997}
2086;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
2089;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
          
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
2090;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872872950569209}
2091;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2093;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
     df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2094;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5730237965459096}
2095;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6007394638032073}
2096;"
  # Filtering the dataframe to select important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()
  
  # Creating new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5903269044749854}
2097;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5879778857586104}
2098;"
  df = (df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
        .dropna()
        .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))
        .pipe(lambda df: (df - df.mean()) / df.std())
        .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])
        .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                            'Customer service calls', 'Account length',
                                                            'Total night minutes', 'Number vmail messages']})
        .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']}))
  return df
";{0: 0.3758862293758154}
2099;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
2100;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # New feature: Multiply selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # New feature: Square of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # New feature: Cube of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2102;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2103;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2105;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
2106;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2107;"
# Keep the same selected columns as in v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Apply one-hot-encoding for categorical columns with drop_first=True
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  # Generate interaction features for selected pairs of numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubic features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
2108;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5980407788403714}
2109;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']))\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3819087654270084}
2110;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
               .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
               .pipe(lambda df: (df - df.mean()) / df.std())\
               .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
               .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
               .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                      'Customer service calls', 'Account length',
                                                                      'Total night minutes', 'Number vmail messages']})\
               .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.37890861443609064}
2111;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
2112;"
  # Making a copy of the original dataframe
  df_copy = df.copy()
  
  # Choosing the 8 most important columns
  df_copy = df_copy[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                     'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical features with drop_first=True
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  # Interaction features for selected pairs of numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  # Squared features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  # Cubic features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5947546153183588}
2113;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total night minutes', 'Account length']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5454404291360813}
2114;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5747000696456611}
2115;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
2116;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5766265229334462}
2117;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5843000295308485}
2118;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5858030024151331}
2119;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  # Select only the important columns
  df = df[selected_columns]

  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns
  df = (df - df.mean()) / df.std()

  # Generate interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate polynomial features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5905282185305355}
2120;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first dummy variable to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubic terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df

";{0: 0.5930093322994909}
2121;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2122;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2123;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6004597435234871}
2126;"
  # Remove null values
  df.dropna(inplace=True)
  
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
           'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2127;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
2129;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
2131;"
  # Select the same columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2132;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(Total_day_cubed=df['Total day minutes'] ** 3)
";{0: 0.3666134476984061}
2133;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
       .dropna()\
       .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
       .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
       .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                         'Customer service calls', 'Account length',
                                                                         'Total night minutes', 'Number vmail messages']})\
       .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
       
  return df
";{0: 0.36472415454959695}
2134;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2135;"
  # Keep only selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2136;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5920971127839341}
2137;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.581095971284751}
2138;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5912419570905108}
2139;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5972546153183589}
2141;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5966448592207978}
2142;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
2143;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5984648892550203}
2144;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes', 'Customer service calls']})
";{0: 0.381331368214198}
2145;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
2146;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5943325373962809}
2147;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
2148;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5870714284070787}
2150;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5947546153183588}
2151;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes',
               'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.37407777648423357}
2153;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  # Select only the specified columns
  df = df[selected_columns]

  # Perform one-hot encoding on categorical columns and standardize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Create interaction terms for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5905282185305355}
2154;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
2155;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5879223409748663}
2156;"
  # Select the 8 most important columns and create interaction features and squared features
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)  # One-hot encode
  
  df = (df - df.mean()) / df.std()  # Normalize
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]  # Create interaction features
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2  # Generate squared features
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  # Generate cubed features

  return df
";{0: 0.5955250555699312}
2157;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5911220613184711}
2158;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
               .dropna()\
               .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
               .assign(International_plan=df['International plan'].apply(lambda x: 1 if x == 'Yes' else 0))\
               .assign(Voice_mail_plan=df['Voice mail plan'].apply(lambda x: 1 if x == 'Yes' else 0))\
               .drop(['International plan', 'Voice mail plan'], axis=1)\
               .pipe(lambda df: (df - df.mean()) / df.std())\
               .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
               .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                                 'Customer service calls']})
";{0: 0.3788318423500853}
2161;"
  # Select important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2162;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2163;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5903763287049276}
2164;"
  # filter out the most important columns
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  # one-hot encode categorical columns and drop the original columns
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # standardize numerical columns
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  # create interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  # create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  # create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.593773602660131}
2166;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5930093322994909}
2168;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2170;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5646387199524096}
2171;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
2172;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
2173;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
2175;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5883617509877238}
2176;"
  # Drop rows with missing values
  df.dropna(inplace=True)

  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new feature by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes','Total eve minutes','Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes','Total eve minutes','Customer service calls','Account length','Total night minutes','Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes','Total eve minutes','Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2177;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5923726332263557}
2178;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  df_copy['day_eve_calls_ratio'] = df_copy['Total day minutes'] / df_copy['Total eve minutes']
  
  return df_copy
";{0: 0.366470881035341}
2180;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and drop the first dummy variable
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubic terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2181;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5830864782347628}
2182;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5960641391278826}
2183;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .pipe(lambda df: df.assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total eve minutes']})
";{0: 0.2169961918258803}
2184;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2185;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5900460263613037}
2186;"
  # Select the top 8 most important columns based on feature importance analysis
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
2187;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
2188;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
2189;"
  df_copy = df.copy()

  # Selecting columns
  df_copy = df_copy[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                     'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical features with drop_first=True
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  # Creating interaction features for selected pairs of numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  # Adding squared features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  # Including cubic features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.594205834830554}
2190;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2191;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col}_x_{col2}': lambda x: x[col] * x[col2] for col, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                          'Customer service calls', 'Account length',
                                                                          'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                       'Customer service calls']})
";{0: 0.4469722906028936}
2192;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5891307820322311}
2194;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2195;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5811792613940224}
2196;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
2197;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
2198;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
2199;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2200;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2201;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2204;"
  # Keep selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize selected columns
  df = (df - df.mean()) / df.std()

  # Generate interactions between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2205;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5903763287049276}
2206;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5883699124670136}
2207;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5906814149436235}
2208;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.581391350471435}
2209;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)  # One-hot encode
  
  df = (df - df.mean()) / df.std()  # Normalize
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]  # Create interaction features
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2  # Generate squared features
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  # Generate cubed features

  return df
";{0: 0.5987062282215847}
2210;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=lambda x: x['Total day minutes'] * x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.44969929113802837}
2211;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'Number vmail messages', 'International plan', 'Voice mail plan']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5858593071949575}
2212;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
         .dropna()\
         .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
         .pipe(lambda df: (df - df.mean()) / df.std())\
         .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
         .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
         .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
         .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.26219662869548455}
2213;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
2214;"

  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df

";{0: 0.5902033332670767}
2215;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922248026402075}
2216;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6015959326836283}
2217;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2218;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2219;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5908809522166025}
2220;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963397210900055}
2221;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in df.columns:
      df[col] = (df[col] - df[col].mean()) / df[col].std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2222;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
2223;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
2224;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes','Customer service calls']})
";{0: 0.3822886324735421}
2225;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2226;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5855899469255972}
2227;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2228;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5883836475764234}
2229;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls', 'Number vmail messages']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5788159467906102}
2230;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
        .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
        .pipe(lambda df: (df - df.mean()) / df.std())\
        .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
        .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                              'Customer service calls', 'Account length',
                                                              'Total night minutes', 'Number vmail messages']})\
        .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                           'Customer service calls']})
";{0: 0.38346951991756706}
2231;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=lambda x: x['Total day minutes'] * x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.45156760240231275}
2232;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                  'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.37547747767162054}
2233;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
2234;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5945476089489321}
2235;"
  df_copy = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].copy()
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5990838836110417}
2236;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
2237;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5923301405919192}
2238;"
  df_copy = df.copy()
  
  # Selecting columns
  df_copy = df_copy[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                     'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical features with drop_first=True
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing numerical columns
  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  # Creating interaction features for selected pairs of numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  # Adding squared features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  # Including cubic features for selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5960641391278826}
2239;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5880440890025693}
2240;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6008658692468536}
2241;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5239046965242741}
2242;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
2243;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5701289160308409}
2244;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6013685393689918}
2245;"
  df_copy = df.copy()
  
  df_copy = df_copy[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                     'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df_copy = pd.get_dummies(df_copy, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df_copy = (df_copy - df_copy.mean()) / df_copy.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df_copy[f'{col1}_x_{col2}'] = df_copy[col1] * df_copy[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df_copy[f'{col}_squared'] = df_copy[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df_copy[f'{col}_cubed'] = df_copy[col] ** 3

  return df_copy
";{0: 0.5846729159719536}
2246;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2247;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5819401309592399}
2249;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
2250;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5805928415613432}
2251;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5852262944812524}
2252;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2253;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Squaring selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Cubing selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2254;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
2255;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5983152213789649}
2256;"
  # Drop rows with missing values
  df.dropna(inplace=True)

  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize selected columns
  df = (df - df.mean()) / df.std()

  # Create new feature by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes','Total eve minutes','Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared and cubed features of selected columns
  for col in ['Total day minutes','Total eve minutes','Customer service calls','Account length',
              'Total night minutes','Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.558981224518741}
2257;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=lambda x: x['Total day minutes'] * x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.38245121246052804}
2259;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5937970388741041}
2260;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907077920434423}
2261;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6005565021108117}
2262;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5982071775461144}
2263;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5803385676643618}
2264;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2265;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
2266;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5801253348000651}
2267;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
2268;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes','Total eve minutes','Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2270;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5956914542756742}
2271;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2273;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.568689352863802}
2274;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2276;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6015229080012856}
2277;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=lambda x: x['Total day minutes'] * x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.44699658843532564}
2278;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5696387199524097}
2279;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
2281;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
2282;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5968055135219517}
2284;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
2285;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      if col in ['Total day minutes', 'Total eve minutes']:
          df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5786268354822819}
2286;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  
  for col1, col2 in itertools.combinations(interactions, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in interactions:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
2287;"
  return (df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
          .dropna()
          .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))
          .pipe(lambda df: (df - df.mean()) / df.std())
          .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])
          .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                              'Customer service calls', 'Account length',
                                                              'Total night minutes', 'Number vmail messages']})
          .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']}))
";{0: 0.3751283482180309}
2288;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5900460263613037}
2289;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2290;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
2291;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)  # One-hot encode categorical columns

  df = (df - df.mean()) / df.std()  # Standardize numerical columns

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]  # Create interaction terms for selected columns

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2  # Add squared features for selected columns

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3  # Add cubed features for selected columns

  return df
";{0: 0.599643150350206}
2292;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'Number vmail messages']
  
  for col in selected_columns:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2293;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2294;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=lambda x: x['Total day minutes'] * x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.3834955162579964}
2295;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2296;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2297;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total eve minutes']})
";{0: 0.2121818322227616}
2298;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  pairs = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in pairs:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
2299;"
  # Select the important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
2301;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
2302;"
  # Selecting only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2303;"
  # Select the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode the categorical variables and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by interacting selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2304;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5838303748616789}
2305;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5891377322014757}
2306;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(**{f'{col1}_x_{col2}': df[col1]*df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                                                              'Account length', 'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.38273767314798446}
2307;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5984648892550203}
2308;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2309;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
2310;"
  # Selecting specific columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating polynomial features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5870714284070787}
2311;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2313;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total night minutes', 'Account length']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5442141192141193}
2314;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6005565021108117}
2315;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2316;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2317;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.581391350471435}
2318;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5673381064554771}
2319;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2320;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5961255830602943}
2321;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=lambda x: x['Total day minutes'] * x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.3828786331411133}
2322;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927365430292022}
2323;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5821395174623073}
2324;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5768637499437902}
2325;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()
    
    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.591883163276018}
2326;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  for col in ['Account length', 'Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5758862045226539}
2327;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5890226479192738}
2328;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2329;"
  # Select 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
2330;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2331;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
2332;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5955250555699312}
2333;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'Number vmail messages', 'International plan', 'Voice mail plan']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5834350647707149}
2334;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5886343003780322}
2335;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2336;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5882835496191998}
2337;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5908543845167031}
2338;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
2340;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
2341;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col}_x_{col2}': df[col] * df[col2] for col, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.3856591582362377}
2342;"
  # Feature selection based on domain knowledge or feature importance analysis
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2343;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.377667088666263}
2345;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
2347;"
  # Include the 'State' column for encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan', 'State'], drop_first=True)

  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Include age feature derived from 'Account length'
  df['Age'] = df['Account length'] / 12

  # Return the modified dataframe
  return df
";{0: 0.4012642307866646}
2348;"
  # Keep only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2349;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
2350;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
2351;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(interactions, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in interactions:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5861786659512702}
2352;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                              'Customer service calls', 'Account length',
                                                              'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                              'Customer service calls']})
";{0: 0.37539566483097225}
2353;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2354;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5879778857586104}
2355;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2356;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
2357;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2358;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5955250555699312}
2359;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
       .dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5908617907169147}
2360;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5957114054418156}
2361;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    # Calculate product of total day minutes, total eve minutes, and customer service calls
    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    # Create pairwise multiplication features
    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Create squared features
    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    # Create cubed features
    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5969751615644219}
2362;"
  # Keep the same columns as in v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode the categorical variables and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by interacting selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
2363;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
2364;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
2365;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
2366;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5858348622319391}
2367;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5896580883936903}
2368;"
  # Select the most important columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
2369;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Account length', 'Total night minutes', 'International plan', 
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df

";{0: 0.5815105630803306}
2370;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6034465144081439}
2371;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5854621624881702}
2372;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5773844040912306}
2373;"
  # Select specific columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
2374;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df.fillna(0, inplace=True)
  
  return df
";{0: 0.3589827029147417}
2375;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5895714284070788}
2376;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
2378;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5732113788421226}
2379;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5931320344676847}
2380;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2381;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Fill any remaining NA/NaN values with 0
  df.fillna(0, inplace=True)

  return df
";{0: 0.5949540018214263}
2382;"
# Import libraries
import pandas as pd
import itertools

# Function to preprocess dataset
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    # Perform one-hot encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize data
    df = (df - df.mean()) / df.std()
    
    # Create interaction terms (pairwise products)
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared terms
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    # Create cubed terms
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.597555820137636}
2383;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6022546153183589}
2384;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
       .dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5823588957624067}
2385;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2386;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2387;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2388;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5876392307029742}
2389;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Generate new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2391;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
2392;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
2393;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
2394;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5949540018214263}
2395;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2396;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5958909789547225}
2397;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5922546153183588}
2398;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5850751281388716}
2399;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
2400;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
2401;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.597095379649569}
2402;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
2403;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2404;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
2406;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2407;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      if col in ['Total day minutes', 'Total eve minutes']:
          df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5740948773638259}
2408;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2409;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5879778857586104}
2411;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5952843041650503}
2412;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'Number vmail messages']

  for col in selected_columns:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
2413;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2414;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5988368937993716}
2415;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2416;"
  # Select the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2417;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5974079895514877}
2418;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
2419;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls']})
";{0: 0.3763864052188852}
2420;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5931320344676847}
2422;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5872048007029186}
2423;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
           
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5883039980344082}
2424;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes', 'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5908543845167031}
2425;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5980407788403714}
2426;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing selected columns
  df = (df - df.mean()) / df.std()

  # Feature engineering: Creating new features by combining existing features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generating squared and cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
2427;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
2428;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5947546153183588}
2429;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .apply(lambda x: (x - x.mean()) / x.std())\
             .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                   'Customer service calls', 'Account length',
                                                                   'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls']})
";{0: 0.3831103728917534}
2430;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2431;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5740948773638259}
2432;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5891377322014757}
2433;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5811792613940224}
2436;"
  # Keep only the selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2437;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
               .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
               .pipe(lambda df: (df - df.mean()) / df.std())\
               .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
               .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                      'Customer service calls', 'Account length',
                                                                      'Total night minutes', 'Number vmail messages']})\
               .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                                   'Total eve minutes','Customer service calls']})
";{0: 0.3738318423500854}
2438;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2439;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
2440;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
2441;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_scaled'] = (df[col] - df[col].mean()) / df[col].std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.38284944300666374}
2442;"
  # Selecting specific columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and standardizing numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Generating new features based on interactions, squared terms, and cubed terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5820153974168465}
2443;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
2444;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2446;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5970714284070786}
2447;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5935449378990041}
2448;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5937795029412402}
2449;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
2450;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5990838836110417}
2451;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
2452;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'Number vmail messages']
  
  for col in selected_columns:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
2453;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5935725719829705}
2454;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
2455;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2456;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col}_x_{col2}': lambda x: x[col] * x[col2] for col, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                          'Customer service calls', 'Account length',
                                                                          'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                       'Customer service calls']})
";{0: 0.44678553338727395}
2457;"
  return df.dropna()\
           [['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .apply(lambda x: (x - x.mean()) / x.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                             'Customer service calls']})
";{0: 0.38210497627757434}
2458;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.592500014091365}
2459;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5897546153183588}
2460;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5910424941062377}
2461;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5906756679499378}
2462;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5881497693740032}
2463;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
2464;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5939937457531415}
2465;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5705646458783354}
2466;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2467;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(**{f'{col}_x_{col2}': df[col] * df[col2] for col, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.38416427231963657}
2468;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5890248016537626}
2469;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59176681044031}
2471;"
  # Select only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59920072310279}
2472;"
  # Select the most important columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.594205834830554}
2473;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.6025849176619829}
2474;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5894520675476582}
2476;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2477;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.599861977281549}
2478;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59176681044031}
2479;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2480;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2481;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2482;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  for col1, col2 in interactions:
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5970714284070786}
2483;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                        'Customer service calls', 'Account length',
                                                                        'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls']})
";{0: 0.38557950869422253}
2485;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    interactions = [(col1, col2) for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)]
    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.59176681044031}
2486;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2487;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5962639749909295}
2488;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls']})
";{0: 0.3743800001565709}
2489;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    interactions = itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)
    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                    'Account length', 'Total night minutes', 'Number vmail messages']
    for col in squared_cols:
        df[f'{col}_squared'] = df[col] ** 2

    cubic_cols = ['Total day minutes', 'Total eve minutes','Customer service calls']
    for col in cubic_cols:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5919998382482952}
2491;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5929973543330045}
2492;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595331538395282}
2493;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939006966997616}
2494;"
  # Select only the required columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding on categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5889237756628043}
2496;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2497;"
  # Return the same columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by adding selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.550884389145091}
2498;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5937795029412402}
2499;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.5887103115208905}
2500;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = df.dropna()

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5960641391278826}
2501;"
  df = (df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
        .dropna()
        .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))
        .pipe(lambda df: (df - df.mean()) / df.std())
        .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])
        .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                            'Customer service calls', 'Account length',
                                                            'Total night minutes', 'Number vmail messages']})
        .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']}))
  return df
";{0: 0.38019163935727146}
2502;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  # Filter the dataset with selected columns
  df = df[selected_columns]
  
  # Perform one-hot encoding for categorical columns and standardize numerical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate polynomial features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2503;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(International_plan=df['International plan'].apply(lambda x: 1 if x == 'Yes' else 0))\
           .assign(Voice_mail_plan=df['Voice mail plan'].apply(lambda x: 1 if x == 'Yes' else 0))\
           .drop(['International plan', 'Voice mail plan'], axis=1)\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                              'Customer service calls', 'Account length',
                                                              'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                             'Customer service calls']})
";{0: 0.3795865593312174}
2504;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5959388258446746}
2505;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.592500014091365}
2506;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5997546153183588}
2507;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6013685393689918}
2508;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
2509;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2510;"
  # Keep selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize data
  df = (df - df.mean()) / df.std()
  
  # Create interaction features (product of column pairs)
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
2512;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5914599133316039}
2514;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2516;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5747652800614625}
2517;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by adding selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5448950843322568}
2518;"
  # Select specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction features (multiply each pair of selected columns)
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5922546153183588}
2519;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2521;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes', 'Customer service calls']})
";{0: 0.3817210885861444}
2522;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize data
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
2523;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
2524;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
2525;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5897546153183588}
2526;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5943325373962809}
2527;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5911072120780947}
2528;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
2529;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Account length', 'Total night minutes', 'International plan', 
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5790105630803305}
2530;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']
  
    df = df[selected_columns]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5932422696393465}
2531;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  return df
";{0: 0.5821395174623073}
2532;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5928575919290913}
2533;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5804277852802275}
2534;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize data
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6006496770467539}
2535;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6002004198656404}
2536;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5832372377410545}
2537;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2538;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2539;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in df.columns:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5652926386890932}
2541;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5778845799343004}
2542;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      if col in ['Total day minutes', 'Total eve minutes']:
          df[f'{col}_cubed'] = df[col] ** 3
          
  return df
";{0: 0.5758781748719861}
2543;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5860246941870475}
2544;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5751253348000651}
2545;"
  # Selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables and dropping the first
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by adding selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]

  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5470085045506434}
2546;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5876392307029742}
2547;"
#function definition that selects and preprocesses dataset columns
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    #one-hot encoding of categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    #standardization of numerical data
    df = (df - df.mean()) / df.std()

    #feature engineering - multiplication of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    #feature engineering - squaring columns
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2

    #feature engineering - cubing column
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    return df
";{0: 0.5946756942521245}
2548;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5887103115208905}
2549;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925878870917038}
2550;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5856181238043829}
2551;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5854125100552009}
2552;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.550884389145091}
2555;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5895714284070788}
2556;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5873168271800848}
2557;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2558;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2559;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2560;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5801391811612943}
2561;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in df.columns:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5369590883298377}
2562;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
2563;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2564;"
  # Select the important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalize the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5974079895514877}
2566;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5883836475764234}
2567;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5916307820322311}
2569;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5963052482297513}
2571;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
2572;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Perform one-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction features (product of column pairs)
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features for numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5943325373962809}
2573;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  # Feature engineering
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
2574;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5961255830602943}
2576;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2577;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5811792613940224}
2578;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Account length', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5991605205569007}
2579;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.593773602660131}
2580;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5879778857586104}
2581;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5477299532195706}
2582;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.595146181583419}
2583;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction features (multiply each pair of selected columns)
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.59176681044031}
2584;"
  # Keep the same columns as before
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2585;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
2586;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5995273425910861}
2587;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
                'Account length']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5895065990256951}
2588;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Account length', 'Number vmail messages'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5981615195578998}
2589;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
2590;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    return df
";{0: 0.5782280097471186}
2591;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
2592;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in df.columns:
      if pd.api.types.is_numeric_dtype(df[col]):
          df[col].fillna(df[col].mean(), inplace=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
    
  return df
";{0: 0.595331538395282}
2593;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5491992450209224}
2594;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
2595;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5861786659512702}
2597;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Account length', 'Number vmail messages'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.601573793558409}
2598;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2599;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.596808520146455}
2600;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2602;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5902033332670767}
2603;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
2604;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
2605;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5975849176619829}
2606;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2607;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6063658906160492}
2608;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5917351347988783}
2609;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2610;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5934667365304801}
2611;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .pipe(lambda df: df.assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)}))\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes','Customer service calls']})
";{0: 0.38057097278486796}
2612;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.5958909789547225}
2613;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597555820137636}
2614;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables and drop original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
2615;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945714284070787}
2617;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2618;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total night minutes', 'Account length']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5504093732354602}
2619;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.599861977281549}
2620;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6007394638032073}
2621;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2622;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5460359042966061}
2623;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.599861977281549}
2624;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.597095379649569}
2625;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5649023780698992}
2626;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.26639876043384814}
2627;"
  # Keep specified columns in the DataFrame
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for specified columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubic features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2628;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6085913381245156}
2629;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6022546153183589}
2630;"
  # Keeping the same preprocessing steps as in v0

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6014471619022098}
2631;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5886967463852765}
2632;"
  # Drop columns that are not required
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding for categorical variables and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Normalizing the selected columns
  df = (df - df.mean()) / df.std()

  # Create new features by adding selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_plus_{col2}'] = df[col1] + df[col2]

  # Generating squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Generating cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5474934242817334}
2633;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  return df
";{0: 0.5836637334437119}
2634;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2636;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872546153183589}
2637;"
# Continue the implementation for select_columns_and_return_dataframe_v3 function
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.589962994672139}
2638;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    # One-hot encode categorical columns and drop NA values
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True).dropna()
  
    # Standardize numerical features
    df = (df - df.mean()) / df.std()
    
    # Create interaction features
    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']
  
    # Add squared features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    # Add cubic features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5151386272268396}
2639;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                        'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.6002004198656404}
2640;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5889237756628043}
2641;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872546153183589}
2643;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
2644;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5957114054418156}
2645;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
2646;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5891377322014757}
2647;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
              'Account length']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5841307820322311}
2649;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                      'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']

  df = df[selected_columns]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2650;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2651;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2652;"
  # Keep selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first columns in the process
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2653;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5932422696393465}
2654;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = df.dropna()
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5902033332670767}
2655;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5927674358311793}
2656;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6106426201757976}
2657;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
2658;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
2660;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.6023750972460696}
2661;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5897823698912822}
2662;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5958909789547225}
2663;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6003987177367732}
2664;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.2634547908232119}
2666;"
  # Selecting the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Performing one-hot encoding and dropping the first columns to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing the numeric columns
  df = (df - df.mean()) / df.std()
  
  # Adding interactions between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared values of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Adding cubed values of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2667;"
  df = df[['Total day minutes','Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes','International plan','Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan','Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes','Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2668;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  return df
";{0: 0.5939937457531415}
2669;"
  # Copy the dataframe and select the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first columns in the process
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
2670;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5907731338368774}
2671;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2672;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
             .dropna()\
             .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
             .pipe(lambda df: (df - df.mean()) / df.std())\
             .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
             .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
             .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
             .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
";{0: 0.3737138092412854}
2673;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()
    
    col_combinations = itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)
    for col1, col2 in col_combinations:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.5957114054418156}
2674;"
  # Keeping only relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5949540018214263}
2675;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                                             'Account length', 'Number vmail messages'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5981615195578998}
2676;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6059800434886811}
2677;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2679;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                                             'Account length', 'Number vmail messages'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5980348169921728}
2680;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2681;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6031426201757977}
2682;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6081426201757976}
2683;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2684;"
  # Keep only the columns of interest
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # Apply one-hot encoding to categorical variables and drop the original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardize numerical columns
  df = (df - df.mean()) / df.std()

  # Create interaction features for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5947546153183588}
2685;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2686;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
          
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607840072405097}
2688;"
  df = df[['Total day minutes','Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes','International plan','Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan','Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes','Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5897546153183588}
2689;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = df.dropna()
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872872950569209}
2690;"
  # Drop NA values
  df = df.dropna()

  # Select the 8 most important columns for modeling
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode the categorical variables 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction terms for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6031426201757977}
2691;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
2692;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  
  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5836012049840026}
2693;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5955250555699312}
2694;"
  df = df.dropna()

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6077157909075049}
2695;"
  # Select only the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data by subtracting the mean and dividing by the standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6088816138864894}
2696;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604928334461512}
2698;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5932949768335805}
2699;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
2700;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2701;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
2702;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
2703;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5894520675476582}
2704;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6106426201757976}
2706;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5972546153183589}
2707;"
  df = df.dropna()
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2708;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2709;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['day_x_eve'] = df['Total day minutes'] * df['Total eve minutes']
  df['eve_x_service'] = df['Total eve minutes'] * df['Customer service calls']
  df['service_x_day'] = df['Customer service calls'] * df['Total day minutes']

  df['day_squared'] = df['Total day minutes'] ** 2
  df['eve_squared'] = df['Total eve minutes'] ** 2
  df['service_squared'] = df['Customer service calls'] ** 2
  df['length_squared'] = df['Account length'] ** 2
  df['night_squared'] = df['Total night minutes'] ** 2
  df['vmail_squared'] = df['Number vmail messages'] ** 2

  df['day_cubed'] = df['Total day minutes'] ** 3
  df['eve_cubed'] = df['Total eve minutes'] ** 3
  df['service_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6063052707782073}
2710;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
            'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2711;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2713;"
  # Keep the same columns as v0
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Normalize the selected columns
  df = (df - df.mean()) / df.std()
  
  # Create new features by multiplying selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.596478217802831}
2714;"
  return (df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
            .dropna()
            .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])
            .assign(International_plan=df['International plan'].apply(lambda x: 1 if x == 'Yes' else 0))
            .assign(Voice_mail_plan=df['Voice mail plan'].apply(lambda x: 1 if x == 'Yes' else 0))
            .drop(['International plan', 'Voice mail plan'], axis=1)
            .pipe(lambda df: (df - df.mean()) / df.std())
            .assign(**{f'{col}_squared': df[col]**2 for col in ['Total day minutes', 'Total eve minutes',
                                                                'Customer service calls', 'Account length',
                                                                'Total night minutes', 'Number vmail messages']})
            .assign(**{f'{col}_cubed': df[col]**3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']}))
";{0: 0.3813318423500853}
2716;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  df = (df - df.mean()) / df.std()

  df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872190640034463}
2717;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6077157909075049}
2718;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
2719;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5906572068186093}
2720;"
  # Select the most important columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardize numerical columns
  df = (df - df.mean()) / df.std()
  
  # Create interaction terms for selected pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for specified columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubic features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6015229080012856}
2721;"
  # Selecting only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2722;"
  # Drop rows with missing values
  df = df.dropna()
  
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features by multiplying pairs of numeric columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for numeric columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Create cubic features for selected numeric columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data by scaling to zero mean and unit variance
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6091611386943161}
2723;"
  # Extracting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubic features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
2724;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5940134890905544}
2725;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
2726;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5850009061713897}
2727;"
  # Selecting important features
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Standardizing data
  df = (df - df.mean()) / df.std()

  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5989626898525204}
2728;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6106426201757976}
2729;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2730;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
2732;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5919998382482952}
2733;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5935725719829705}
2734;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 'Account length', 'Number vmail messages'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.6010835974799777}
2735;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.598645523722589}
2736;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6017537312869087}
2737;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
2738;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5904936090290507}
2739;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
2740;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5925160532268555}
2741;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.591509273703452}
2742;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.599944945757193}
2743;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardizing the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.604252087631419}
2744;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
2745;"
  # Select the necessary columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data by subtracting the mean and dividing by the standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2747;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2748;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                                             'Account length', 'Number vmail messages'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5989594144734417}
2749;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.606692002891847}
2750;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5930093322994909}
2751;"
  # Selection of columns to keep in the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6081426201757976}
2752;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6014471619022098}
2753;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first columns in the process
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6135184371692616}
2754;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  pairs = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in pairs:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5961255830602943}
2755;"
  df = df.dropna()

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6063052707782073}
2756;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total day minutes_cubed'] = df['Total day minutes'] ** 3
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  return df
";{0: 0.5608957501529469}
2757;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
          
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Account length_squared'] = df['Account length'] ** 2
  df['Total night minutes_squared'] = df['Total night minutes'] ** 2
  df['Number vmail messages_squared'] = df['Number vmail messages'] ** 2
  
  df['Total day minutes_cubed'] = df['Total day minutes'] ** 3
  df['Total eve minutes_cubed'] = df['Total eve minutes'] ** 3
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
2758;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5939937457531415}
2759;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2760;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5966448592207978}
2761;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5872872950569209}
2762;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604928334461512}
2764;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
2765;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5883836475764234}
2766;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
2768;"
  # Dropping NA values
  df = df.dropna()

  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Creating interaction terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Creating squared terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Creating cubed terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardizing numerical columns
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.607840072405097}
2769;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  interactions_cols = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  power_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in interactions_cols:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in power_cols:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
2770;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6021577716909492}
2771;"
  # Selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Standardization
  df = (df - df.mean()) / df.std()
  
  # Interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5999654586918528}
2772;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data by subtracting the mean and dividing by the standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6088816138864894}
2773;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Creating interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Creating cubic features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardizing the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6018852237260934}
2774;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()

    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']

    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.592830316434989}
2775;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2776;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  return df
";{0: 0.5907731338368774}
2777;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6088816138864894}
2778;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5935449378990041}
2779;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3882459049726978}
2780;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df = (df - df.mean()) / df.std()
    
    # Create a new feature which is the product of Total day minutes, Total eve minutes, and Customer service calls
    df['Total_prod'] = df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls']
    
    squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'Number vmail messages']
    cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
    
    # Create pairwise multiplication features
    for col1, col2 in itertools.combinations(squares, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Create squared features
    for col in squares:
        df[f'{col}_squared'] = df[col] ** 2

    # Create cubed features
    for col in cubes:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.595661840738906}
2781;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5909642927377137}
2782;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5945476089489321}
2783;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                      'Customer service calls', 'Account length',
                                                                      'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                   'Customer service calls']})
";{0: 0.3848675492910566}
2784;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3893350290714859}
2785;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=lambda x: x['Total day minutes'] * x['Total eve minutes'] * x['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.45874433618307336}
2786;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6093522975951525}
2788;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
2789;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    df = (df - df.mean()) / df.std()
  
    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                                             'Account length', 'Number vmail messages'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.59935403773155}
2790;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2): 
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3886117586312344}
2791;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6038956322239903}
2792;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = df.dropna()
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']
  cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls']

  for col1, col2 in itertools.combinations(squares, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2

  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5832372377410545}
2795;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6017537312869087}
2796;"
  # Selecting the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # Applying one-hot-encoding and dropping the first column to handle categorical data
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features 
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for specified columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Creating cubed features for specified columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data by subtracting the mean and dividing by the standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2797;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total day minutes_cubed'] = df['Total day minutes'] ** 3
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  return df
";{0: 0.5579138224421035}
2798;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.5997546153183588}
2799;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5961255830602943}
2801;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
2802;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5912419570905108}
2803;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.5981805412442848}
2804;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.38313556815504396}
2805;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
2806;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.38686477067942715}
2807;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first columns in the process
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2808;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df = (df - df.mean()) / df.std()

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total day minutes_cubed'] = df['Total day minutes'] ** 3
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  return df
";{0: 0.5592017012299823}
2809;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = (df - df.mean()) / df.std()
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
              'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  return df
";{0: 0.6015229080012856}
2810;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6063658906160492}
2811;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2812;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / (df.std() + 1e-10)
  
  return df
";{0: 0.6029233219301836}
2813;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2814;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
               'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .assign(**{f'{col1}_x_{col2}': lambda x: x[col1] * x[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': lambda x: x[col] ** 2 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': lambda x: x[col] ** 3 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']})
";{0: 0.3612613421436951}
2815;"
    # Select relevant columns and drop rows with missing values
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
    
    # One-hot encode categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Standardize numerical columns
    df = (df - df.mean()) / df.std()
    
    # Interaction terms between selected columns
    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Polynomial features (squared and cubed terms)
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.5949540018214263}
2816;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035260557586197}
2817;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2818;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6081426201757976}
2820;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                                             'Account length', 'Number vmail messages'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.5976025848217498}
2821;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']].dropna()
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df = (df - df.mean()) / df.std()
    
    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Total night minutes', 
                                             'Account length', 'Number vmail messages'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.603356324752705}
2823;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = pd.concat([df, df[['Total day minutes', 'Total eve minutes', 'Customer service calls']].apply(lambda x: x * x)], axis=1)
  
  df = pd.concat([df, df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                          'Account length', 'Total night minutes', 'Number vmail messages']].apply(lambda x: x ** 2)], axis=1)
  
  df = pd.concat([df, df[['Total day minutes', 'Total eve minutes', 'Customer service calls']].apply(lambda x: x ** 3)], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5734713726250972}
2824;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
            .dropna()\
            .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
            .pipe(lambda df: (df - df.mean()) / df.std())\
            .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
            .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
            .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                               'Customer service calls']})
   
    return df
";{0: 0.38630031231357687}
2825;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]\
           .dropna()\
           .pipe(lambda df: pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True))\
           .pipe(lambda df: (df - df.mean()) / df.std())\
           .assign(Total_prod=df['Total day minutes'] * df['Total eve minutes'] * df['Customer service calls'])\
           .assign(**{f'{col1}_x_{col2}': df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)})\
           .assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Account length',
                                                                  'Total night minutes', 'Number vmail messages']})\
           .assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 
                                                               'Total eve minutes', 'Customer service calls']})
";{0: 0.37917331788550745}
2826;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2827;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6096299619479495}
2828;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6081426201757976}
2829;"
  # Drop rows with missing values
  df = df.dropna()
  
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features by multiplying pairs of numeric columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for numeric columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Create cubic features for selected numeric columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6008222608943605}
2830;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
2831;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / (df.std() + 1e-10)
  
  return df
";{0: 0.6063658906160492}
2832;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6035260557586197}
2833;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5990763551155567}
2834;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604928334461512}
2835;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
2836;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604566670808709}
2837;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2838;"
  # Dropping target columns and selecting relevant columns for the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Squaring selected columns and adding them to the dataframe
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  # Taking the power of 2 of selected columns and adding them to the dataframe
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  # Taking the power of 3 of selected columns and adding them to the dataframe
  df = pd.concat([df, df[squared_cols].apply(lambda x: x ** 3)], axis=1)
  
  # Normalizing the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5750454466991712}
2839;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2): 
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.38445513212521026}
2840;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6008222608943605}
2841;"
  # Selecting the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first category
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interactions between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2842;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
2843;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
2845;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Normalize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6070062565394341}
2846;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Squaring selected columns and adding them to the dataframe
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  # Taking the power of 2 of selected columns and adding them to the dataframe
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  # Taking the power of 3 of selected columns and adding them to the dataframe
  df = pd.concat([df, df[squared_cols].apply(lambda x: x ** 3)], axis=1)
  
  # Normalizing the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5719356906016103}
2847;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  df = pd.concat([df, df[squared_cols].apply(lambda x: x ** 3)], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5692845771339539}
2848;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2849;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
2850;"
  # Select only the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features by multiplying pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6010720680285584}
2851;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
2852;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.60529230170446}
2853;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607840072405097}
2854;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2855;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607840072405097}
2856;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6085913381245156}
2857;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
          
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Perform feature engineering
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6025473820805595}
2858;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6084340312187424}
2859;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first columns in the process
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2860;"
  # Selected columns based on importance
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  # Perform one-hot encoding with dropping the first columns
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6106426201757976}
2861;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103878431057339}
2862;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  df = pd.concat([df, df[squared_cols].apply(lambda x: x ** 3)], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5734713726250972}
2863;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6081426201757976}
2864;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2866;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6063658906160492}
2867;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2868;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6077157909075049}
2869;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2): 
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.3871920055448146}
2870;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
2871;"
  df = df.dropna()
  
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode the categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction terms for pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6035260557586197}
2872;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6028377421270171}
2873;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6008222608943605}
2874;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  # Perform one-hot encoding with dropping the first columns
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2875;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  
  for col in squared_cols:
      df[col+'_squared'] = df[col] ** 2
  
  for col in powered2_cols:
      df[col+'_powered2'] = df[col] ** 2
  
  for col in squared_cols:
      df[col+'_cubed'] = df[col] ** 3
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5810886581952857}
2876;"
  # Keep the same columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding on 'International plan' and 'Voice mail plan'
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction terms by multiplying pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data by subtracting the mean and dividing by the standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2877;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103878431057339}
2878;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
2879;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604566670808709}
2880;"
  # Keep a subset of columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.605276766517261}
2881;"
  # Select 8 important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding with dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6056126800560372}
2882;"
  # Selecting the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding with dropping first columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating new interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
2883;"
  # Select important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6098972785608907}
2884;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6032174704751988}
2885;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']
  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3903819449666381}
2886;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
2887;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared and cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.60214417857104}
2888;"
  # Keep the same columns selected in the v0 function
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubic features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the features
  df = (df - df.mean()) / (df.std() + 1e-10)
  
  return df
";{0: 0.6088816138864894}
2889;"
  # Select the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6087149093324241}
2890;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6081426201757976}
2891;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
2893;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
2894;"
  # Selecting 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'International plan', 'Voice mail plan', 
           'Number vmail messages', 'Total night minutes']]
  
  # One-hot encode 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features by multiplying pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared and cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
          df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6031426201757977}
2895;"
  df = df.dropna()

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6038956322239903}
2896;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  df = pd.concat([df, df[squared_cols].apply(lambda x: x ** 3)], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5734713726250972}
2897;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
2898;"
  df = df.dropna()
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6008222608943605}
2900;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6017537312869087}
2901;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
2902;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
2903;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
2904;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.603850167345609}
2905;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
2906;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6072074697102805}
2907;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2908;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6054337052984445}
2909;"
  # Select 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Normalize data using mean and standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6001664296996072}
2910;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  power_transform_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[power_transform_cols].apply(lambda x: x ** 2)], axis=1)
  
  df = pd.concat([df, df[power_transform_cols + ['Account length', 'Total night minutes', 'Number vmail messages']].apply(lambda x: x ** 2)], axis=1)
  
  df = pd.concat([df, df[power_transform_cols].apply(lambda x: x ** 3)], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5683001636803033}
2911;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5992687292820885}
2912;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6017537312869087}
2913;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6005841406436339}
2914;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6059800434886811}
2915;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2): 
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3875511525706283}
2916;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6031426201757977}
2917;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5978836043197278}
2918;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding the categorical columns and dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features for pairs of continuous columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the numerical features by subtracting the mean and dividing by the standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
2919;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  df = pd.concat([df, df[squared_cols].apply(lambda x: x ** 3)], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5692845771339539}
2920;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  
  for col in squared_cols:
      df[col+'_squared'] = df[col] ** 2
  
  for col in powered2_cols:
      df[col+'_powered2'] = df[col] ** 2
  
  for col in squared_cols:
      df[col+'_cubed'] = df[col] ** 3
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5846507325797801}
2921;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
2922;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Day_Eve_Mins_Multiply'] = df['Total day minutes'] * df['Total eve minutes']
  df['Day_Mins_Squared'] = df['Total day minutes'] ** 2
  df['Eve_Mins_Squared'] = df['Total eve minutes'] ** 2
  df['Service_Calls_Cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5761795017344686}
2924;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6017378650845576}
2925;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6070983163783292}
2926;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  power_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']
  for col in power_cols:
    for i in range(2, 4):
      df[f'{col}^{i}'] = df[col] ** i

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.602458668703912}
2927;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Day_Eve_Mins_Multiply'] = df['Total day minutes'] * df['Total eve minutes']
  df['Day_Mins_Squared'] = df['Total day minutes'] ** 2
  df['Eve_Mins_Squared'] = df['Total eve minutes'] ** 2
  df['Service_Calls_Cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.57115670995671}
2928;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding the categorical columns and dropping the first category to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features for pairs of continuous columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the numerical features by subtracting the mean and dividing by the standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604928334461512}
2929;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
2930;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5992687292820885}
2931;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2932;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6008222608943605}
2934;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
     
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2935;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2936;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5997335292667068}
2937;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[col+'_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[col+'_powered2'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[col+'_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.583739771662942}
2938;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6028377421270171}
2939;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2): 
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3903819449666381}
2940;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
2941;"
  # Select the desired columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create new features by applying mathematical operations
  df['Day_Eve_Mins_Multiply'] = df['Total day minutes'] * df['Total eve minutes']
  df['Day_Mins_Squared'] = df['Total day minutes'] ** 2
  df['Eve_Mins_Squared'] = df['Total eve minutes'] ** 2
  df['Service_Calls_Cubed'] = df['Customer service calls'] ** 3

  # Normalize the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5704640692640692}
2942;"
  # Feature selection based on importance
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Interaction features between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Squared features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Cubed features of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6070062565394341}
2943;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
2944;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6071378803911693}
2945;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2947;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2): 
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3875511525706283}
2948;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
      
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6008222608943605}
2949;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2): 
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3886117586312344}
2950;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3875511525706283}
2951;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
2952;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.606692002891847}
2955;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features by multiplying pairs of columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for some selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6074128065112013}
2956;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.60214417857104}
2957;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
2958;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6129356138063708}
2959;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6057376581635449}
2960;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6096299619479495}
2961;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6017378650845576}
2962;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
2964;"
  df = df[['Total day minutes', 'Total eve minutes', 'Account length', 'Total night minutes', 
           'Customer service calls', 'Number vmail messages', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.603850167345609}
2965;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6010259056813917}
2966;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6077157909075049}
2967;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604252087631419}
2969;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
2971;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6074128065112013}
2972;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']
  
  # Perform one-hot encoding with dropping the first columns
  df = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6035260557586197}
2973;"
  return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes']].apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.4263502376659039}
2974;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6003226287099717}
2975;"
  # Keep selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction terms
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed terms
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
2976;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
          'Account length', 'Total night minutes', 'International plan', 
          'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares_and_cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                       'Account length', 'Total night minutes', 'Number vmail messages']
  
  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squares_and_cubes:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056884823685083}
2977;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
2978;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
          'Account length', 'Total night minutes', 'International plan', 
          'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  squares_and_cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                       'Account length', 'Total night minutes', 'Number vmail messages']
  
  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squares_and_cubes:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5999741966542226}
2979;"
# Improved version of `select_columns_and_return_dataframe_v1`
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
    squares_and_cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                         'Account length', 'Total night minutes', 'Number vmail messages']
    
    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in squares_and_cubes:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.602458668703912}
2980;"
  df = df.dropna()
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5995183598207681}
2981;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
2982;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5990763551155567}
2983;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
2985;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6078004804795318}
2986;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  squared3_cols = df[squared_cols].apply(lambda x: x ** 3)
  df = pd.concat([df, squared3_cols], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5768137393820981}
2987;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  
  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5989414944167011}
2988;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Day_Eve_Mins_Multiply'] = df['Total day minutes'] * df['Total eve minutes']
  df['Day_Mins_Squared'] = df['Total day minutes'] ** 2
  df['Eve_Mins_Squared'] = df['Total eve minutes'] ** 2
  df['Service_Calls_Cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5753604010025063}
2989;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
2990;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6005245655113092}
2991;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
2992;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5978836043197278}
2993;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.605276766517261}
2994;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
2995;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5981884823685083}
2996;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
    
    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5996278763079023}
2997;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  interactions_cols = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  power_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in interactions_cols:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in power_cols:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607840072405097}
2998;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6006884823685084}
2999;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / (df.std() + 1e-10)
  
  return df
";{0: 0.6103878431057339}
3000;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  # Perform one-hot encoding with dropping the first columns
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
3001;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6031884823685083}
3003;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  # Perform one-hot encoding with dropping the first columns
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6081426201757976}
3004;"
  df = df.dropna()
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6074128065112013}
3005;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6021577716909492}
3006;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  
  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares_and_cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                       'Account length', 'Total night minutes', 'Number vmail messages']
  
  for col in squares_and_cubes:
      df[f'{col}_squared'] = df[col] ** 2
  
  cubic_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  
  for col in cubic_cols:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
3007;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  
  for col1, col2 in interactions:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5999741966542226}
3008;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  squared_df = df[squared_cols] ** 2
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  powered2_df = df[powered2_cols] ** 2
  powered3_df = df[squared_cols] ** 3
  
  df = pd.concat([df, squared_df, powered2_df, powered3_df], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5937972884697739}
3009;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6063052707782073}
3010;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035676762467276}
3011;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3012;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first columns in the process
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
3013;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6021653975438354}
3014;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
3015;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6070983163783292}
3016;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3889491819441178}
3017;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding with dropping the first column and include interaction features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Include squared and cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5941222173082673}
3019;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6036372003172262}
3020;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6031884823685083}
3021;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
3022;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5992687292820885}
3023;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6106426201757976}
3024;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6081426201757976}
3025;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6028377421270171}
3027;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
3028;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6003987177367732}
3029;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6046193852738967}
3030;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014117528087598}
3031;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6069788049491535}
3032;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.38336785619221}
3033;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035260557586197}
3034;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6014117528087598}
3035;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5975172560786604}
3037;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5996278763079023}
3038;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
3039;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding with dropping the first column and include interaction features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Include squared and cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.60214417857104}
3041;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Normalize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
3042;"
  df = df.dropna()

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035260557586197}
3043;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
3045;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5995183598207681}
3046;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.605276766517261}
3047;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
3048;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    if col != 'Number vmail messages':
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.604944612563423}
3049;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
3050;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6006884823685084}
3051;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6116952517547449}
3052;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5999741966542226}
3053;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
3054;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
3055;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5624857163322112}
3056;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3057;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  squared3_cols = df[squared_cols].apply(lambda x: x ** 3)
  df = pd.concat([df, squared3_cols], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5710022368226281}
3058;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5982633326679094}
3059;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.604566670808709}
3060;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5635416746887831}
3061;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
3062;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
3063;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6123588850379363}
3064;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5989414944167011}
3065;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
3066;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6035260557586197}
3067;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
3069;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056884823685083}
3070;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        if col != 'Number vmail messages':
            df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6014770839122328}
3071;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6021378803911692}
3072;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6098972785608907}
3073;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
          
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.604566670808709}
3074;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6032174704751988}
3075;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3871920055448146}
3076;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6010720680285584}
3077;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5995183598207681}
3078;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6070062565394341}
3079;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6081426201757976}
3080;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df = pd.concat([df, df[['Total day minutes', 'Total eve minutes', 'Customer service calls']].apply(lambda x: x * x)], axis=1)
  
  df = pd.concat([df, df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                          'Account length', 'Total night minutes', 'Number vmail messages']].apply(lambda x: x ** 2)], axis=1)
  
  df = pd.concat([df, df[['Total day minutes', 'Total eve minutes', 'Customer service calls']].apply(lambda x: x ** 3)], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5660639652176898}
3081;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607840072405097}
3082;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5978836043197278}
3083;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  squared3_cols = df[squared_cols].apply(lambda x: x ** 3)
  df = pd.concat([df, squared3_cols], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5734713726250972}
3084;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6088816138864894}
3085;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6006884823685084}
3086;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6039161083024768}
3087;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()

  return df
";{0: 0.3903819449666381}
3088;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056126800560372}
3089;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6088816138864894}
3091;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6079916393803682}
3092;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6050052324012649}
3094;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
3095;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6039274760792}
3096;"
 df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
          'Account length', 'Total night minutes', 'International plan', 
          'Voice mail plan', 'Number vmail messages']]
 
 df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
 
 for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
     df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
 
 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'Number vmail messages']:
     df[f'{col}_squared'] = df[col] ** 2

 for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
     df[f'{col}_cubed'] = df[col] ** 3

 df = (df - df.mean()) / df.std()

 return df
";{0: 0.6025473820805595}
3097;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6021577716909492}
3098;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6011867238657752}
3099;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5673936917923339}
3100;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']

  df['Account length_squared'] = df['Account length'] ** 2
  df['Total night minutes_squared'] = df['Total night minutes'] ** 2
  df['Number vmail messages_squared'] = df['Number vmail messages'] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.606692002891847}
3101;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5999741966542226}
3102;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
3103;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6053313446770627}
3104;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6028377421270171}
3105;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6067716524338621}
3106;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3882459049726978}
3107;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5667997329786885}
3108;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.39309227811175385}
3109;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035260557586197}
3110;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5646022807493891}
3111;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
3112;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6017378650845576}
3113;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607840072405097}
3114;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6010259056813917}
3115;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
3116;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.38139618976895895}
3117;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Normalize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.595763481049151}
3118;"
  # Select 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding for categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features and cubed for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035676762467276}
3120;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042070008870268}
3121;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5953939045837803}
3122;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
3123;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604928334461512}
3124;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.60214417857104}
3125;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5992687292820885}
3126;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.602458668703912}
3127;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6070062565394341}
3128;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
3130;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  squared3_cols = df[squared_cols].apply(lambda x: x ** 3)
  df = pd.concat([df, squared3_cols], axis=1)
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5760302951840198}
3132;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
3133;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5999741966542226}
3134;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035260557586197}
3135;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3136;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5965318558624843}
3137;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6035260557586197}
3138;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6021577716909492}
3139;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6184477249162852}
3140;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Squaring selected columns and adding them to the dataframe
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  df = pd.concat([df, df[squared_cols].apply(lambda x: x * x)], axis=1)
  
  # Taking the power of 2 of selected columns and adding them to the dataframe
  powered2_cols = squared_cols + ['Account length', 'Total night minutes', 'Number vmail messages']
  df = pd.concat([df, df[powered2_cols].apply(lambda x: x ** 2)], axis=1)
  
  # Taking the power of 3 of selected columns and adding them to the dataframe
  df = pd.concat([df, df[squared_cols].apply(lambda x: x ** 3)], axis=1)
  
  # Normalizing the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5675454466991713}
3141;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5997114098137739}
3142;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
3143;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6172819019373008}
3144;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding with dropping the first column and include interaction features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Include squared and cubed features for specific columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6130921667884155}
3145;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3
   
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6006988764384253}
3146;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604566670808709}
3147;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6018568122604144}
3148;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5984270513135221}
3149;"
  # Selecting the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generating new features by multiplying two selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating new features by squaring numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Generating new features by cubing selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Normalizing numerical columns
  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes', 'Number vmail messages']
  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3886117586312344}
3150;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.604928334461512}
3151;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
3152;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6207215517184139}
3153;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141481251449874}
3154;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6130921667884155}
3155;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
3157;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6039161083024768}
3158;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6012308554699153}
3159;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3160;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
3161;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6063658906160492}
3162;"
  df = df.dropna()

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6113973371569297}
3163;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6081426201757976}
3164;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6152087312055935}
3165;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103878431057339}
3166;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3167;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6104554904540623}
3168;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3169;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6045820141151915}
3170;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
       'Account length', 'Total night minutes', 'International plan',
       'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6012308554699153}
3171;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6099648287665691}
3172;"
  df = df.dropna()

  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.606692002891847}
3173;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
3174;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
3175;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6001664296996072}
3176;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021756972031901}
3177;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6053313446770627}
3178;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103878431057339}
3179;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6225017248361666}
3180;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']

  numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                    'Account length', 'Total night minutes', 'Number vmail messages']
  
  for col in numerical_cols:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df[numerical_cols] = (df[numerical_cols] - df[numerical_cols].mean()) / df[numerical_cols].std()
  
  return df
";{0: 0.3851269101463859}
3181;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6008222608943605}
3182;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features
  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features
  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035088481331047}
3183;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6018852237260934}
3184;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6130921667884155}
3185;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6008222608943605}
3186;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6191960729777454}
3187;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5999741966542226}
3188;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3189;"
  # Select the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding with dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data using z-score normalization
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
3190;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6152087312055935}
3191;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6202087312055935}
3192;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3193;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6106426201757976}
3194;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3195;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3196;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3197;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3198;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3199;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6044786447223794}
3200;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'Number vmail messages',
           'International plan', 'Voice mail plan']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  power_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']
  for col in power_cols:
    for i in range(2, 4):
      df[f'{col}^{i}'] = df[col] ** i

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6017378650845576}
3201;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604928334461512}
3202;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.587974534903567}
3203;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5992806553363619}
3204;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6106426201757976}
3205;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028377421270171}
3206;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6114513347558893}
3207;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3208;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.599038059521989}
3209;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6032174704751988}
3210;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6166644274081251}
3211;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
    
  df = (df - df.mean()) / df.std()
    
  return df
";{0: 0.6165723675692297}
3212;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6031426201757977}
3213;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6038956322239903}
3214;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6092996402965025}
3215;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6159320016458449}
3216;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5985719179513304}
3217;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3218;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3219;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6010259056813917}
3220;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6014859936697735}
3221;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6032174704751988}
3223;"
  # Selecting the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding for categorical variables and drop the first column to prevent multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generate interaction features by multiplying pairs of numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate squares of selected numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  # Generate cubes for selected numerical columns
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the numerical columns
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6138181986612147}
3224;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6174061834348927}
3225;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3226;"
  # Select only the specified columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding and drop the first columns in the process
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
3227;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6056426201757976}
3228;"
  # Select the 8 most important columns
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding with dropping the first column to avoid multicollinearity
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data using z-score normalization
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6049283344615118}
3229;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6003925973723013}
3230;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6018852237260934}
3231;"
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages']]
      
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Account length_squared'] = df['Account length'] ** 2
  df['Total night minutes_squared'] = df['Total night minutes'] ** 2
  df['Number vmail messages_squared'] = df['Number vmail messages'] ** 2

  df['Total day minutes_cubed'] = df['Total day minutes'] ** 3
  df['Total eve minutes_cubed'] = df['Total eve minutes'] ** 3
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  for col in df.columns:
      if col.startswith('Total') or col.startswith('Customer'):
          df[col] = (df[col] - df[col].mean()) / df[col].std()

  return df
";{0: 0.303965956524096}
3232;"
  # Selecting the relevant columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # Performing one-hot-encoding on categorical columns and dropping the first column to avoid dummy variable trap
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generating pairwise multiplication features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  # Generating cubic features for selected columns
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the dataset by subtracting mean and dividing by standard deviation
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6103883719241563}
3234;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3235;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6021653975438354}
3236;"
  # Selecting the desired columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  # Generating cubed features
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6177087312055934}
3237;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6032174704751988}
3238;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3241;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6035260557586197}
3242;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6028859345978076}
3243;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6014859936697735}
3244;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604566670808709}
3245;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5994616026795762}
3246;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6060894932943951}
3247;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
3248;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6166644274081251}
3249;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6088816138864894}
3250;"
  # Select columns relevant for modeling
  df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical features and drop first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Perform feature engineering: interaction features, squared, and cubed features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data using z-score normalization
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
3251;"
  # Function to preprocess dataset and retain the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features for pairs of numerical columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Creating squared and cubed features for numerical columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  # Standardizing the dataset for mean centering and scaling
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5968843011422998}
3252;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6010832041970382}
3253;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3254;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5999741966542226}
3255;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6191960729777454}
3256;"
# Improved version of `select_columns_and_return_dataframe_v2`
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6110521046995694}
3257;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6044562728881295}
3258;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6008222608943605}
3259;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6066302028260907}
3260;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
3261;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6037419871738439}
3263;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6177087312055934}
3264;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6219478616403761}
3265;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # Encode categorical variables using one-hot encoding and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.606692002891847}
3266;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3267;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6162581139216428}
3269;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6055763033982074}
3270;"
  # Select the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding for categorical columns and drop the first columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features for selected numeric columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed features for selected numeric columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6038956322239903}
3271;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_cols], columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6003226287099717}
3272;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3273;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6018568122604144}
3274;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6062817707703416}
3276;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6155461545184768}
3277;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5997804876223518}
3278;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6007971134761647}
3279;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = [col for col in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)]
  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                  'Account length', 'Total night minutes', 'Number vmail messages']
  cubed_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  
  for col1, col2 in interaction_cols:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squared_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in cubed_cols:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5982449593570842}
3280;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6032174704751988}
3281;"
# Improved version of `select_columns_and_return_dataframe_v2`.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6148428775470569}
3282;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604928334461512}
3283;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6007971134761647}
3284;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.608766242820031}
3285;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
             
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
             
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
    
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.611723882720745}
3286;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6041911784358468}
3287;"
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']
  
  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6103568346395353}
3289;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607993162343318}
3290;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
3291;"
  # Select most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.605276766517261}
3292;"
    df = df[['Account length', 'Total day minutes', 'Total eve minutes',
           'Total night minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
  
    df = (df - df.mean()) / df.std()
  
    return df
";{0: 0.604928334461512}
3293;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interactions = itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2)
  
  for col1, col2 in interactions:
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6155461545184768}
3294;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6169789175409972}
3295;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6002996463821054}
3296;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6038956322239903}
3297;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6039161083024768}
3298;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6025473820805595}
3299;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.615871381808003}
3300;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6169789175409972}
3301;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6035260557586197}
3302;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021577716909492}
3303;"
  # Selecting the numeric columns and categorical columns
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                  'Account length', 'Total night minutes', 'Number vmail messages']

  # Extracting relevant columns from the dataset
  df = df[numeric_cols + ['International plan', 'Voice mail plan']]
  
  # One-hot encoding the categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Generating interaction terms for pairs of numeric columns
  for col1, col2 in itertools.combinations(numeric_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Adding squared and cubed features for each numeric column
  for col in numeric_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  # Standardizing the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6060894932943951}
3304;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6166644274081251}
3305;"
  # Identical to the v0 function implementation, you can put your enhancements here
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6021577716909492}
3307;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6010720680285584}
3308;"
  selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Account length', 'Total night minutes', 'International plan',
                      'Voice mail plan', 'Number vmail messages']
  
  df = pd.get_dummies(df[selected_columns], columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6121616075175698}
3310;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6063658906160492}
3311;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6169789175409972}
3312;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6049283344615118}
3313;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6059800434886811}
3314;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6152087312055935}
3315;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6105145750031458}
3316;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6174061834348927}
3318;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3319;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6048794920674493}
3321;"
  columns_to_select = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                       'Account length', 'Total night minutes', 'International plan', 
                       'Voice mail plan', 'Number vmail messages']
  
  df = df[columns_to_select]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                  'Account length', 'Total night minutes', 'Number vmail messages']
  
  for col in numeric_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604928334461512}
3322;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5880889724310777}
3323;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6010259056813917}
3324;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6114513347558893}
3325;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6031071675957385}
3326;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6056126800560372}
3327;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3328;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
    df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5912516230334874}
3329;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6074128065112013}
3330;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6021577716909492}
3331;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Account length_squared'] = df['Account length'] ** 2
  df['Total night minutes_squared'] = df['Total night minutes'] ** 2
  df['Number vmail messages_squared'] = df['Number vmail messages'] ** 2

  df['Total day minutes_cubed'] = df['Total day minutes'] ** 3
  df['Total eve minutes_cubed'] = df['Total eve minutes'] ** 3
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6042228670893779}
3333;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6002996463821054}
3334;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6050052324012649}
3335;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding with dropping first columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating new interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.605276766517261}
3336;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  power_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                'Account length', 'Total night minutes', 'Number vmail messages']
  for col in power_cols:
      for i in range(2, 4):
          df[f'{col}^{i}'] = df[col] ** i
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5972036338836598}
3337;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3339;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6032174704751988}
3340;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3341;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6032060125939247}
3342;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5992234824288495}
3343;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3344;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding with dropping first columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating new interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6077157909075049}
3346;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604090419229593}
3347;"
  # Keep only selected columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction terms for feature engineering
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared terms for feature engineering
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed terms for feature engineering
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataframe
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.607840072405097}
3348;"
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5887965196008891}
3350;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Number vmail messages':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6003930730721244}
3352;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6091611386943161}
3353;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encode categorical variables and drop the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Create cubed features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6085913381245156}
3354;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.606692002891847}
3355;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6002996463821054}
3356;"
  # Dropping 'Account length' and 'Total night minutes' columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical features and drop first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Perform feature engineering: interaction features, squared, and cubed features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data using z-score normalization
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6023747002289438}
3357;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6081426201757976}
3358;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141327818385048}
3359;"
  # Select the relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical features and drop the first column for each
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features, squared features, and cubed features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data using z-score normalization
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6005313822565934}
3360;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6054509659841243}
3361;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6097874675275721}
3362;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6169789175409972}
3363;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6003987177367732}
3364;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding with dropping the first column and include interaction features
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Include squared and cubed features for specific columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6095110567869888}
3365;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6120099734416182}
3366;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5782925036707117}
3367;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6159320016458449}
3368;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6127087312055934}
3369;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5761110160173258}
3370;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3
   
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6044562728881295}
3371;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6134162783754047}
3373;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_cols]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Product_of_minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Service_calls_squared'] = df['Customer service calls'] ** 2
  df['Account_length_squared'] = df['Account length'] ** 2
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5695541689679455}
3374;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6091935087139266}
3375;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5992687292820885}
3376;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
 
  return df
";{0: 0.6127835815049946}
3377;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6165723675692297}
3378;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6095110567869888}
3379;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
    df[f'{col}_squared'] = df[col] ** 2
    if col not in ['Account length', 'Number vmail messages']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6023397084709516}
3380;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3381;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.611723882720745}
3382;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6012983820660226}
3383;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.604793696201013}
3384;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134162783754047}
3385;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6152087312055935}
3386;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5910697729988053}
3387;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
 
  return df
";{0: 0.6101502516734297}
3388;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
 
  return df
";{0: 0.6114513347558893}
3389;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148584127342558}
3390;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
                'Total night minutes', 'Number vmail messages']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.595900149150365}
3391;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6073334797975106}
3392;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5813308389161917}
3393;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_cols]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Product_of_minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Service_calls_squared'] = df['Customer service calls'] ** 2
  df['Account_length_squared'] = df['Account length'] ** 2
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5687640375481278}
3394;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6211963855265811}
3395;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
  
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6056426201757976}
3396;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6076373026341648}
3397;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6177087312055934}
3398;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6162581139216428}
3399;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5811157673635406}
3401;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6151787910858328}
3402;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.612403853156813}
3403;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5920446686336094}
3404;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5864323459250537}
3405;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6151787910858328}
3407;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6035112079997788}
3408;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df[['Total day minutes_squared', 'Total eve minutes_squared', 'Customer service calls_squared']] = df[['Total day minutes', 'Total eve minutes', 'Customer service calls']] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141481251449874}
3409;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6202087312055935}
3410;"
# Define the function to preprocess the dataset
def select_columns_and_return_dataframe_v2(df: pd.DataFrame) -> pd.DataFrame:
    # Select the specified columns from the dataset
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    # Perform one-hot encoding on categorical columns and drop the first encoded column
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Generate interaction features by multiplying pairs of selected columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Add squared features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    # Add cubed features for 'Customer service calls'
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    # Standardize the dataset by subtracting the mean and dividing by standard deviation
    df = (df - df.mean()) / df.std()
    
    return df

";{0: 0.6103883719241563}
3411;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5916383551471271}
3412;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
 
  return df
";{0: 0.6106381790583542}
3413;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
 
  return df
";{0: 0.6130921667884155}
3414;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6166644274081251}
3415;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3416;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3417;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6101502516734297}
3418;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6110521046995694}
3419;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6088816138864894}
3420;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141481251449874}
3421;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6172819019373008}
3422;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
 
  return df
";{0: 0.6162581139216428}
3423;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3424;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
    
    for col1, col2 in itertools.combinations(interaction_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in interaction_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6077193269248788}
3425;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6155461545184768}
3426;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5785056609164613}
3427;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6177087312055934}
3428;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.609732540729403}
3429;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6155461545184768}
3430;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6170918480887103}
3431;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6056426201757976}
3432;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.603850167345609}
3433;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5888419844792705}
3434;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.618727249724112}
3435;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6155461545184768}
3436;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6162581139216428}
3437;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.618727249724112}
3438;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6199539541355297}
3439;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3440;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6141481251449874}
3441;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3442;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5902386539597402}
3443;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5923591587664815}
3444;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6130921667884155}
3445;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6105145750031458}
3447;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6110521046995694}
3448;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103883719241563}
3449;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3450;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607972387845574}
3451;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6120099734416182}
3452;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103883719241563}
3453;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6107969664997112}
3454;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5827224734833144}
3455;"
# Continuing from the existing code...

  # Selecting important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generating new interaction feature pairs
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  # Transforming certain columns (e.g., squaring, cubing)
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6009714244032811}
3456;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
  
    return df
";{0: 0.5902231187725412}
3459;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
    
    df['Total day minutes_squared'] = df['Total day minutes'] ** 2
    df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
    df['Customer service calls_squared'] = df['Customer service calls'] ** 2
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.618727249724112}
3460;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5884724080138998}
3461;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5873902146671026}
3463;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5902386539597402}
3464;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6106381790583542}
3465;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6144944454913077}
3466;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6041911784358468}
3467;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
    
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3468;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6162581139216428}
3469;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        if col not in ['Account length', 'Number vmail messages']:
            df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6072476839310743}
3470;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    relevant_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
    
    for col1, col2 in itertools.combinations(relevant_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in relevant_cols:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service_calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6138181986612147}
3471;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6159320016458449}
3472;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3473;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6113973371569297}
3474;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042228670893779}
3475;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6052036036544386}
3476;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generating squared and cubed features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6004297914243863}
3477;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6084440253232405}
3478;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6152087312055935}
3479;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3480;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6107969664997112}
3481;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df['Minutes_sum'] = df['Total day minutes'] + df['Total eve minutes'] + df['Total night minutes']
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6067716606046641}
3482;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6137889781191737}
3483;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5945480579279938}
3484;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6225017248361666}
3485;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5935233790421517}
3486;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5952513348994138}
3487;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6069960564846273}
3489;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5956371820267818}
3490;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df['Minutes_sum'] = df['Total day minutes'] + df['Total eve minutes'] + df['Total night minutes']
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6042871885549748}
3491;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6041911784358468}
3492;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6120099734416182}
3493;"
# Continuing from the last function
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features for pairs of selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed feature for Customer service calls
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  # Normalizing the dataset using z-score normalization
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3494;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6073334797975106}
3497;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.588530148901666}
3498;"
# Copying columns from original dataset and one-hot encoding binary categorical columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction terms and polynomial features for certain numerical columns
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6119960564846273}
3499;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3500;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
           'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6121134931103553}
3501;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6048794920674493}
3502;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6148428775470569}
3503;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6144944454913077}
3504;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5874937343358397}
3505;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6130921667884155}
3506;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6155461545184768}
3507;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6130921667884155}
3510;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6107969664997112}
3511;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6086424661453524}
3512;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3513;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6141481251449874}
3514;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3515;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
      if col != 'Customer service calls':
          df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5929178342739779}
3516;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
  
    df = (df - df.mean()) / df.std()
  
    return df
";{0: 0.612403853156813}
3517;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generating new interaction feature pairs
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  # Transforming certain columns (e.g., squaring, cubing)
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls',
              'Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      if col not in ['Account length', 'Number vmail messages']:
          df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6033956668275234}
3518;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6094960564846272}
3519;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6070983163783292}
3520;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6138181986612147}
3521;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3522;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6152087312055935}
3523;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103883719241563}
3524;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6107969664997112}
3525;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6141481251449874}
3526;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  for col in ['Customer service calls','Account length', 'Total night minutes', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5978836043197278}
3527;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6105145750031458}
3528;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6082547082170877}
3529;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5861772077251954}
3530;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3531;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6162581139216428}
3532;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.589322785046998}
3533;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6028394299786032}
3534;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in interaction_cols:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.607658707087037}
3535;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6110521046995694}
3536;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3537;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3539;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6041911784358468}
3540;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5890048206774394}
3541;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6010869655755363}
3542;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df[['Total day minutes_squared', 'Total eve minutes_squared', 'Customer service calls_squared']] = df[['Total day minutes', 'Total eve minutes', 'Customer service calls']] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3543;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3544;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
    df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
    df[f'{col}_squared'] = df[col] ** 2
    df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.602584291778745}
3545;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6093924299859198}
3546;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6194633895906866}
3547;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6166644274081251}
3548;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3549;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6180001422485383}
3551;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6180001422485383}
3552;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5902231187725412}
3553;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^_{power}'] = df[col] ** power
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5902360998205384}
3554;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6039611247830051}
3555;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6110521046995694}
3556;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6159320016458449}
3558;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.618727249724112}
3559;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5889532085816274}
3561;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6103883719241563}
3562;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6169789175409972}
3563;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6106381790583542}
3566;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5405298925110653}
3567;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6110521046995694}
3568;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6134617432537862}
3569;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5923591587664815}
3570;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^_{power}'] = df[col] ** power
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5925654732190941}
3571;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6114513347558893}
3572;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6155461545184768}
3573;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5959632943025797}
3574;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6174061834348927}
3575;"
    # Selecting specified columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Generating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Generating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardizing numerical columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6083596928482635}
3576;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.611723882720745}
3577;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
        
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5763515151515151}
3578;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6184477249162852}
3579;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6021756972031901}
3581;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total eve minutes']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5712110975614559}
3582;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6099648287665691}
3583;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6130921667884155}
3584;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141481251449874}
3585;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6113198423167046}
3586;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5790378452856185}
3587;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6090692272163346}
3588;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6071854753916399}
3589;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6127087312055934}
3590;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5912319354163713}
3591;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6194633895906866}
3592;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      if col == 'Customer service calls':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6177087312055934}
3593;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5966840979219341}
3594;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6037573470502234}
3595;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6114513347558893}
3596;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6060910841467699}
3597;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6152087312055935}
3598;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5952513348994138}
3599;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5958149959287414}
3600;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5924334093624416}
3601;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6099648287665691}
3602;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6090844708505638}
3603;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6155461545184768}
3604;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.611723882720745}
3605;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3606;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6012983820660226}
3607;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.60524906853282}
3608;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      if col == 'Customer service calls':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6095110567869888}
3610;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.590200520061768}
3612;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141481251449874}
3613;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.612403853156813}
3614;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5873776746515414}
3615;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5739718814585427}
3616;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6177087312055934}
3617;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6037573470502234}
3618;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Create squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  # Create cubed feature
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6121134931103553}
3619;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5905889724310778}
3620;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6101285698524944}
3621;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6103883719241563}
3622;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5899588535849022}
3623;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5873902146671026}
3624;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6092996402965025}
3626;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5874937343358397}
3627;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.615871381808003}
3628;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
  
    return df
";{0: 0.591952608794714}
3629;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6103883719241563}
3630;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6155461545184768}
3631;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5896500199123854}
3632;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5902231187725412}
3633;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5857686131496406}
3634;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5910697729988053}
3635;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)  # Added log transformation

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5905999397771755}
3637;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.609732540729403}
3638;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_sqrt'] = np.sqrt(df[col])
        
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5954897798803714}
3639;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_sqrt'] = np.sqrt(df[col])
        
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6027361566919656}
3640;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5739691841067638}
3641;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6169789175409972}
3642;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6092996402965025}
3643;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)  # Added log transformation

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5882622964138912}
3644;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']
  
  df = df[selected_cols]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Product_of_minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Service_calls_squared'] = df['Customer service calls'] ** 2
  df['Account_length_squared'] = df['Account length'] ** 2
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5660037272173806}
3645;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3646;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5943776909630568}
3647;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_sqrt'] = np.sqrt(df[col])
        
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6006001166980254}
3649;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6155933465902088}
3650;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6090692272163346}
3651;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6169789175409972}
3653;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
           
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6056055239402485}
3654;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      if col == 'Customer service calls':
          df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6092996402965025}
3655;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6141327818385048}
3656;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6162581139216428}
3657;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_sqrt'] = np.sqrt(df[col])
        
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6013033936694454}
3658;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6103883719241563}
3659;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.612403853156813}
3660;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.611723882720745}
3661;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6125088769974478}
3662;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6180001422485383}
3663;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6172819019373008}
3664;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5955889724310778}
3665;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.618727249724112}
3666;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.607644097802805}
3667;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141481251449874}
3668;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6059354504240212}
3670;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5954617018031653}
3671;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6055763033982074}
3672;"
# Continue the implementation of the function select_columns_and_return_dataframe_v3
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}_squared'] = (df[col1] * df[col2]) ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.39435616978686483}
3673;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5909263957439611}
3674;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
           
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6112507148697204}
3675;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5917311780566132}
3676;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6138181986612147}
3677;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6209634481867254}
3678;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5968760473075669}
3679;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}_squared'] = (df[col1] * df[col2]) ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.40202981249235464}
3680;"
# Full code not provided, only shell left for completion
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6134617432537862}
3681;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6032665798519457}
3682;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5959632943025797}
3683;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6062113347802848}
3684;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6114513347558893}
3685;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day^2'] = df['Total day minutes'] ** 2
  df['Total eve^2'] = df['Total eve minutes'] ** 2
  df['Customer service^2'] = df['Customer service calls'] ** 2

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5731283286031943}
3687;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3688;"
  # Keep the selected columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot encoding on categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interaction features by multiplying selected columns in pairs
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Add squared and cubed versions of selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  # Normalize the dataset by subtracting mean and dividing by standard deviation
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6049372329552155}
3689;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6023813665223202}
3690;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5969200316304176}
3691;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5982665798519456}
3692;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6015198660084369}
3693;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5903433594392911}
3694;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5982665798519456}
3695;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6155461545184768}
3696;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.611723882720745}
3697;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5924279893873713}
3698;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6045709067840284}
3699;"
    # Selecting relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    # One-hot encoding categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Generating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Adding squared features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    # Adding cubed feature for 'Customer service calls'
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    # Standardizing the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.612403853156813}
3700;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2

    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5902231187725412}
3701;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6062817707703416}
3702;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5986040031648291}
3703;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5954617018031653}
3704;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6121134931103553}
3706;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
           
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6000420334961215}
3707;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6114513347558893}
3708;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5762352975149179}
3709;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5933355452180046}
3710;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.611723882720745}
3711;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total night minutes']:
        df[f'{col}_inv'] = 1 / (df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5971906304848571}
3712;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3714;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    relevant_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
    
    for col1, col2 in itertools.combinations(relevant_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in relevant_cols:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service_calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6180001422485383}
3715;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6028394299786032}
3716;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6066302028260907}
3717;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6055080578088647}
3718;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6141481251449874}
3719;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5966840979219341}
3720;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3721;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5864323459250537}
3722;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3723;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^_{power}'] = df[col] ** power
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5927052356230075}
3724;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103883719241563}
3725;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5987314480630517}
3726;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6144944454913077}
3727;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Generate interaction features by multiplying pairs of selected columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Add squared features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    # Add cubed features for 'Customer service calls'
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    # Standardize the dataset by subtracting the mean and dividing by standard deviation
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6148428775470569}
3728;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.60524906853282}
3729;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5995983956659138}
3730;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    relevant_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
    
    for col1, col2 in itertools.combinations(relevant_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in relevant_cols:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service_calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6103883719241563}
3731;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6101502516734297}
3732;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6130921667884155}
3733;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^_{power}'] = df[col] ** power
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5900497499486539}
3734;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141481251449874}
3735;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5876079281577129}
3736;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6090692272163346}
3737;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5929178342739779}
3738;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']: 
        df[f'{col}_log'] = np.log(df[col] + 1)  # Added log transformation
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.587449140716356}
3739;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6099648287665691}
3740;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5983940247501683}
3741;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      if col == 'Customer service calls':
          df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6191960729777454}
3742;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5846798815219868}
3743;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6148428775470569}
3744;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5895283663704717}
3745;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6134617432537862}
3747;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6217277185473656}
3748;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6118366381823377}
3749;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.57706031312965}
3750;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3751;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                            'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6058739114674013}
3752;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3753;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6110521046995694}
3754;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3755;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6032386600349231}
3756;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3758;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  return df
";{0: 0.391949298021481}
3759;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  product_cols = [['Total day minutes', 'Total eve minutes'], 
                  ['Total day minutes', 'Customer service calls'], 
                  ['Total eve minutes', 'Customer service calls']]
  squared_cols = ['Total day minutes', 'Total eve minutes']
  squared_cols += ['Customer service calls'] * 2
  cubed_cols = ['Customer service calls'] * 3
  
  for col1, col2 in product_cols:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squared_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  return df
";{0: 0.3927624537190161}
3760;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3761;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3762;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5935736654687311}
3763;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6180001422485383}
3764;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.609732540729403}
3765;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6166644274081251}
3766;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6135150438263994}
3767;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6165723675692297}
3769;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in squared_cols: 
      df[f'{col}_squared'] = df[col] ** 2

  cubed_cols = ['Customer service calls']
  for col in cubed_cols:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6134617432537862}
3770;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5873902146671026}
3771;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Interaction_day_eve_calls'] = df['Total day minutes'] * df['Total eve minutes']
  df['Interaction_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Interaction_eve_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5913122428713293}
3772;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    relevant_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
    
    for col1, col2 in itertools.combinations(relevant_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in relevant_cols:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service_calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6130921667884155}
3773;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6152087312055935}
3775;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6159320016458449}
3776;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Interaction_day_eve_calls'] = df['Total day minutes'] * df['Total eve minutes']
  df['Interaction_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Interaction_eve_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5941074909495963}
3777;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Performing one-hot encoding and dropping original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generating interaction features (product and squared terms)
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  # Adding a cubic term for 'Customer service calls'
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6134617432537862}
3778;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  pairwise_interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(pairwise_interactions, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  squared_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in squared_columns: 
      df[f'{col}_squared'] = df[col] ** 2

  cubed_columns = ['Customer service calls']
  for col in cubed_columns:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.611723882720745}
3779;"
  # Selecting specific columns from the dataset
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  # Performing one-hot-encoding on categorical columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features 
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  # Adding polynomial features
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  # Normalizing the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6162581139216428}
3780;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3781;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Product_of_minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Service_calls_squared'] = df['Customer service calls'] ** 2
  df['Account_length_squared'] = df['Account length'] ** 2
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5657660362156827}
3782;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'International plan', 
               'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.612403853156813}
3783;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6148428775470569}
3784;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6162581139216428}
3785;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6065971819076529}
3786;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.550880210982403}
3787;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encode 'International plan' and 'Voice mail plan'
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Generate interaction terms for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Add squared and cubed features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6059354504240212}
3788;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6090844708505638}
3789;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5731951778179626}
3790;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6169789175409972}
3792;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6130921667884155}
3793;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2

    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5881638227304788}
3794;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5927973471693525}
3795;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6069323946494574}
3796;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6021756972031901}
3798;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6137889781191737}
3799;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interactions, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6130921667884155}
3800;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6035112079997788}
3801;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6131499076761817}
3802;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3803;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3804;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6137889781191737}
3805;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6172819019373008}
3806;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6062204352462913}
3807;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6278592459194466}
3808;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df['Minutes_sum'] = df['Total day minutes'] + df['Total eve minutes'] + df['Total night minutes']
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6029551523355628}
3809;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5914225927731923}
3810;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5931334567595054}
3811;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6048133054067952}
3812;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5871041239462292}
3813;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3814;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5981529052972221}
3816;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206633665072363}
3817;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6103883719241563}
3818;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5902231187725412}
3819;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3820;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6113198423167046}
3821;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6121134931103553}
3822;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features
  interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interactions, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Creating squared features
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in squares:
      df[f'{col}_squared'] = df[col] ** 2
  
  # Creating cubed feature
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  # Standardizing the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6110521046995694}
3823;"
  # Select relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # Perform one-hot-encoding
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create interaction terms for selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Generate polynomial features
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6162581139216428}
3824;"
  # Keep the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode 'International plan' and 'Voice mail plan' columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create new interaction features
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  # Create new squared features
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  # Create new cubed feature
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6177087312055934}
3825;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3826;"
  # Selecting the 8 most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encode categorical columns and drop original columns
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Create new features by multiplying certain columns
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  # Create new features by squaring numerical columns
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  # Create a new feature by cubing the 'Customer service calls' column
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3828;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6177087312055934}
3829;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141327818385048}
3830;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6148428775470569}
3831;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  pairwise_interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(pairwise_interactions, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  squared_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in squared_columns: 
      df[f'{col}_squared'] = df[col] ** 2

  cubed_columns = ['Customer service calls']
  for col in cubed_columns:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6141481251449874}
3832;"
   df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
            'Account length', 'Total night minutes', 'International plan',
            'Voice mail plan', 'Number vmail messages']]

   df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

   for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
       df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

   for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
       df[f'{col}_squared'] = df[col] ** 2

   for col in ['Customer service calls']:
       df[f'{col}_cubed'] = df[col] ** 3

   df = (df - df.mean()) / df.std()

   return df
";{0: 0.6127835815049946}
3833;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  cols_to_interact = [['Total day minutes', 'Total eve minutes'], ['Total day minutes', 'Customer service calls'],
                      ['Total eve minutes', 'Customer service calls']]
  for cols in cols_to_interact:
      df[f'{cols[0]}_x_{cols[1]}'] = df[cols[0]] * df[cols[1]]

  cols_to_square = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_square: 
      df[f'{col}_squared'] = df[col] ** 2

  col_to_cube = ['Customer service calls']
  for col in col_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6155461545184768}
3834;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6110521046995694}
3835;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df[['International plan', 'Voice mail plan']] = pd.get_dummies(df[['International plan', 'Voice mail plan']], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6141481251449874}
3836;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5792992831941153}
3837;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Interaction_1'] = df['Total day minutes'] * df['Total eve minutes']
  df['Interaction_2'] = df['Total day minutes'] * df['Customer service calls']
  df['Interaction_3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Day_minutes_squared'] = df['Total day minutes'] ** 2
  df['Eve_minutes_squared'] = df['Total eve minutes'] ** 2
  
  df['Service_calls_squared'] = df['Customer service calls'] ** 2
  df['Service_calls_cubed'] = df['Customer service calls'] ** 3
  
  return df
";{0: 0.3985930209004276}
3838;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5938477424737911}
3839;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6134617432537862}
3840;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.60524906853282}
3841;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6101502516734297}
3842;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247875350216487}
3843;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.596173218835409}
3844;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6090844708505638}
3845;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3846;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6065971819076529}
3847;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6152087312055935}
3848;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6168138219876947}
3850;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5815378452856186}
3851;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  return df
";{0: 0.39685727348160366}
3852;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6165723675692297}
3853;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Product_of_minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Service_calls_squared'] = df['Customer service calls'] ** 2
  df['Account_length_squared'] = df['Account length'] ** 2
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5654681216178674}
3854;"
  # Selecting relevant columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  # One-hot encoding categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Generating new features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  # Standardizing the dataset
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5927973471693525}
3855;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Total night minutes_squared'] = df['Total night minutes'] ** 2
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5838462757789696}
3858;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6255414152877241}
3859;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6169789175409972}
3860;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6159320016458449}
3861;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6110521046995694}
3862;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  product_cols = [['Total day minutes', 'Total eve minutes'], 
                  ['Total day minutes', 'Customer service calls'], 
                  ['Total eve minutes', 'Customer service calls']]
  squared_cols = ['Total day minutes', 'Total eve minutes']
  squared_cols += ['Customer service calls'] * 2
  cubed_cols = ['Customer service calls'] * 3
  
  for col1, col2 in product_cols:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in squared_cols:
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  return df
";{0: 0.38956582718021443}
3863;"
  # Selecting specific columns from the dataframe
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  # One-hot encoding categorical columns and dropping the first encoded column
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Generating new features using combinations of existing columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features for specific columns
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  # Adding cubic features for specific columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardizing the data by subtracting the mean and dividing by the standard deviation
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5948971251898405}
3864;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.618727249724112}
3865;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5952513348994138}
3866;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  return df
";{0: 0.4028101727493654}
3867;"
  # Keep the most important columns
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  # Perform one-hot encoding for categorical variables
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  # Create interactions between selected columns
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  # Create squared terms for selected columns
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6019375769524635}
3868;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6155461545184768}
3869;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6103883719241563}
3870;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:  # Added Total eve minutes to the squared features
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5711686212228396}
3871;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5690665757277378}
3872;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6062204352462913}
3873;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3874;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6199539541355297}
3875;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6144944454913077}
3876;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3877;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6255414152877241}
3878;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5777475227049733}
3879;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6169789175409972}
3880;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Product_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6029228027407166}
3881;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6144944454913077}
3882;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6162581139216428}
3883;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6191960729777454}
3884;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6137889781191737}
3885;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5984324301050489}
3886;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6209634481867254}
3887;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3888;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6155461545184768}
3889;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6121134931103553}
3890;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6094960564846272}
3891;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Product_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6057441539034218}
3892;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6000081628452265}
3893;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'International plan', 'Voice mail plan']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Product_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5941297907151565}
3895;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Product_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6036153934628867}
3896;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6121134931103553}
3897;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Product_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6018767934933885}
3898;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5934215464110137}
3899;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6012042341671755}
3900;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
3901;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  cols_to_interact = [['Total day minutes', 'Total eve minutes'], ['Total day minutes', 'Customer service calls'],
                      ['Total eve minutes', 'Customer service calls']]
  for cols in cols_to_interact:
      df[f'{cols[0]}_x_{cols[1]}'] = df[cols[0]] * df[cols[1]]

  cols_to_square = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in cols_to_square: 
      df[f'{col}_squared'] = df[col] ** 2

  col_to_cube = ['Customer service calls']
  for col in col_to_cube:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6159320016458449}
3902;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6130921667884155}
3903;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
  
    return df
";{0: 0.5724309074573226}
3904;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
3905;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6114513347558893}
3906;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6155461545184768}
3908;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6015198660084369}
3909;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6072375478310377}
3910;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6015198660084369}
3911;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col1, col2 in itertools.combinations(interaction_cols, 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  squared_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in squared_cols: 
      df[f'{col}_squared'] = df[col] ** 2

  cubed_cols = ['Customer service calls']
  for col in cubed_cols:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6169789175409972}
3912;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  df['Interaction_day_eve_calls'] = df['Total day minutes'] * df['Total eve minutes']
  df['Interaction_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Interaction_eve_service_calls'] = df['Total eve minutes'] * df['Customer service calls']

  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5874937343358397}
3913;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
  df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
  df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6209634481867254}
3915;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}_squared'] = (df[col1] * df[col2]) ** 2

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.3984126071766355}
3917;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  # Standardize the data
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6162581139216428}
3918;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.599523204142491}
3920;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5976797390358827}
3921;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.611723882720745}
3922;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes']: 
      df[f'{col}_squared'] = df[col] ** 2
      
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5763515151515151}
3923;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  pairs = list(itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2))
  for col1, col2 in pairs:
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  squares = ['Total day minutes', 'Total eve minutes', 'Customer service calls']
  for col in squares: 
      df[f'{col}_squared'] = df[col] ** 2
  
  cubes = ['Customer service calls']
  for col in cubes:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6169789175409972}
3924;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6041911784358468}
3925;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Product_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls']**2
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.596613272178187}
3926;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5857707879944396}
3927;"
  """"""
  Preprocess the dataset and return a new dataframe with selected columns.
  Uses one-hot encoding and feature engineering to process the columns.
  Normalizes the dataset before returning.

  Args:
    df: input DataFrame with the telecom customer activity data
    
  Returns:
    Processed DataFrame with selected columns and engineered features
  """"""
  
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['interaction1'] = df['Total day minutes'] * df['Total eve minutes']
  df['interaction2'] = df['Total day minutes'] * df['Customer service calls']
  df['interaction3'] = df['Total eve minutes'] * df['Customer service calls']
  
  df['Product_day_service_calls'] = df['Total day minutes'] * df['Customer service calls']
  
  df['Total day minutes_squared'] = df['Total day minutes'] ** 2
  df['Total eve minutes_squared'] = df['Total eve minutes'] ** 2
  df['Customer service calls_squared'] = df['Customer service calls'] ** 2
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6044084390630088}
3928;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6162581139216428}
3929;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6014712472275255}
3930;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5924279893873713}
3931;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
3932;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                            'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
              'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6058739114674013}
3933;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
3934;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6219058883664171}
3935;"
    # Selecting the most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encoding for categorical features and dropping the first encoded column
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Creating interaction features for pairs of important numerical columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    # Creating squared and cubed features for each important numerical column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223632925974063}
3936;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6238505578883526}
3937;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        df[f'{col1}_squared'] = df[col1] ** 2
        df[f'{col1}_cubed'] = df[col1] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5916677497370475}
3938;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6193901650959769}
3939;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6238505578883526}
3940;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5883476465262893}
3942;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6234441650158583}
3943;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6168138219876947}
3944;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6246079615087419}
3945;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6165723675692297}
3946;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df['Minutes_sum'] = df['Total day minutes'] + df['Total eve minutes'] + df['Total night minutes']
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6058497495925153}
3947;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206633665072363}
3948;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5973334186895622}
3949;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
3950;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5715431116384575}
3951;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5908452033027316}
3952;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221388257062728}
3953;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61894258242823}
3954;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5709308488612835}
3955;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6066302028260907}
3956;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6231023908974802}
3957;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5872814774135502}
3958;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total night minutes']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5663201363743547}
3959;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5969870823182377}
3961;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221388257062728}
3963;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6165723675692297}
3964;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213965701582913}
3965;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6164885946981686}
3966;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6185164408463629}
3967;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.612403853156813}
3968;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6246079615087419}
3969;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6071895424836601}
3970;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6037772684831508}
3971;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
  
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in df.columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
  
    return df
";{0: 0.5978583629595776}
3972;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
3973;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    df['Customer service calls_squared'] = df['Customer service calls'] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5962774603329903}
3974;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6144944454913077}
3975;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        df[f'{col1}_squared'] = df[col1] ** 2
        df[f'{col1}_cubed'] = df[col1] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5925896607491965}
3976;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.627980439677968}
3977;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6006866881773807}
3978;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^_{power}'] = df[col] ** power
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5885184401318642}
3979;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6226701587270573}
3980;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6172005541013345}
3981;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6270770973112111}
3982;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5864323459250537}
3983;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6184477249162852}
3984;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
 
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6191960729777454}
3985;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  df['Total_day_x_Customer_service'] = df['Total day minutes'] * df['Customer service calls']
  df['Total_eve_x_Customer_service'] = df['Total eve minutes'] * df['Customer service calls']
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5227106240306478}
3986;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61894258242823}
3987;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.61894258242823}
3988;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerics = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes']
    
    for col1, col2 in itertools.combinations(numerics, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in numerics: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.600471138001399}
3989;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6192234605419116}
3990;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6196696899038037}
3991;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5982556377959571}
3992;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5905590323113172}
3993;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6062817707703416}
3994;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623651171385285}
3995;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6228903018200678}
3996;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
      
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
    
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.615871381808003}
3997;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in df.columns: 
        df[f'{col}_squared'] = df[col] ** 2

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5996561575874108}
4000;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61894258242823}
4001;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.61986084880464}
4004;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6231023908974802}
4005;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252018042966775}
4006;"
    # Keep the same subset of columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encode categorical columns and drop the first to avoid multicollinearity
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Create interaction terms between selected columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    # Create squared and cubed features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data (mean 0, std 1)
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6253747738697572}
4007;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6176068675878168}
4008;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6255414152877241}
4009;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6118441085981583}
4010;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4011;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6127835815049946}
4012;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6128678966138162}
4013;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5984695327406324}
4014;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6182243421169924}
4015;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6121134931103553}
4016;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6010626526519708}
4017;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4018;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  # Creating interaction features
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  # Adding squared features
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  # Adding cubed features
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  # Standardizing the data
  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5916382489028535}
4019;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6164885946981686}
4020;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6141481251449874}
4021;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6062113347802848}
4022;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    df['Customer service calls_squared'] = df['Customer service calls'] ** 2

    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5976797390358827}
4023;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5888419844792705}
4024;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5996480643539467}
4025;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5974226168454803}
4026;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    interaction_1 = df['Total day minutes'] * df['Total eve minutes']
    interaction_2 = df['Customer service calls'] * df['Total night minutes']
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5751465666302356}
4027;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6179213577206888}
4028;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.587757402999723}
4029;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252018042966775}
4031;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6216330990961285}
4032;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6196696899038037}
4033;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6193901650959769}
4034;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5912319354163713}
4035;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6127835815049946}
4036;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 'Total night minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6085726960937523}
4037;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    df['Customer service calls_squared'] = df['Customer service calls'] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5916293188678153}
4038;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6037972987206521}
4039;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6168138219876947}
4041;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6048133054067952}
4042;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    df['Total_day_x_Total_eve'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_x_Cust_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_day_x_Total_night'] = df['Total day minutes'] * df['Total night minutes']
    df['Total_eve_x_Cust_calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total_eve_x_Total_night'] = df['Total eve minutes'] * df['Total night minutes']
    df['Cust_calls_x_Total_night'] = df['Customer service calls'] * df['Total night minutes']
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4043;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206633665072363}
4044;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213965701582913}
4045;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6219058883664171}
4046;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
  
    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.611723882720745}
4047;"
    # Selecting the 8 most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    # One-hot encoding categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Generating interaction features
    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Generating squared and cubed features
    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardizing the dataset
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6204058297703783}
4048;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^{power}'] = df[col] ** power

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5936085779897645}
4049;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in df.columns:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.596173218835409}
4050;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6211511713852851}
4051;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6172005541013345}
4052;"
    # Select specific columns from the dataset
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # Perform one-hot encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Create interaction terms and polynomial features
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5947039270340573}
4053;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:5], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.60921898583542}
4054;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        df[f'{col1}_squared'] = df[col1] ** 2
        df[f'{col1}_cubed'] = df[col1] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.590271830117474}
4055;"
# Continue the implementation here
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerics = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes']
    
    for col1, col2 in itertools.combinations(numerics, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in numerics: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6012379557079168}
4056;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5966391535167359}
4057;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6141481251449874}
4058;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.626304545618414}
4059;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223632925974063}
4060;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6193901650959769}
4061;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.59557656218894}
4062;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6164885946981686}
4063;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^_{power}'] = df[col] ** power
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5927052356230075}
4064;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6041911784358468}
4065;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206633665072363}
4066;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5966993464052288}
4067;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6107647857623484}
4069;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5997496511123718}
4071;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6011798658857482}
4072;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    df['Customer service calls_squared'] = df['Customer service calls'] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.593823472602929}
4073;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
  
  return (df - df.mean()) / df.std()
";{0: 0.6055235929960637}
4074;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4075;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Account length', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5926825527003219}
4076;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6033209680268503}
4077;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6244216116368575}
4078;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5927871364131849}
4079;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
4080;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6110521046995694}
4081;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6211511713852851}
4082;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247875350216487}
4083;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6255414152877241}
4084;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5974924395747863}
4085;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623651171385285}
4086;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61894258242823}
4087;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6193901650959769}
4088;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6178178380519518}
4089;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4090;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221388257062728}
4091;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                         'Account length', 'Total night minutes', 'International plan', 
                         'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interaction_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in interaction_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6238505578883526}
4092;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^{power}'] = df[col] ** power
  
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5882982970388537}
4093;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.61894258242823}
4094;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6066302028260907}
4096;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interactions, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in interactions:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6221388257062728}
4097;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6110521046995694}
4098;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.606536562069811}
4099;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61894258242823}
4100;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4101;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6195721276630484}
4102;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623651171385285}
4103;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_{col2}_product'] = df[col1] * df[col2]

  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Number vmail messages']:
      df[f'{col}_squared'] = df[col] ** 2

  df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.6044541583809815}
4104;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192234605419116}
4105;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6090692272163346}
4106;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6270770973112111}
4107;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6175148077489215}
4108;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6209116504272012}
4109;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^_{power}'] = df[col] ** power
      
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5960476023800084}
4110;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6175148077489215}
4111;"
  selected_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                   'Account length', 'Total night minutes', 'International plan',
                   'Voice mail plan', 'Number vmail messages']

  df = df[selected_cols]

  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

  for col in ['Total day minutes']:
      df[f'{col}_squared'] = df[col] ** 2

  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3

  df = (df - df.mean()) / df.std()

  return df
";{0: 0.5989012533586823}
4112;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6010626526519708}
4113;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
           'Account length', 'Total night minutes', 'International plan', 
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
      df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
      df[f'{col}_squared'] = df[col] ** 2
  
  for col in ['Customer service calls']:
      df[f'{col}_cubed'] = df[col] ** 3
  
  # Standardize the dataset
  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.6127835815049946}
4114;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6231023908974802}
4115;"
# Improved version of select_columns_and_return_dataframe_v2 function
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    df['Total day minutes_squared'] = df['Total day minutes'] ** 2
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    # Standardize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5959632943025797}
4116;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6201385131574371}
4117;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192234605419116}
4118;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221388257062728}
4119;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6231023908974802}
4120;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6237468994721161}
4121;"
  df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
           'Account length', 'Total night minutes', 'International plan',
           'Voice mail plan', 'Number vmail messages']]
  
  df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
  
  for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
      for power in [1, 2, 3]:
          df[f'{col}^{power}'] = df[col] ** power

  df = (df - df.mean()) / df.std()
  
  return df
";{0: 0.5951743714254767}
4122;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6249606951948089}
4123;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6193901650959769}
4124;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6167209502441524}
4125;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6226701587270573}
4126;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    
    for col1, col2 in itertools.combinations(numeric_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in numeric_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6179213577206888}
4127;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Account length'] = (df['Account length'] - df['Account length'].mean()) / df['Account length'].std()
    df['Number vmail messages'] = (df['Number vmail messages'] - df['Number vmail messages'].mean()) / df['Number vmail messages'].std()

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = (df[col1] * df[col2] - (df[col1] * df[col2]).mean()) / (df[col1] * df[col2]).std()

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = (df[col] ** 2 - (df[col] ** 2).mean()) / (df[col] ** 2).std()
        df[f'{col}_cubed'] = (df[col] ** 3 - (df[col] ** 3).mean()) / (df[col] ** 3).std()

    return df
";{0: 0.42160840376682013}
4130;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.623651171385285}
4131;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_day_minutes_x_Total_night_minutes'] = df['Total day minutes'] * df['Total night minutes']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Total_night_minutes'] = df['Total eve minutes'] * df['Total night minutes']
    df['Customer_service_calls_x_Total_night_minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6244216116368575}
4133;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_day_minutes_x_Total_night_minutes'] = df['Total day minutes'] * df['Total night minutes']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Total_night_minutes'] = df['Total eve minutes'] * df['Total night minutes']
    df['Customer_service_calls_x_Total_night_minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6221388257062728}
4134;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6172005541013345}
4135;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6201987904329042}
4136;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6186511713852851}
4137;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.49491464269945284}
4138;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6164885946981686}
4139;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4141;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6194618839247774}
4142;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        df[f'{col1}_squared'] = df[col1] ** 2
        df[f'{col1}_cubed'] = df[col1] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.590271830117474}
4143;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6147314182988654}
4144;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 
                'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6193901650959769}
4145;"
# Keep the same 8 columns as in v0
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

# One-hot encode 'International plan' and 'Voice mail plan' columns and drop original columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

# Create interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

# Create squared and cubed features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

# Standardize the data by subtracting mean and dividing by standard deviation
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.626304545618414}
4146;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
4147;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df['Total_calls'] = df['Total day minutes'] + df['Total eve minutes'] + df['Total night minutes']
    df['Avg_calls_per_day'] = df['Total_calls'] / 3
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    df['Total_minutes_ratio'] = df['Total day minutes'] / (df['Total night minutes'] + 1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.53724225593345}
4148;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6216330990961285}
4149;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6186511713852851}
4150;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6219058883664171}
4152;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for i, (col1, col2) in enumerate(itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                             'Customer service calls', 'Total night minutes'], 2), 1):
        df[f'Interaction_{i}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247875350216487}
4153;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6027519779841761}
4154;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623651171385285}
4155;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6228903018200678}
4156;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6237468994721161}
4157;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5611174322645407}
4158;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6080758931449209}
4159;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6194943666515573}
4160;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.61894258242823}
4161;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6226701587270573}
4162;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6246079615087419}
4163;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4164;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6134617432537862}
4165;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6211511713852851}
4166;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192234605419116}
4167;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_squared'] = df[col] ** 2
    df['Customer service calls_squared'] = df['Customer service calls'] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']: 
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5973334186895622}
4168;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2

    for col in ['Customer service calls']:
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6152087312055935}
4169;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    interaction_1 = df['Total day minutes'] * df['Total eve minutes']
    interaction_2 = df['Customer service calls'] * df['Total night minutes']
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5791623484967148}
4171;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6199579747904165}
4172;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6238505578883526}
4173;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6086781614649309}
4174;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerics = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes']
    
    for col1, col2 in itertools.combinations(numerics, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in numerics: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6038869623304335}
4175;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.532322987935094}
4176;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6093031624706712}
4177;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.622736869808459}
4178;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6278592459194466}
4179;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6325365911426177}
4180;"
# Keep the same initial processing steps as v0
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6255414152877241}
4181;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.608766242820031}
4182;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6247875350216487}
4183;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6160555008629391}
4184;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    
    for col1, col2 in itertools.combinations(numeric_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in numeric_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6204058297703783}
4185;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes']
    
    for col1, col2 in itertools.combinations(numeric_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in numeric_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6073483309838551}
4187;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4188;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6270770973112111}
4189;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numeric_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                    'Account length', 'Total night minutes']
    
    for col1, col2 in itertools.combinations(numeric_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in numeric_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6008106965752529}
4190;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6035112079997788}
4191;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6177693373409265}
4192;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 
                'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6223632925974063}
4193;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6206633665072363}
4194;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'International plan', 'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.591181340704052}
4195;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221388257062728}
4196;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221388257062728}
4197;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6182243421169924}
4198;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623995183392081}
4199;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
4200;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6186511713852851}
4201;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 
                'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6196696899038037}
4202;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
              'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38697320376038913}
4203;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6088212347598279}
4204;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6196696899038037}
4205;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                        'Account length', 'Total night minutes', 'International plan', 
                        'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6221388257062728}
4206;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6238505578883526}
4207;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6228903018200678}
4208;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = np.sqrt(df[col]) 
        df[f'{col}_log'] = np.log(df[col] + 1)  

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5578878499290818}
4209;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4210;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.627980439677968}
4211;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6196696899038037}
4212;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6090477379303015}
4213;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
              'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38350431825704917}
4214;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4215;"
    # Selecting specific columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating pair-wise interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4216;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4217;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6099648287665691}
4218;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_day_minutes_x_Total_night_minutes'] = df['Total day minutes'] * df['Total night minutes']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Total_night_minutes'] = df['Total eve minutes'] * df['Total night minutes']
    df['Customer_service_calls_x_Total_night_minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6172005541013345}
4219;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4220;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.599523204142491}
4221;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6240427376503453}
4222;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_squared'] = df[col] ** 2

    df['Customer service calls_cubed'] = df['Customer service calls'] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5891678178242465}
4223;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38350431825704917}
4224;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # Perform one-hot-encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Create squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6259919357164953}
4225;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6196696899038037}
4226;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns[:-2]:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6160110212374315}
4228;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4229;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-1], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns[:-1]:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6079791687495536}
4230;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6066126458027726}
4231;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.61894258242823}
4232;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6196696899038037}
4233;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6193901650959769}
4235;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61894258242823}
4236;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    interactions_combinations = itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2)
    for col1, col2 in interactions_combinations:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6221388257062728}
4237;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.623651171385285}
4238;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.37982277200762443}
4242;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    features = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(features, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in features:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6147314182988654}
4243;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    return df
";{0: 0.38024960127591706}
4244;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
4245;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerics = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes']
    
    for col1, col2 in itertools.combinations(numerics, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in numerics: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6033913417365433}
4246;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6135397775924989}
4248;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns[:-2]:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6203063013288899}
4249;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6292347043501649}
4250;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6261511713852851}
4251;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4252;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # Perform one-hot encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Generate interaction features
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    # Generate polynomial features
    for col in df.columns[:-2]:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6158601916748372}
4253;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns[:-2]:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6118889829381781}
4255;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6213965701582913}
4256;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
             
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6231023908974802}
4257;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6179213577206888}
4258;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623995183392081}
4259;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total_day_minutes_x_Total_eve_minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_day_minutes_x_Customer_service_calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total_day_minutes_x_Total_night_minutes'] = df['Total day minutes'] * df['Total night minutes']
    df['Total_eve_minutes_x_Customer_service_calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total_eve_minutes_x_Total_night_minutes'] = df['Total eve minutes'] * df['Total night minutes']
    df['Customer_service_calls_x_Total_night_minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6261511713852851}
4260;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213965701582913}
4261;"
    # Select the 8 most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encode categorical columns and drop the first for each
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Generate interaction features between selected columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Generate squared and cubed features for numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213965701582913}
4262;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        df[f'{col1}_squared'] = df[col1] ** 2
        df[f'{col1}_cubed'] = df[col1] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5916677497370475}
4263;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
    
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6008940247501683}
4264;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6183486236145844}
4265;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6202840870662143}
4266;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6027519779841761}
4267;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4268;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6221388257062728}
4269;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4270;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
4271;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6202840870662143}
4272;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6079898478333284}
4273;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
             
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6204058297703783}
4275;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    columns_to_normalize = ['Total day minutes', 'Total eve minutes', 
                            'Customer service calls', 'Total night minutes']
    
    df[columns_to_normalize] = (df[columns_to_normalize] - df[columns_to_normalize].mean()) / df[columns_to_normalize].std()
    
    return df
";{0: 0.38323152898676044}
4276;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6167823802030965}
4277;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223632925974063}
4278;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6233068600080396}
4279;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        df[f'{col}_sqrt'] = np.sqrt(df[col])
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)
        df[f'{col}_exp'] = np.exp(df[col])
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5731753883155563}
4280;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6238505578883526}
4281;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6186511713852851}
4283;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6182243421169924}
4284;"
# Include the necessary imports at the beginning of the code

def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6077193269248788}
4285;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    interactions_combinations = itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2)
    for col1, col2 in interactions_combinations:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6185164408463629}
4286;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.609066633532834}
4287;"
    # Select the 8 most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # Perform one-hot-encoding for categorical columns
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    # Create polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6216330990961285}
4288;"
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.columns[:-2]:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.617758530628253}
4289;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4290;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6048706174758772}
4291;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 
                'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6211511713852851}
4292;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6082947258821088}
4293;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # Perform one-hot encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Generate interaction features
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    # Generate polynomial features
    for col in df.columns[:-2]:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.611124712577538}
4294;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6221388257062728}
4295;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        df[f'{col}_sqrt'] = np.sqrt(df[col])

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6068963385367148}
4296;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6073334797975106}
4297;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls']:
        df[f'{col}_log'] = np.log(df[col] + 1)

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6132114786622669}
4298;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns[:-2], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in df.select_dtypes(include=[np.number]).columns: 
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6117883246826987}
4299;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    # Create polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6228903018200678}
4300;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in df.columns: 
        df[f'{col}_squared'] = df[col] ** 2

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5977314777359293}
4301;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4302;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
4303;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6168744418255366}
4304;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206633665072363}
4305;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6201385131574371}
4306;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(df.columns, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        df[f'{col1}_squared'] = df[col1] ** 2
        df[f'{col1}_cubed'] = df[col1] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5910349604481637}
4307;"
    # Selecting the specified columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Normalizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4308;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223632925974063}
4309;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6206633665072363}
4310;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4311;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623651171385285}
4312;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                        'Account length', 'Total night minutes', 'International plan', 
                        'Voice mail plan', 'Number vmail messages']

    df = df[selected_columns]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interaction_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(interaction_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    poly_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col in poly_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6247875350216487}
4313;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Normalizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6239799272801012}
4314;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4316;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6259738347849475}
4317;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6154368856709994}
4319;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4320;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6221388257062728}
4321;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6253747738697572}
4322;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213965701582913}
4323;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6244216116368575}
4324;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6199390501731639}
4325;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6269340908532324}
4326;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4327;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6202840870662143}
4328;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(numerical_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6011568677329414}
4329;"
    # Extracting the columns of interest
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating new features by taking the product of combinations of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4330;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Normalizing the dataset
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.62618592386236}
4331;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.3854489877789846}
4332;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4333;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6277334498662978}
4334;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6232220461223168}
4335;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6201385131574371}
4336;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6228903018200678}
4338;"
    # Selecting the important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encoding categorical features
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Creating interaction terms between selected features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features (squared and cubed) for selected features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6253747738697572}
4339;"
    df = df[[ 'Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Total day minutes'] * df['Customer service calls']
    df['Interaction_feature_3'] = df['Total day minutes'] * df['Total night minutes']

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5542463171698189}
4340;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4341;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5802821521475814}
4342;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192234605419116}
4343;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6276914944736217}
4344;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(numerical_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6003925973723013}
4345;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6204058297703783}
4346;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.62618592386236}
4347;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6140346069681073}
4348;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical columns numerically
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6293880785832937}
4349;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6136511713852851}
4350;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Normalizing the dataset
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6239799272801012}
4351;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical columns numerically
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.628624948252604}
4352;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total day minutes_x_Total night minutes'] = df['Total day minutes'] * df['Total night minutes']
    df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total eve minutes_x_Total night minutes'] = df['Total eve minutes'] * df['Total night minutes']
    df['Customer service calls_x_Total night minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6228903018200678}
4353;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6183802047638656}
4354;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6167347043501649}
4355;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4356;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical columns numerically
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6293880785832937}
4357;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38024960127591706}
4358;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6231023908974802}
4360;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192347043501649}
4361;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6198434521060138}
4362;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6247875350216487}
4363;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6224736980608567}
4364;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(numerical_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.607742455554568}
4365;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6188277874316125}
4366;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6186511713852851}
4367;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6228903018200678}
4368;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6206633665072363}
4369;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192347043501649}
4370;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                'Customer service calls', 'Total night minutes'], 2))

    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6179213577206888}
4371;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4372;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6175148077489215}
4374;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6217347043501649}
4375;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6172005541013345}
4376;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38620639139937385}
4378;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6217347043501649}
4379;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6238505578883526}
4380;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total day minutes_x_Total night minutes'] = df['Total day minutes'] * df['Total night minutes']
    df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total eve minutes_x_Total night minutes'] = df['Total eve minutes'] * df['Total night minutes']
    df['Customer service calls_x_Total night minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6208963943152214}
4381;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6252223586711525}
4382;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223632925974063}
4383;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
     
    # Standardize the data by subtracting the mean and dividing by the standard deviation
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6219058883664171}
4384;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6240427376503453}
4385;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Normalizing the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5966993464052288}
4386;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6247166320610082}
4387;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223279241557034}
4388;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213078750818722}
4389;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6202840870662143}
4391;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6195761354930726}
4392;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6058372774397115}
4393;"
    # Feature selection based on domain knowledge
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encoding for categorical variables
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Feature engineering
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardization
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
4394;"
    # Selecting relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 'Voice mail plan']]
    
    # Encoding categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Normalizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6188688506916283}
4395;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                'Customer service calls', 'Total night minutes'], 2))

    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6201385131574371}
4396;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4397;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df['Total_day_x_Total_eve'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_night_x_Account_length'] = df['Total night minutes'] * df['Account length']
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5996381458433275}
4398;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    # One-hot encode categorical columns and drop the first for each
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    # Generate interaction features between selected columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Generate squared and cubed features for numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes',
                'Account length', 'Number vmail messages']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6205887937209207}
4399;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4400;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6227532228686834}
4401;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Normalizing the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6035536510409903}
4402;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6178149512637451}
4403;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                'Customer service calls', 'Total night minutes'], 2))

    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6219058883664171}
4404;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6238505578883526}
4405;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6204058297703783}
4406;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6225400132331158}
4407;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6238505578883526}
4408;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221388257062728}
4409;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6211511713852851}
4410;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6199579747904165}
4411;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.61894258242823}
4412;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df['Total_day_x_Total_eve'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_night_x_Account_length'] = df['Total night minutes'] * df['Account length']
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6035067203001373}
4413;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6253747738697572}
4414;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    interactions = list(itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                'Customer service calls', 'Total night minutes'], 2))

    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6213965701582913}
4415;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.376688995215311}
4416;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221077810626928}
4417;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6196696899038037}
4418;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269373349072976}
4419;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical columns numerically
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4420;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6293880785832937}
4421;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.38274960127591706}
4422;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total day & eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Service calls & night minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6105584068079133}
4423;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4425;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.3837372555969047}
4426;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6270770973112111}
4427;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6182243421169924}
4428;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6244216116368575}
4429;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6231023908974802}
4430;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.627980439677968}
4431;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical columns numerically
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4433;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61894258242823}
4434;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38173694304806893}
4435;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6213965701582913}
4436;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38504259490649034}
4437;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6204058297703783}
4438;"
    # Selecting the required columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating new features by taking the product of combinations of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4439;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6228903018200678}
4440;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.3875903656071273}
4441;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4442;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6186511713852851}
4443;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6244216116368575}
4444;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6208963943152214}
4445;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4446;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total day & eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Service calls & night minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5974888200894393}
4447;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221077810626928}
4448;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6238505578883526}
4449;"
# Improved version of `select_columns_and_return_dataframe_v2`.
def select_columns_and_return_dataframe_v3(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38350431825704917}
4451;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Total night minutes']:
        df[col] = (df[col] - df[col].mean()) / df[col].std()
        
    df['International plan'] = df['International plan'].astype('category').cat.codes
    df['Voice mail plan'] = df['Voice mail plan'].astype('category').cat.codes
    
    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Total day minutes'] * df['Customer service calls']
    df['Interaction_feature_3'] = df['Total day minutes'] * df['Account length']

    return df
";{0: 0.3947239525022101}
4452;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6196696899038037}
4453;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6188688506916283}
4454;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6188688506916283}
4455;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6196696899038037}
4456;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4457;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4458;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total day & eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Service calls & night minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6039215686274509}
4459;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.615090565324679}
4460;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6238505578883526}
4461;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6272117774458912}
4462;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6259738347849475}
4463;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 
                'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6213965701582913}
4464;"
    df = df[['Total day minutes', 'Total eve minutes', 
             'Customer service calls', 'Account length', 
             'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 
                'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6204058297703783}
4466;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6232220461223168}
4467;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6227532228686834}
4468;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df['Total_day_x_Total_eve'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_night_x_Account_length'] = df['Total night minutes'] * df['Account length']
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6023408485460302}
4469;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213078750818722}
4470;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Total day & eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Service calls & night minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6062026576635069}
4471;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6225797428138565}
4472;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return (df - df.mean()) / df.std()
";{0: 0.631842066313355}
4473;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192234605419116}
4474;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6193901650959769}
4475;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(numerical_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6060894932943951}
4476;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6253747738697572}
4479;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6239799272801012}
4480;"
    features = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 
                'International plan', 'Voice mail plan']

    df = df[features]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6188688506916283}
4481;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6257536916919371}
4483;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6295359091694419}
4484;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    numerical_cols = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                      'Total night minutes', 'Account length', 'Number vmail messages']
    
    for col1, col2 in itertools.combinations(numerical_cols, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in numerical_cols:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6086701384556854}
4485;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df['Total_day_x_Total_eve'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total_night_x_Account_length'] = df['Total night minutes'] * df['Account length']
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.600094446299628}
4486;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6193901650959769}
4487;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6196696899038037}
4488;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5999383401159205}
4489;"
    # Selecting the most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical columns as integers
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4490;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213078750818722}
4491;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4492;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4493;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4494;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4495;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    df['Interact_day_eve'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interact_day_service'] = df['Total day minutes'] * df['Customer service calls']
    df['Interact_day_night'] = df['Total day minutes'] * df['Total night minutes']
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5545493015661225}
4496;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.595985060690943}
4497;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6210048906855686}
4498;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
  
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5028217838620052}
4499;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6292347043501649}
4500;"
def select_columns_and_return_dataframe_v1(df: pd.DataFrame) -> pd.DataFrame:
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4501;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return df
";{0: 0.3860200415274894}
4502;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6225797428138565}
4503;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction terms
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6257536916919371}
4505;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206904005526965}
4506;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4507;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6278710679865285}
4508;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192347043501649}
4509;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    categorical_cols = ['International plan', 'Voice mail plan']
    df[categorical_cols] = df[categorical_cols].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6205983407138013}
4510;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4511;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6227532228686834}
4512;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6297249004285963}
4513;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6265876455266355}
4514;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical variables as numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features and polynomial features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4515;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6334272509340158}
4516;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6188688506916283}
4517;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical variables as numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features and polynomial features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4518;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4519;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features by multiplying pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create quadratic and cubic features for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38470082078811224}
4520;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4521;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating new features by taking the product of combinations of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4522;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.3877496012759171}
4524;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4525;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6205983407138013}
4526;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5020174269286161}
4527;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247475248629855}
4528;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6213078750818722}
4529;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6006182653241476}
4530;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.62618592386236}
4531;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df['International plan'] = df['International plan'].astype('category').cat.codes
    df['Voice mail plan'] = df['Voice mail plan'].astype('category').cat.codes

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6259738347849475}
4532;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.624480103123171}
4533;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']
    
    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6310639726428479}
4534;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical variables as numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features and polynomial features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4535;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6271262706152252}
4536;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical variables as numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features and polynomial features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4537;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192347043501649}
4538;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features by multiplying pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed versions of numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623995183392081}
4539;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223069935067913}
4540;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4541;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.626304545618414}
4542;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6282853372615572}
4543;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4544;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',  
             'Account length', 'Total night minutes', 'International plan',  
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',  
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4546;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    # Encoding categorical columns as integers
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardizing the dataset
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6192347043501649}
4548;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']] = np.log1p(
        df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']]
    )

    return df
";{0: 0.36449935792635435}
4549;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6174422515199762}
4550;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4551;"
    # Select only the most important columns from the dataset
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features by multiplying pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed versions of numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4553;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical columns numerically
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4554;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6257536916919371}
4555;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4556;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4557;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6175148077489215}
4558;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6267347043501649}
4559;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Normalize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4560;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls',  
               'Account length', 'Total night minutes', 'International plan',  
               'Voice mail plan']].assign(**{
        'International plan': df['International plan'].astype('category').cat.codes,
        'Voice mail plan': df['Voice mail plan'].astype('category').cat.codes,
        'Total day minutes_x_Total eve minutes': df['Total day minutes'] * df['Total eve minutes'],
        'Total day minutes_x_Customer service calls': df['Total day minutes'] * df['Customer service calls'],
        'Total day minutes_x_Total night minutes': df['Total day minutes'] * df['Total night minutes'],
        'Total eve minutes_x_Customer service calls': df['Total eve minutes'] * df['Customer service calls'],
        'Total eve minutes_x_Total night minutes': df['Total eve minutes'] * df['Total night minutes'],
        'Customer service calls_x_Total night minutes': df['Customer service calls'] * df['Total night minutes'],
        'Total day minutes_squared': df['Total day minutes'] ** 2,
        'Total eve minutes_squared': df['Total eve minutes'] ** 2,
        'Customer service calls_squared': df['Customer service calls'] ** 2,
        'Total night minutes_squared': df['Total night minutes'] ** 2,
        'Total day minutes_cubed': df['Total day minutes'] ** 3,
        'Total eve minutes_cubed': df['Total eve minutes'] ** 3,
        'Customer service calls_cubed': df['Customer service calls'] ** 3,
        'Total night minutes_cubed': df['Total night minutes'] ** 3
    }).pipe(lambda x: (x - x.mean()) / x.std())
";{0: 0.6284583068346369}
4561;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4562;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4563;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6232220461223168}
4564;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6195721276630484}
4565;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4566;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6178149512637451}
4567;"
    features = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 
                'Account length', 'Total night minutes', 
                'International plan', 'Voice mail plan']

    df = df[features]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4568;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5002243812646027}
4569;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6224736980608567}
4570;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    # Select only the specified columns in the dataframe
    df = df[selected_columns]

    # Encode categorical columns as numerical using cat.codes
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    # Create interaction features by multiplying combinations of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Create polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the dataset by subtracting the mean and dividing by the standard deviation
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.623489362735258}
4571;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls',  
               'Account length', 'Total night minutes', 'International plan',  
               'Voice mail plan']].assign(**{
        'International plan': df['International plan'].astype('category').cat.codes,
        'Voice mail plan': df['Voice mail plan'].astype('category').cat.codes,
        'Total day minutes_x_Total eve minutes': df['Total day minutes'] * df['Total eve minutes'],
        'Total day minutes_x_Customer service calls': df['Total day minutes'] * df['Customer service calls'],
        'Total day minutes_x_Total night minutes': df['Total day minutes'] * df['Total night minutes'],
        'Total eve minutes_x_Customer service calls': df['Total eve minutes'] * df['Customer service calls'],
        'Total eve minutes_x_Total night minutes': df['Total eve minutes'] * df['Total night minutes'],
        'Customer service calls_x_Total night minutes': df['Customer service calls'] * df['Total night minutes'],
        'Total day minutes_squared': df['Total day minutes'] ** 2,
        'Total eve minutes_squared': df['Total eve minutes'] ** 2,
        'Customer service calls_squared': df['Customer service calls'] ** 2,
        'Total night minutes_squared': df['Total night minutes'] ** 2,
        'Total day minutes_cubed': df['Total day minutes'] ** 3,
        'Total eve minutes_cubed': df['Total eve minutes'] ** 3,
        'Customer service calls_cubed': df['Customer service calls'] ** 3,
        'Total night minutes_cubed': df['Total night minutes'] ** 3
    }).pipe(lambda x: (x - x.mean()) / x.std())
";{0: 0.6224736980608567}
4573;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6167347043501649}
4574;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4576;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38200425966101026}
4577;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4578;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.62618592386236}
4579;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6267347043501649}
4580;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5877800582017372}
4581;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4582;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6282853372615572}
4583;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5886934099623429}
4584;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4585;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6276914944736217}
4586;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical columns using one-hot encoding
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6182023246650906}
4587;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6179475475950269}
4588;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6275051446017372}
4589;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6257536916919371}
4590;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4591;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6293880785832937}
4592;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6309427788843264}
4593;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4594;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4595;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4596;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Generate interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Generate polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4598;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4599;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6263903929729194}
4600;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6295359091694419}
4601;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.38680023418730947}
4603;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623995183392081}
4604;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4605;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls',  
               'Account length', 'Total night minutes', 'International plan',  
               'Voice mail plan']].assign(**{
        'International plan': df['International plan'].astype('category').cat.codes,
        'Voice mail plan': df['Voice mail plan'].astype('category').cat.codes
    }).pipe(lambda x: (x - x.mean()) / x.std())
";{0: 0.5037874848277062}
4606;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6308169828311775}
4607;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213078750818722}
4608;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4610;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4611;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6237468994721161}
4612;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4613;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6178149512637451}
4614;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6205983407138013}
4615;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6219058883664171}
4616;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6252223586711525}
4618;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4619;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6209017111681581}
4620;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4621;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.612488038950805}
4622;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192347043501649}
4623;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4624;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223069935067913}
4625;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return (df - df.mean()) / df.std()
";{0: 0.6284583068346369}
4626;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.62618592386236}
4627;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4628;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4629;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.63262976607856}
4630;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4631;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for i, (col1, col2) in enumerate(itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                             'Customer service calls', 'Total night minutes'], 2), 1):
        df[f'Interaction_{i}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6187982302088145}
4632;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    df['Interaction_feature_1'] = df['Total day minutes'] * df['Total eve minutes']
    df['Interaction_feature_2'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.598896798634528}
4633;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206633665072363}
4634;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']
    
    df = df[selected_columns]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4635;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Converting categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating new features by taking the product of combinations of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192347043501649}
4636;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6242347043501649}
4637;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4638;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6227532228686834}
4639;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'International plan']].apply(lambda x: x.astype('category').cat.codes)
";{0: 0.3694634845158874}
4640;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df['International plan'] = pd.factorize(df['International plan'])[0]
    df['Voice mail plan'] = pd.factorize(df['Voice mail plan'])[0]

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6269340908532324}
4641;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4642;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4643;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.62618592386236}
4644;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'])
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6232023246650906}
4645;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return (df - df.mean()) / df.std()
";{0: 0.6210048906855686}
4646;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'International plan', 
               'Voice mail plan']].assign(**{
        'International plan': df['International plan'].astype('category').cat.codes,
        'Voice mail plan': df['Voice mail plan'].astype('category').cat.codes
    }).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.5029872235178907}
4647;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
               'Account length', 'Total night minutes', 'International plan',
               'Voice mail plan']].assign(**{
                   col1 + '_x_' + col2: df[col1] * df[col2] for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                                                                'Customer service calls', 'Total night minutes'], 2)
               }).assign(**{f'{col}_squared': df[col] ** 2 for col in ['Total day minutes', 'Total eve minutes',
                                                                     'Customer service calls', 'Total night minutes']
               }).assign(**{f'{col}_cubed': df[col] ** 3 for col in ['Total day minutes', 'Total eve minutes',
                                                                  'Customer service calls', 'Total night minutes']
               }).apply(lambda x: (x - x.mean()) / x.std() if x.name not in ['International plan', 'Voice mail plan'] else x.astype('category').cat.codes)
";{0: 0.6255422148574865}
4649;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4650;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 'Voice mail plan']]
    
    # Encoding categorical columns numerically
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features for pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Adding squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4651;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating new features by taking the product of combinations of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features for each selected column
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4652;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.62618592386236}
4653;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6185164408463629}
4655;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4656;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223069935067913}
4657;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6188688506916283}
4658;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4659;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features by multiplying pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed versions of numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4660;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.625446825562286}
4661;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return (df - df.mean()) / df.std()
";{0: 0.6217347043501649}
4662;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4664;"
    selected_columns = ['Total day minutes', 'Total eve minutes', 'Customer service calls',
                        'Account length', 'Total night minutes', 'International plan',
                        'Voice mail plan']

    df = df[selected_columns]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.factorize(x)[0])

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6237468994721161}
4665;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4666;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[
        ['International plan', 'Voice mail plan']
    ].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(
        ['Total day minutes', 'Total eve minutes', 
         'Customer service calls', 'Total night minutes'], 2
    ):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in [
        'Total day minutes', 'Total eve minutes', 
        'Customer service calls', 'Total night minutes'
    ]:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4667;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6278710679865285}
4668;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6199390501731639}
4669;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6181740982895587}
4670;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan', 'Number vmail messages']]
    
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242280944622082}
4671;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247166320610082}
4672;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6213078750818722}
4673;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4674;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4675;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6252223586711525}
4676;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    interactions = itertools.combinations(['Total day minutes', 'Total eve minutes',
                                           'Customer service calls', 'Total night minutes'], 2)
    squares_cubes = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    
    for col1, col2 in interactions:
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    df[[f'{col}_squared' for col in squares_cubes]] = df[squares_cubes] ** 2
    df[[f'{col}_cubed' for col in squares_cubes]] = df[squares_cubes] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4677;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4678;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4679;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4680;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4681;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6276914944736217}
4682;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using category codes
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction terms for pairs of numerical columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed features for numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the entire dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6232220461223168}
4683;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6278710679865285}
4684;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.49943678176732575}
4685;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.62618592386236}
4686;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features by multiplying pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed versions of numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213078750818722}
4687;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6252223586711525}
4688;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4689;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features by multiplying pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed versions of numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4690;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6205983407138013}
4691;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624989421331297}
4692;"
    # Select columns of interest
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encode categorical columns as numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Generate interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Generate polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Normalize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.624989421331297}
4693;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4694;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4695;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.623489362735258}
4696;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
    'Account length', 'Total night minutes', 'International plan', 
    'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6282853372615572}
4697;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6256632757787364}
4698;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4699;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6221834222988829}
4700;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4701;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5047287376676932}
4702;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4703;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6259738347849475}
4704;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4705;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.62618592386236}
4706;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6242347043501649}
4707;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.Categorical(x).codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6269340908532324}
4708;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6247166320610082}
4709;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5557285832725176}
4710;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])

    return (df - df.mean()) / df.std()
";{0: 0.6095705380152319}
4711;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4712;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])

    return (df - df.mean()) / df.std()
";{0: 0.6087047371494311}
4713;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6257536916919371}
4714;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206904005526965}
4715;"
    # Selecting relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical variables as numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features and polynomial features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
            
    return df
";{0: 0.6227532228686834}
4716;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4717;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubedsqrt'] = np.sqrt(df[col] ** 3)  # Added cubed square root transformation
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6194997714950485}
4718;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total day minutes_x_Total night minutes'] = df['Total day minutes'] * df['Total night minutes']
    df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total eve minutes_x_Total night minutes'] = df['Total eve minutes'] * df['Total night minutes']
    df['Customer service calls_x_Total night minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6276914944736217}
4719;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6141721028432475}
4720;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])

    return (df - df.mean()) / df.std()
";{0: 0.6087047371494311}
4721;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6275051446017372}
4722;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4723;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6227532228686834}
4724;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6265276979807382}
4725;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223069935067913}
4726;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4727;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'International plan', 
               'Voice mail plan']].assign(**{
        'International plan': df['International plan'].astype('category').cat.codes,
        'Voice mail plan': df['Voice mail plan'].astype('category').cat.codes
    }).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.5036366552651119}
4730;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6159037045748493}
4731;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4732;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])

    return (df - df.mean()) / df.std()
";{0: 0.6113723398170338}
4733;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical columns
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardizing numerical columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6195721276630484}
4734;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4735;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4736;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5063515873918087}
4737;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6278710679865285}
4738;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] + df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6159381072582586}
4739;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6217347043501649}
4740;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Convert categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction terms
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Create squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.627311627427088}
4741;"
    # Selecting specific columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction terms
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6239799272801012}
4742;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4743;"
    # Selecting specific columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical columns
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardizing numerical columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4744;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical variables as numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features and polynomial features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624989421331297}
4745;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.Categorical(x).codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6284583068346369}
4746;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6263903929729194}
4747;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4748;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6215999738112428}
4749;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    # Convert categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction terms
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4750;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6257536916919371}
4751;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6199579747904165}
4752;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.586317449095816}
4753;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4754;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4755;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4756;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical columns
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Standardizing numerical columns
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4758;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223069935067913}
4759;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])

    return (df - df.mean()) / df.std()
";{0: 0.6132235060517616}
4760;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6230225831380436}
4761;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4762;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6227532228686834}
4763;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4764;"
    # Select relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Generate interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Generate polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Normalize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6252223586711525}
4765;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6217347043501649}
4766;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)
        
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_div_{col2}'] = df[col1] / (df[col2] + 1)
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6181609588041461}
4767;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6199579747904165}
4768;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4769;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)
        
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_div_{col2}'] = df[col1] / (df[col2] + 1)
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61223503287822}
4772;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Generate interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Generate polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the dataset
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6275051446017372}
4773;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247166320610082}
4774;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5824694452478122}
4775;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)
        
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_div_{col2}'] = df[col1] / (df[col2] + 1)
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61223503287822}
4776;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4777;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5861776866919026}
4778;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6168387695099142}
4779;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6141721028432475}
4780;"
    # Keep only the selected columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Create polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6242347043501649}
4781;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4782;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6300208678721775}
4783;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4784;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6206904005526965}
4785;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Create polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6202840870662143}
4786;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return (df - df.mean()) / df.std()
";{0: 0.6230225831380436}
4787;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6202840870662143}
4788;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624989421331297}
4789;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.Categorical(x).codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.624480103123171}
4790;"
    return df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
               'Account length', 'Total night minutes', 'International plan', 
               'Voice mail plan']].assign(**{
        'International plan': pd.Categorical(df['International plan']).codes,
        'Voice mail plan': pd.Categorical(df['Voice mail plan']).codes
    }).apply(lambda x: (x - x.mean()) / x.std())
";{0: 0.49609517713539847}
4791;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4792;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6242347043501649}
4793;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4794;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6205983407138013}
4795;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4796;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192347043501649}
4797;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6195721276630484}
4798;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4799;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247166320610082}
4800;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.624480103123171}
4801;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6040749750795978}
4802;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6227532228686834}
4803;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    df['Total day minutes_x_Total eve minutes'] = df['Total day minutes'] * df['Total eve minutes']
    df['Total day minutes_x_Customer service calls'] = df['Total day minutes'] * df['Customer service calls']
    df['Total day minutes_x_Total night minutes'] = df['Total day minutes'] * df['Total night minutes']
    df['Total eve minutes_x_Customer service calls'] = df['Total eve minutes'] * df['Customer service calls']
    df['Total eve minutes_x_Total night minutes'] = df['Total eve minutes'] * df['Total night minutes']
    df['Customer service calls_x_Total night minutes'] = df['Customer service calls'] * df['Total night minutes']

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6237468994721161}
4804;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4805;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6124516727357208}
4806;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',  
             'Account length', 'Total night minutes', 'International plan',  
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',  
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4807;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.5031464591866806}
4808;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6210048906855686}
4809;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6192047642304044}
4810;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])

    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6176808747730721}
4811;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features by multiplying pairs of columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed versions of numerical columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6202840870662143}
4812;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return (df - df.mean()) / df.std()
";{0: 0.6202840870662143}
4813;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4814;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4815;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4816;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6259738347849475}
4819;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)
        
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_div_{col2}'] = df[col1] / (df[col2] + 1)
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6107535513967386}
4820;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4821;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6265276979807382}
4822;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df['Account length'] = np.log(df['Account length'])
    
    return (df - df.mean()) / df.std()
";{0: 0.6111714169802092}
4823;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6252223586711525}
4824;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6205983407138013}
4826;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Encoding categorical variables as numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features and polynomial features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4827;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.635098901881029}
4828;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6275051446017372}
4829;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: pd.Categorical(x).codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6275051446017372}
4830;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])

    return (df - df.mean()) / df.std()
";{0: 0.6086875358077265}
4831;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6292347043501649}
4833;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4834;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)
        
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_div_{col2}'] = df[col1] / (df[col2] + 1)
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.611222374650372}
4835;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223069935067913}
4836;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)
        
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_div_{col2}'] = df[col1] / (df[col2] + 1)
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6090052192136237}
4837;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    # Convert categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    # Create polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    # Standardize the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6276914944736217}
4838;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col in ['Total day minutes', 'Total eve minutes']:
        df[f'{col}_log'] = np.log(df[col] + 1)
        
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes'], 2):
        df[f'{col1}_div_{col2}'] = df[col1] / (df[col2] + 1)
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.61223503287822}
4839;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6158706166436722}
4840;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5852322875011002}
4842;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length', 
             'Total night minutes', 'International plan', 'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4844;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    df['Total_minutes_difference'] = df['Total day minutes'] - df['Total eve minutes']
    
    df['Customer_service_calls_squared'] = df['Customer service calls'] ** 2
    
    df['Account_length_log'] = np.log(df['Account length'] + 1)

    return df
";{0: 0.3751201094513079}
4845;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])

    return (df - df.mean()) / df.std()
";{0: 0.6069038713485652}
4846;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6295359091694419}
4847;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    # Normalizing the dataframe
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6188688506916283}
4848;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.62618592386236}
4849;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df['Account length'] = np.log1p(df['Account length'])
    df = pd.get_dummies(df, columns=['International plan', 'Voice mail plan'], drop_first=True)
    
    return df
";{0: 0.3784122518783267}
4850;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6185204186358793}
4851;"
    # Selecting columns of interest
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical variables
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4852;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4853;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4854;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6292347043501649}
4855;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4856;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6227532228686834}
4857;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4858;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4859;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.628624948252604}
4860;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6133063019774467}
4861;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4862;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4863;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical variables
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4864;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    interactions = pd.DataFrame()
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        interactions[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    powers = pd.DataFrame()
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        powers[f'{col}_squared'] = df[col] ** 2
        powers[f'{col}_cubed'] = df[col] ** 3
        
    df = pd.concat([df, interactions, powers], axis=1)
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4865;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213078750818722}
4866;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4867;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4868;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4869;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4870;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4871;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213078750818722}
4872;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4873;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4874;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4875;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4876;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6237468994721161}
4877;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4878;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6237468994721161}
4879;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.627311627427088}
4880;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.613289100635742}
4881;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4882;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6098710275744303}
4883;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Account length'] = np.log(df['Account length'])
    
    return (df - df.mean()) / df.std()
";{0: 0.6199639493499773}
4885;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6223069935067913}
4886;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6232220461223168}
4887;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6278710679865285}
4888;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4889;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.631180812134596}
4890;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Account length'] = np.log(df['Account length'])
    
    return (df - df.mean()) / df.std()
";{0: 0.6164762950289896}
4891;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])

    df['Account_length_log'] = np.log(df['Account length'])
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]

    return (df - df.mean()) / df.std()
";{0: 0.609470892827334}
4892;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4893;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6342347043501648}
4894;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4896;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4898;"
    # Keep only the selected columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using Label Encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4899;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6284583068346369}
4900;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623995183392081}
4901;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])

    return (df - df.mean()) / df.std()
";{0: 0.6087047371494311}
4903;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    cols_for_interaction = ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']
    for col1, col2 in itertools.combinations(cols_for_interaction, 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in cols_for_interaction:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6230225831380436}
4904;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4905;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624989421331297}
4906;"
    # Selecting the 8 most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating new features by calculating the product of pairs and adding squared and cubed versions of existing columns
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Normalizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624989421331297}
4907;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4909;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6282853372615572}
4911;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6215999738112428}
4912;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.617118139932987}
4913;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6178149512637451}
4914;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247166320610082}
4915;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4916;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6195721276630484}
4917;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6237468994721161}
4918;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6210048906855686}
4919;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6213078750818722}
4920;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
        
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4921;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    df['Account length'] = np.log(df['Account length'])
    
    return (df - df.mean()) / df.std()
";{0: 0.6078161520503198}
4922;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624989421331297}
4923;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4924;"
    # Selecting relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Converting categorical columns to numerical using label encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Generating interaction features (multiplication of pairs of columns)
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Generating polynomial features (squared and cubed) for selected columns
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Transforming 'Account length' column using logarithm function
    df['Account length'] = np.log(df['Account length'])
    
    # Normalize the data by subtracting the mean and dividing by standard deviation
    return (df - df.mean()) / df.std()

";{0: 0.6170485841856161}
4925;"
    # Selecting the 8 most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4926;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']] = (df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']]**2)
    
    df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']] = (df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']]**3)

    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.4907718157277099}
4927;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4928;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4930;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return (df - df.mean()) / df.std()
";{0: 0.6271262706152252}
4931;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Account length'] = np.log(df['Account length'])
    
    return (df - df.mean()) / df.std()
";{0: 0.6184884901509409}
4932;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6224736980608567}
4933;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6278710679865285}
4934;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4935;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4936;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubedsqrt'] = np.sqrt(df[col] ** 3)  # Added cubed square root transformation
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6232580166246696}
4937;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.5852322875011002}
4938;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6195721276630484}
4939;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.613289100635742}
4940;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4941;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return df
";{0: 0.3809885949866089}
4942;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return (df - df.mean()) / df.std()
";{0: 0.6302953104107709}
4943;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6185204186358793}
4944;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.62618592386236}
4945;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6033621883389811}
4946;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])
    
    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6116563795728074}
4947;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Convert categorical columns to numerical using Label Encoding
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Create interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Create squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardize the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6227532228686834}
4948;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6202840870662143}
4950;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.624480103123171}
4951;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6278710679865285}
4952;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6227532228686834}
4953;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6310639726428479}
4955;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4956;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6239799272801012}
4957;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6282853372615572}
4958;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6269340908532324}
4959;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df['International plan'] = df['International plan'].astype('category').cat.codes
    df['Voice mail plan'] = df['Voice mail plan'].astype('category').cat.codes

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6195721276630484}
4960;"
    # Selecting the 8 most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    # Encoding categorical variables
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6230225831380436}
4961;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df['Total_minutes_sum'] = (df['Total day minutes'] + df['Total eve minutes'] +
                               df['Total night minutes'])

    df['Customer_service_division'] = (df['Customer service calls'] / 
                                       (df['Customer service calls'].max() - df['Customer service calls'].min()))
    
    for col1, col2, col3 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                                    'Customer service calls', 'Account length',
                                                    'Total night minutes'], 3):
        df[f'{col1}_x_{col2}_x_{col3}'] = df[col1] * df[col2] * df[col3]
    
    return (df - df.mean()) / df.std()
";{0: 0.6107750752423983}
4962;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6263903929729194}
4963;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6300208678721775}
4964;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col1 in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col1}_squared'] = df[col1] ** 2
        df[f'{col1}_cubed'] = df[col1] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6310639726428479}
4965;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    return (df - df.mean()) / df.std()
";{0: 0.6242347043501649}
4966;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6293880785832937}
4967;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df['Account length'] = np.log(df['Account length'])
    
    return (df - df.mean()) / df.std()
";{0: 0.6174948135475081}
4968;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.628624948252604}
4969;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical variables
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4970;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6070743095511023}
4971;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
             
    df[['International plan', 'Voice mail plan']] = df[['International plan', 
                                                       'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623489362735258}
4972;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical variables
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4973;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4974;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6308169828311775}
4975;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6237468994721161}
4976;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6220261153931097}
4977;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4978;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Account length',
             'Total night minutes', 'International plan', 'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4979;"
    # Selecting the relevant columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical columns as numeric
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4980;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4981;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6239799272801012}
4982;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.628624948252604}
4983;"
    # Selecting the most important columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical variables
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6247166320610082}
4984;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6284583068346369}
4985;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6252223586711525}
4986;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6259738347849475}
4987;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    return (df - df.mean()) / df.std()
";{0: 0.6224736980608567}
4988;"
# Keeping the same columns as before
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    # Encoding categorical variables
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating polynomial features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.623995183392081}
4989;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6040865046730535}
4990;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.625446825562286}
4991;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df['Account length'] = np.log(df['Account length'])
    
    return (df - df.mean()) / df.std()
";{0: 0.6207154254637722}
4993;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6242347043501649}
4994;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6227532228686834}
4995;"
    # Selecting specific columns
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    # Converting categorical columns to numerical
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    # Creating interaction features
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    # Creating squared and cubed features
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    # Standardizing the data
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6185204186358793}
4996;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]

    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)

    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]

    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2

    df = (df - df.mean()) / df.std()

    return df
";{0: 0.6048197083241085}
4997;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6267347043501649}
4998;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls', 
             'Account length', 'Total night minutes', 'International plan', 
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes', 
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
        
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6276914944736217}
4999;"
    df = df[['Total day minutes', 'Total eve minutes', 'Customer service calls',
             'Account length', 'Total night minutes', 'International plan',
             'Voice mail plan']]
    
    df[['International plan', 'Voice mail plan']] = df[['International plan', 'Voice mail plan']].apply(lambda x: x.astype('category').cat.codes)
    
    for col1, col2 in itertools.combinations(['Total day minutes', 'Total eve minutes',
                                              'Customer service calls', 'Total night minutes'], 2):
        df[f'{col1}_x_{col2}'] = df[col1] * df[col2]
    
    for col in ['Total day minutes', 'Total eve minutes', 'Customer service calls', 'Total night minutes']:
        df[f'{col}_squared'] = df[col] ** 2
        df[f'{col}_cubed'] = df[col] ** 3
    
    df = (df - df.mean()) / df.std()
    
    return df
";{0: 0.6181740982895587}
